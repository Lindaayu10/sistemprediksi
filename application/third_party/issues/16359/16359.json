{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "PHPExcel",
      "DisplayName": "PHPExcel"
    },
    "ClosedComment": "Production Release 1.7.7",
    "ClosedDate": "2012-05-20T03:07:52.42-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Hi,\n \nI was profiling phpexcel using xhprof. I tried implementing stringFromColumnIndex() using memoization and comparing the result time it's faster (31,454 ms -> 14,361 ms). Here's my implementation:\n \npublic static function stringFromColumnIndex($pColumnIndex = 0)\n\t{\n\t\tstatic $cache = array();\n\t\tif (isset($cache[$pColumnIndex])) {\n\t\t\treturn $cache[$pColumnIndex];\n\t\t}\n\t\twhile (1) {\n\t\t\t// Determine column string\n\t\t\tif ($pColumnIndex < 26) {\n\t\t\t\t$ret = chr(65 + $pColumnIndex);\n\t\t\t\tbreak;\n\t\t\t} elseif ($pColumnIndex < 702) {\n\t\t\t\t$ret = chr(64 + ($pColumnIndex / 26)).chr(65 + $pColumnIndex % 26);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$ret = chr(64 + (($pColumnIndex - 26) / 676)).chr(65 + ((($pColumnIndex - 26) % 676) / 26)).chr(65 + $pColumnIndex % 26);\n\t\t\tbreak;\n\t\t}\n\t\t$cache[$pColumnIndex] = $ret;\n\t\treturn $ret;\n\t}",
    "LastUpdatedDate": "2013-05-16T05:41:41.21-07:00",
    "PlannedForRelease": "PHPExcel 1.7.7 Production",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "PHPExcel",
    "ReportedDate": "2011-08-08T23:35:08.13-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "[Patch] faster stringFromColumnIndex()",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 16359
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "The cache adds an extra memory overhead: but unless you're working with a large number of columns, it's not significant.\r\nI didn't notice as much of a speed boost as your tests gave, but it's still enough to justify implementing.\r\n\r\nThe same technique can also be appliied to columnIndexFromString()",
      "PostedDate": "2011-12-02T05:38:09.61-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-12-02T05:51:39.1-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-05-19T17:26:20.047-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-05-20T03:07:52.42-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T19:02:17.417-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T05:41:41.21-07:00",
      "Id": -2147483648
    }
  ]
}