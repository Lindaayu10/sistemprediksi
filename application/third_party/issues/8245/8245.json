{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "PHPExcel_Writer_CSV",
      "DisplayName": "PHPExcel_Writer_CSV"
    },
    "ClosedComment": "Fixed in SVN",
    "ClosedDate": "2008-11-28T02:06:16.477-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "I've attached a test that writes UTF-8 characters to each of the writers PHPExcel implements. I've found that with the trunk version of PHPExcel, UTF-8 characters fail in CSV, HTML and PDF.\n \nI'll also attach a patch for both HTML (a simple meta tag) and CSV (an option to write a BOM). UTF-8 characters won't work in PDF files because FPDF doesn't support it.",
    "LastUpdatedDate": "2013-05-16T05:43:04.5-07:00",
    "PlannedForRelease": "PHPExcel 1.6.5 Production",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "PHPExcel",
    "ReportedDate": "2008-11-24T19:30:49.997-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "UTF-8 enhancements",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 8245
  },
  "FileAttachments": [
    {
      "FileId": 2326,
      "FileName": "utf8.php",
      "DownloadUrl": ".\\2326"
    },
    {
      "FileId": 2327,
      "FileName": "PHPExcel_UTF8_Fixes.patch",
      "DownloadUrl": ".\\2327"
    },
    {
      "FileId": 2335,
      "FileName": "utf8-tests-html-csv.zip",
      "DownloadUrl": ".\\2335"
    },
    {
      "FileId": 5054,
      "FileName": "Competency_Rating_by_Employee_Report_2010-10-25_11_12_46.csv",
      "DownloadUrl": ".\\5054"
    }
  ],
  "Comments": [
    {
      "Message": "Attaching a patch for CSV and HTML.\r\n\r\nFor CSV, I've made writing a BOM off by default (even though Office 2007 needs it) as CSV doesn't really say how it should be read. Feel free to comment on whether this should be enabled by default.",
      "PostedDate": "2008-11-24T19:40:03.34-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-11-24T19:40:03.95-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-11-24T19:41:09.043-08:00",
      "Id": -2147483648
    },
    {
      "Message": "HTML writer:\r\n\r\nYep, I agree with meta tag patch with some slight modification, perhaps. UTF-8 must be the preferred character set. However, it looks like HTML writer is trying to generate ISO-8859-1. (I see some utf8_decode() statements). Maarten, please correct me if I'm wrong. Indeed, if you have cell values with characters such as 'æøå' belonging to upper half of ISO-8859-1 you get broken HTML page if we apply the patch.\r\n\r\nI therefore suggest that we drop those utf8_encode statements while adding the utf-8 meta tag patch.\r\n\r\nAfter some further inspection of the HTML writer it looks like characters &<>\" are not encoded as &amp; &lt; &gt; &quot; after going through the writer.\r\nI suggest that we fix this using htmlspecialchars() at the same time. I can perhaps look at this afterwards.\r\n\r\n\r\nCSV writer:\r\n\r\nA quick search on Google for some guidelines on CSV file format yields no information other than that it seems there exists no CSV standard. ^_^\r\n\r\nTrying to export your generated xlsx file with Chinese kanji from MS Office 2007 gave useless results. Kanjis were replaced by question marks, i.e. information loss. This doesn't look like a good guideline for the behavior of CSV writer in PHPExcel.\r\n\r\nOpenOffice.org 3 gives you the option to select encoding prior to saving as CSV. One can also choose Unicode (UTF-8), but always without BOM, it seems. Therefore, I am slightly biased towards omitting the BOM by default. It seems plausible that the BOM may interfere with some non-BOM-aware parsers. Not sure, though.",
      "PostedDate": "2008-11-24T22:15:45.447-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Ups, correction:\r\n>>I therefore suggest that we drop those utf8_decode statements while adding the utf-8 meta tag patch.",
      "PostedDate": "2008-11-24T22:18:38.963-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Koyama, agree with this. Full UTF8 support would be great for PHPExcel! Do you see any time to carefully apply this patch + test script?",
      "PostedDate": "2008-11-25T03:10:03.087-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Patch applied with additional modifications to handle UTF-8. Also, characters & < > \" are now converted to &amp; &lt; &gt; &quot; in HTML writer. This is not just for cell values, but also for hyperlink URL, hyperlink title, title element (sheets meta description), and image filename.\r\n\r\nCSV UTF-8 BOM methods added: getUseBOM(), setUseBOM($pValue = false)\r\nMaarten, would this fit with your class method naming style? Can you rename if this is not the case?\r\n\r\nDemonstration showing that HTML writer, CSV reader/writer is now working correctly with UTF-8. We test with Rich-Text strings as well as plain text. We test with Unicode characters from: ASCII range including & \" < >, upper-range ISO-8859-1, plus some kanji.\r\n\r\n// read xlsx\r\n$reader = new PHPExcel_Reader_Excel2007();\r\n$PHPExcel = $reader->load('2007-read.xlsx');\r\n\r\n// write html\r\n$writer = new PHPExcel_Writer_HTML($PHPExcel);\r\n$writer->save('test.html');\r\n\r\n// write csv\r\n$writer = new PHPExcel_Writer_CSV($PHPExcel);\r\n$writer->save('test.csv');\r\n\r\n// read newly written csv\r\n$reader = new PHPExcel_Reader_CSV();\r\n$PHPExcel = $reader->load('test.csv');\r\n\r\n// write csv again\r\n$writer = new PHPExcel_Writer_CSV($PHPExcel);\r\n$writer->setUseBOM(true);\r\n$writer->save('test2.csv');\r\n\r\nResults are as expected except for a stripped backslash, but this comes from another issue as a result of CSV reader not supporting custom escape characters. Will need to deal with this later.\r\n\r\nNow PHPExcel_Reader_CSV can actually read csv files created by PHPExcel_Writer_CSV with full UTF-8 support :)\r\n\r\nStrangely, neither MS Office Excel 2007 nor OpenOffice.org 3 seem to automatically open CSV file as UTF-8 when BOM is included as could otherwise have been expected, but it could be my settings. The BOM export is working correctly, as can be seen if one opens test2.csv in BOM aware text editor such as Notepad++. It is correctly recognized as UTF-8.",
      "PostedDate": "2008-11-25T12:44:57.23-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-11-25T12:45:00.78-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-11-25T12:58:47.073-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Erik, patch seems OK. Naming is also OK. Will add a documentation item though.\r\n\r\nCan you also add a test to the /Tests directory?",
      "PostedDate": "2008-11-26T01:26:45.577-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Sounds good... Will create a couple of test scripts for the /Tests directory !",
      "PostedDate": "2008-11-26T21:32:24.917-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-11-28T02:06:16.477-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Uploaded test 26utf8.php which reads a sample xlsx file created in MS Office Excel 2007 containing various special characters + Rich-Text. It then writes to xlsx, xls, pdf, csv (with and without BOM). Results show that modifications are working. Maybe we need some more tests in the future to show how PHPExcel reads \"real\" Excel files created in MS Office Excel, so I thought I better make /Tests/templates/ folder. Hope it's ok.",
      "PostedDate": "2008-12-03T16:12:08.62-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Great idea to add that!",
      "PostedDate": "2008-12-03T22:43:08.87-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-10-25T04:13:56.26-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I have used the setUseBOM(true) but still the Arabic data are not showing correctly. Any idea what can resolve this issue on CSV? \r\nNote: I am not facing this issue when writting to XLS file and I am not loading the data from xls file.",
      "PostedDate": "2010-10-25T04:13:57.877-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T19:04:34.09-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T05:43:04.5-07:00",
      "Id": -2147483648
    }
  ]
}