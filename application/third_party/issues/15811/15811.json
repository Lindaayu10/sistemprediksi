{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Attached is a wrapper I wrote to facilitate the ease of object oriented programming on an Excel type file. I found it easier to call the wrapper class than doing direct PHPExcel manipulation.\n \nExample:\n$XlObj = new PHPExcelWrapper('filename.xls');\n$XlObj->WriteCell('A', 1, 'text);\n$XlObj->SetCellTextColor('A', 1, 'FF0000');\n$XlObj->AutoFit();\n$XlObj->Close(); // close calls Save()\n \nAbove, it just created an excel file with the name of 'filename.xls' and wrote 1 cell and set it's text color, then saved and closed the file. I found manipulating excel files this way made coding my pages a little more simplistic. There is more in this file (like easy auto conversions, among some other things and functions). I hope this wrapper proves useful. To use/test, simply drop it next to the PHPExcel.php and PHPExcel folder.\n \nNOTE: If you see bugs/issues/easier ways to do things/misspellings/all around issues, please let me know!",
    "LastUpdatedDate": "2013-08-05T11:13:30.32-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "PHPExcel",
    "ReportedDate": "2011-05-04T15:55:05.14-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "PHPExcel Wrapper for ease of OOP",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 15811
  },
  "FileAttachments": [
    {
      "FileId": 5631,
      "FileName": "wrapper.php",
      "DownloadUrl": ".\\5631"
    },
    {
      "FileId": 7092,
      "FileName": "phpexcel.zip",
      "DownloadUrl": ".\\7092"
    }
  ],
  "Comments": [
    {
      "Message": "\n```\n<?php\n$xlFactory = CYMAPGT_PHPExcelWrapperFactory::getInstance();\n$xlFactory::initialize();\n$xlFactory->setCacheMethod(\"MemoryGZip\");\n$wkbkObj = $xlFactory->openFile(\"Manjani\",\"Excel2007\");\n$wkbkObj->WriteCell(1,1,\"account_name\");\n$wkbkObj->WriteCell(1,2,\"statement_period\");\n$wkbkObj->WriteCell(1,3,\"starting_value\");\n$wkbkObj->WriteCell(1,4,\"deposit_and_withdrawals\");\n$wkbkObj->WriteCell(1,5,\"accrued_interest\");\n$fileProperties = array(\n\t\t\t\t  \"category\"       => \"setCategory\",\n\t\t\t\t  \"company\"        => \"setCompany\",\n\t\t\t\t  \"created\"        => \"setCreated\",\n\t\t\t\t  \"creator\"        => \"setCreator\",\n\t\t\t\t  \"description\"    => \"setDescription\",\n\t\t\t\t  \"keywords\"       => \"setKeywords\",\n\t\t\t\t  \"lastmodifiedby\" => \"setLastModifiedBy\",\n\t\t\t\t  \"manager\"        => \"setManager\",\n\t\t\t\t  \"modified\"       => \"setModified\",\n\t\t\t\t  \"subject\"        => \"setSubject\",\n\t\t\t\t  \"title\"          => \"setTitle\",\n\t\t\t\t  \"custom\"         => \"setCustomProperty\"\n\t\t\t   );\n$wkbkObj->setProperties($fileProperties);\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$wkbkObj->newSheet();\n$a = 4;\r\n\r\nwhile($a <= 7){\n    $sheetName = \"Worksheet \".$a;\n    $wkbkObj->removeSheet($sheetName,true);\n\t$a++;\n}\r\n\r\n//do a copy worksheet as method\n//$wkbkObj->getSheet(\"Worksheet\",true)->setTitle(\"RHOSSIS\");\n$rhossisCopy = $wkbkObj->getSheet(\"RHOSSIS\",true)\n                 ->copy();\n$rhossisCopy->setTitle(\"RHOSSISPOSSIS\");\n$wkbkObj->addSheet($rhossisCopy,false);\n$wkbkObj->Save();\n$xlFactory->convertFile(\"Manjani\");\n?>\r\n\r\n\n```",
      "PostedDate": "2013-08-02T03:01:55.963-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Hi,\r\n\r\nI accidentally submitted the above before I could introduce it.\r\n\r\nIncluded in phpexcel.zip is extension to your class Zeriph. It includes\r\n\r\n\n1) Factory Class - CYMAPGT_PHPExcelWrapperFactory.php\r\n\r\n    - create workbooks on the fly\n    - open existing workbooks and csv files for editing\n    - convert workbooks and csv using the AutoConvert() method\n    - set cache method\n    - reset cache\n    - set valuebinders\r\n\r\n2) Implementation Class - CYMAPGT_PHPExcelWrapperService.php\n    - Extends PHPExcelWrapper Class\n    - Wraps more functionality, explained by the self explanatory example\r\n\r\n__NB__ : For illustration purposes. Please critique. The test will only open files in the attached folder \"Files\" Save the whole bundle to the same directory as PHPExcel.php for testing purposes.\r\n\r\nRegards",
      "PostedDate": "2013-08-02T03:07:20.013-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Got a chance to look over everything and it looks solid, LOTS of extra's! I really like the extending to write to PDF.\r\n\r\nI'd be glad to test it all out and provide any additional info I might see.\r\n\r\n\nThanks!",
      "PostedDate": "2013-08-05T00:17:19.757-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Thanks Zeriph. Still a bit of kinks to work out but its getting there. ",
      "PostedDate": "2013-08-05T11:13:30.32-07:00",
      "Id": -2147483648
    }
  ]
}