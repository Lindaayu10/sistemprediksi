{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "PHPExcel",
      "DisplayName": "PHPExcel"
    },
    "ClosedComment": "Fixed in SVN",
    "ClosedDate": "2009-02-18T01:06:52.39-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "In PHPExcel it may not be so easy to insert a date if you have the date in a format like '2008-12-24'. This is often the case when you are retrieving values from MySQL.\n \nConsider if it would be possible to allow this, and that it results in a number being inserted:\n \n$cell->setValue('2008-12-24');\n \n$cell->setValue('2008-12-24 14:59:10');\n \n$cell->setValue('2008-12-24 14:59:10.9');\n \n \nPlain time values are also a bit difficult to insert. Consider if we could allow this:\n \n$cell->setValue('14:59');\n \n$cell->setValue('14:59:10');\n \n$cell->setValue('14:59:10.9');\n \nNote that it would still be necessary to apply a number format, so the dates and times look like real dates and time in Excel.\n \nHere is the vision: \n \nsetValue() is the lazy coder's method for inserting values. It takes care of converting dates and formulas when it recognizes that you are typing one. Just like how it works in Excel when you type in a field.\n \nsetValueExplicit() is the coder's tool when he needs 100% reliable method for setting values. There is no auto-recognition. This also makes it slightly faster than setValue() although you probably won't feel any difference.",
    "LastUpdatedDate": "2013-05-16T05:42:55.06-07:00",
    "PlannedForRelease": "PHPExcel 1.6.6 Production",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "PHPExcel",
    "ReportedDate": "2009-02-10T00:54:30.217-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Work item 9215 - Implement value binding architecture",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 1,
    "Id": 9215
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Excel does this itself, of course, automatically converting your date and time strings into their Excel numeric values, and setting the cell format mask.\r\nHowever, in Excel, you can force it to treat such values as strings by adding a leading single quote, and Excel won't perform this automatic conversion and formatting.\r\n\r\nPHPExcel doesn't have this option because it doesn't provide a GUI component; so are there any suggestions on how PHPExcel should determine whether $cell->setValue('14:59:10') should populate the cell with a string value, or automatically convert it to a time value.\r\n.",
      "PostedDate": "2009-02-10T01:02:30.977-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I am imagining that $cell->setValue('14:59:10') should populate the cell with a numeric time value, just like when you type such character sequence in MS Office Excel.\r\n\r\nI am also imagining that if you really want to insert the string '14:59:10' in the cell, then you would use\r\n$cell->setValueExplicit('14:59:10', PHPExcel_Cell_DataType::TYPE_STRING)",
      "PostedDate": "2009-02-10T01:13:06.5-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I might be more inclined to define a new method of $cell->setDate(), which would replicate Excel's behaviour, also setting the cell style to an appropriate default.\r\nThat way, we're not changing the behaviour of $cell->setValue() dependent on whether the value passed in conforms to a certain mask or not.",
      "PostedDate": "2009-02-10T01:30:53.86-08:00",
      "Id": -2147483648
    },
    {
      "Message": "This would be an option too, I guess. As long as we could have some easy way to insert a date like '2008-12-24' or time like '14:59' then I'm quite open about the exact implementation.\r\n\r\nIntroducing setDate(), or setTime() occurred to me, but I considered the fact that we are already allowing formulas to be inserted by typing an '=' in front of the formula. At that point one could have argued that we needed a method setFormula(). If setValue('2008-12-24') would insert a numeric value then we would have consistent philosophy: setValue(<something>) behaves the same way as Excel (featuring \"pattern-recognition\").\r\n\r\nThere is the good question whether a date-time number format should be applied at the same time. I don't really know what to think about this. There are different number formats to choose from, and we don't have a locale concept in PHPExcel. Perhaps it would be wise to wait-and-see. After all it is quite easy to apply a number format on the cell after inserting the numeric date value. But it can be quite difficult to convert from '2008-12-24' to Excel date, or even PHP-time. This was my primary concern.",
      "PostedDate": "2009-02-10T15:56:52.017-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Another option would be providing \"value providers\", say a class which accepts value X, worksheet Y and automatically does some things. By default, this provider would behave like current PHPExcel, but would allow you to extend this behaviour into something which accepts dates and sets format strings and stuff. Thoughts?",
      "PostedDate": "2009-02-16T04:12:06.437-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Such generic providers have benefits for entries other than dates, in that they could also be mimic Excel behavior applied to entries like 35%, where Excel stores the value as .35 and formats it to display with the percentage sign",
      "PostedDate": "2009-02-16T04:27:52.063-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Here's a rough draft:\r\n* PHPExcel_Cell::setValueBinder( PHPExcel_Cell_IValueBinder binder); // by default: PHPExcel_Cell_DefaultValueBinder\r\n* PHPExcel_Cell->setValue() uses PHPExcel_Cell::getValueBinder()\r\n\r\nPHPExcel_Cell_DefaultValueBinder will be a wrapper around several PHPExcel_Cell_IValueBinder. Let me explain:\r\n\r\nclass PHPExcel_Cell_DefaultValueBinder implements PHPExcel_Cell_IValueBinder {\r\n  function bindValue( cell, value ) {\r\n    // loop trouhg value binders and check if they return true\r\n  }\r\n\r\n  function registerValueBinder() {\r\n    // ...\r\n  }\r\n}\r\n\r\nclass PHPExcel_Cell_NumericValueBinder implements PHPExcel_Cell_IValueBinder {\r\n  function bindValue( cell, value ) {\r\n    // ...\r\n  }\r\n}\r\n\r\nclass PHPExcel_Cell_ExcelDateValueBinder implements PHPExcel_Cell_IValueBinder {\r\n  function bindValue( cell, value ) {\r\n    // ...\r\n  }\r\n}\r\n\r\nclass PHPExcel_Cell_PhpDateValueBinder implements PHPExcel_Cell_IValueBinder {\r\n  function bindValue( cell, value ) {\r\n    // ...\r\n  }\r\n}",
      "PostedDate": "2009-02-16T05:31:20.063-08:00",
      "Id": -2147483648
    },
    {
      "Message": "This indeed looks promising. Although I don't fully understand the details it looks like a good platform that would benefit further development of the classes.",
      "PostedDate": "2009-02-16T12:01:20.977-08:00",
      "Id": -2147483648
    },
    {
      "Message": "It can also be used to still support the php/unix date/time entry using setValue, automagically converting it to Excel date (see other issue)",
      "PostedDate": "2009-02-16T22:50:39.983-08:00",
      "Id": -2147483648
    },
    {
      "Message": "But setting a date value via PHP-time required that one at the same time applied a date-like number format. Otherwise you would just be inserting an ordinary integer. So I don't see how this binder can be used to support that. I'm sure there's something I have misunderstood...",
      "PostedDate": "2009-02-16T23:14:32.17-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-02-16T23:18:28.837-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I've added the value binder architecture. Currently implementing an AdvancedModelBinder which can be used as an example.\r\n\r\nNote that this \"Allow inserting dates using MySQL timestamp format (ISO 8601)\" feature will NOT be implemented. One will be able to create a custom value binder doing this.",
      "PostedDate": "2009-02-18T00:54:16.49-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-02-18T00:54:17.603-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-02-18T00:54:55.867-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Some documentation:\r\n\r\n4.3.6.\tUsing value binders to facilitate data entry\r\nInternally, PHPExcel uses a default PHPExcel_Cell_IValueBinder implementation (PHPExcel_Cell_DefaultValueBinder) to determine data types of entered data using a cell’s setValue() method.\r\n\r\nOptionally, the default behaviour of PHPExcel can be modified, allowing easier data entry. For example, a PHPExcel_Cell_AdvancedValueBinder class is present. It automatically converts percentages and dates entered as strings to the correct format, also setting the cell’s style information. The following example demonstrates how to set the value binder in PHPExcel:\r\n\r\n/** PHPExcel */\r\nrequire_once 'PHPExcel.php';\r\n\r\n/** PHPExcel_Cell_AdvancedValueBinder */\r\nrequire_once 'PHPExcel/Cell/AdvancedValueBinder.php';\r\n\r\n/** PHPExcel_IOFactory */\r\nrequire_once 'PHPExcel/IOFactory.php';\r\n\r\n// Set value binder\r\nPHPExcel_Cell::setValueBinder( new PHPExcel_Cell_AdvancedValueBinder() );\r\n\r\n// Create new PHPExcel object\r\n$objPHPExcel = new PHPExcel();\r\n\r\n// ...\r\n\r\n// Add some data, resembling some different data types\r\n$objPHPExcel->getActiveSheet()->setCellValue('A4', 'Percentage value:');\r\n$objPHPExcel->getActiveSheet()->setCellValue('B4', '10%');\r\n              // Converts to 0.1 and sets percentage cell style\r\n$objPHPExcel->getActiveSheet()->setCellValue('A5', 'Date/time value:');\r\n$objPHPExcel->getActiveSheet()->setCellValue('B5', '21 December 1983');\r\n              // Converts to date and sets date format cell style\r\n\r\n\tCreating your own value binder is easy\r\nWhen advanced value binding is requred, you can implement the PHPExcel_Cell_IValueBinder interface or extend the PHPExcel_Cell_DefaultValueBinder or PHPExcel_Cell_AdvancedValueBinder classes.\r\n",
      "PostedDate": "2009-02-18T01:06:21.857-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-02-18T01:06:52.39-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T19:04:22.113-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T05:42:55.06-07:00",
      "Id": -2147483648
    }
  ]
}