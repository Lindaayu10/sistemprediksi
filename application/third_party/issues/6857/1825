<?php

$Database = "mydatabase";
$UserName = "myusername";
$PassWord = "mypassword";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Class:	novExcel_Cell
//
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class novExcel_Cell {

	private $_type;					// inlineStr, s, shared
	private $_value;				//
	
	private $_row;
	private $_column;
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	__construct()
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __construct($ref)
	{
		$aCoordinates = $this->coordinateFromString($ref);
		$this->_column = $aCoordinates[0];
		$this->_row = $aCoordinates[1];
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	setValue
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function setValue($value , $type = "inline")
	{
		$this->_type = $type;
		$this->_value = $value;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getValue
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getValue()
	{
		return $this->_value;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	setValue
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getType()
	{
		return $this->_type;
	}
	
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getRow()
	//
	//
	//
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getRow()
	{
		return $this->_row;
	}

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getColumn()
	//
	//
	//
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getColumn()
	{
		return $this->_column;
	}

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	//
	//
	//
	//
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private function coordinateFromString($pCoordinateString = 'A1')
    {
    	if (eregi(':', $pCoordinateString)) {
    		throw new Exception('Cell coordinate string can not be a range of cells.');
    	} else if ($pCoordinateString == '') {
    		throw new Exception('Cell coordinate can not be zero-length string.');
    	} else {
	    	// Column
	    	$column = '';
	    	
	    	// Row
	    	$row = '';
	    	
	        // Convert a cell reference
	        if (preg_match("/([$]?[A-I]?[A-Z])([$]?\d+)/", $pCoordinateString, $matches)) {
	            list(, $column, $row) = $matches;
	        }
	    	
	    	// Return array
	    	return array($column, $row);
    	}
    }
    
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static function columnIndexFromString($pString = 'A')
    {
    	// Convert to uppercase
    	$pString = strtoupper($pString);
    	
    	// Convert column to integer
    	if (strlen($pString) == 1) {
    		$result = 0;
    		$result += (ord(substr($pString, 0, 1)) - 65);
    		$result += 1;
    		
    		return $result;
    	} else if (strlen($pString) == 2) {
    		$result = 0;
    		$result += ( (1 + (ord(substr($pString, 0, 1)) - 65) ) * 26);
    		$result += (ord(substr($pString, 1, 2)) - 65);
    		$result += 1;
    		
    		return $result;
    	} else if (strlen($pString) == 3) {
			$result = 0;
			$result += ( (1 + (ord(substr($pString, 0, 1)) - 65) ) * 26 * 26);
			$result += ( (1 + (ord(substr($pString, 1, 1)) - 65) ) * 26);
			$result += (ord(substr($pString, 2, 2)) - 65);
			$result += 1;
			
    		return $result;
    	} else {
    		throw new Exception("Column string index can not be " . (strlen($pString) != 0 ? "longer than 2 characters" : "empty") . ".");
    	}
    }
    
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public static function compareCells(novExcel_Cell $a, novExcel_Cell $b)
	{
		if ($a->_row < $b->_row) {
			return -1;
		} elseif ($a->_row > $b->_row) {
			return 1;
		} elseif (novExcel_Cell::columnIndexFromString($a->_column) < novExcel_Cell::columnIndexFromString($b->_column)) {
			return -1;
		} else {
			return 1;
		}
	}
	
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Class:	novExcel_Worksheet
//
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class novExcel_Worksheet {
	
	private $_name;
	private $_cells;
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	__construct()
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __construct()
	{
		$this->_cells = array();
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	setName()
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function setName($name)
	{
		$this->_name = $name;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getName()
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getName()
	{
		return $this->_name;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getCell()
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getCell($ref)
	{
		if(isset($this->_cells[$ref])) return $this->_cells[$ref];
		
		$newCell = new novExcel_Cell($ref);
		$this->_cells[$ref] = $newCell;
		
		return $newCell;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	_getAllCells()
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function _getAllCells()
	{
		return $this->_cells;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Class:	novExcel_Workbook
//
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class novExcel_Workbook {

	private $_sharedStrings;
	private $_sharedStringsReverse;
	
	private $_workSheetCollection;
	private $_activeSheetIndex;

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	__construct()
	//
	// Description:	Construct the workbook
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __construct()
	{
		$this->_sharedStrings =	array();
		$this->_sharedStringsReverse = array();
		$this->_workSheetCollection = array();
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	createSheet()
	//
	// Description:	Creates a new Worksheet
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createSheet()
	{
		$newSheet = new novExcel_Worksheet($this);
	
		$this->addSheet($newSheet);
		
		return $newSheet;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	addSheet()
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addSheet(novExcel_Worksheet $pSheet = null)
	{
		if($pSheet === null)
			throw new Exception("No sheet specified.");

		$this->_workSheetCollection[] = $pSheet;
	
		$this->setActiveSheetIndex($this->getSheetCount() - 1);
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getActiveSheet()
	//
	// Description:	Returns the active worksheet
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getActiveSheet()
	{
		return $this->_workSheetCollection[$this->_activeSheetIndex];
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getSheetCount()
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getSheetCount()
	{
		return count($this->_workSheetCollection);
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getSheet()
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getSheet($pIndex = 0)
	{
		if ($pIndex > ($this->getSheetCount() - 1))
			throw new Exception("Sheet index is out of bounds.");
		else
			return $this->_workSheetCollection[$pIndex];
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getActiveSheetIndex()
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getActiveSheetIndex()
	{
		return $this->_activeSheetIndex;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	setActiveSheetIndex()
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function setActiveSheetIndex($pIndex = 0)
	{
		if ($pIndex > ($this->getSheetCount() - 1))
			throw new Exception("Active sheet index is out of bounds.");
		else
			$this->_activeSheetIndex = $pIndex;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getSharedString()
	//
	// Description:	Adds the specified string to the shared strings list and returns the index for the shared string
	//
	// Parameters:	$string					String to add to the shared strings list and return the index for
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getSharedString($string)
	{
		if(isset($this->_sharedStringsReverse[$string]))
			return $this->_sharedStringsReverse[$string];

		$this->_sharedStrings[] = $string;

		end($this->_sharedStrings);
		$key = key($this->_sharedStrings);
		$this->_sharedStringsReverse[$string] = $key;
		
		return $key;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	_getAllSharedStrings()
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function _getAllSharedStrings()
	{
		return $this->_sharedStrings;
	}

}


	function ControlCharacterPHP2OOXML($value = '') {
		for ($i = 0; $i <= 19; $i++) {
			if ($i != 9 && $i != 10 && $i != 13) {
				$value = str_replace(chr($i), '_x' . sprintf('%04s' , strtoupper(dechex($i))) . '_', $value);
			}
		}

		return $value;
	}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Class:	novExcel_Worksheet
//
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class novExcel_Writer_XLS2007 {

	private $_workbook;
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	__construct()
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	function __construct($workbook)
	{
		$this->setWorkbook($workbook);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	Save()
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	function save($pFilename, $callback)
	{
		// Create new ZIP file and open it for writing
		$objZip = new ZipArchive();

		// Try opening the ZIP file
		if ($objZip->open($pFilename, ZIPARCHIVE::OVERWRITE) !== true) 
		{
			if ($objZip->open($pFilename, ZIPARCHIVE::CREATE) !== true) 
			{
				throw new Exception("Could not open " . $pFilename . " for writing.");
			}
		}

		// Save _rels\.rels
		$objZip->addFromString("_rels/.rels", $this->getRels());

		// Save xl\_rels\workbook.xml.rel
		$objZip->addFromString("xl/_rels/workbook.xml.rels", $this->getWorkbookXmlRels());

		// Save xl\worksheets\...xml

		$sheets = $this->getWorksheetXml($callback);
		for($sheetIndex = 0; $sheetIndex < $this->getWorkbook()->getSheetCount(); $sheetIndex++)
			$objZip->addFromString("xl/worksheets/sheet".($sheetIndex + 1).".xml", $sheets[$sheetIndex]);

		// Save xl\sharedStrings.xml
		$objZip->addFromString("xl/sharedStrings.xml", $this->getSharedStringsXml());

		// Save xl\workbook.xml
		$objZip->addFromString("xl/workbook.xml", $this->getWorkbookXml());
		
		// Save ContentTypes
		$objZip->addFromString("[Content_Types].xml", $this->getContentTypesXml());

		// Close file
		if ($objZip->close() === false) 
		{
			throw new Exception("Could not close zip file $pFilename.");
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getWorkbook()
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getWorkbook()
	{
		return $this->_workbook;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getWorkbook()
	//
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function setWorkbook($workbook)
	{
		$this->_workbook = $workbook;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getRels()
	//
	// Description:	Creates file contents for _rels/.rels
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private function getRels()
	{
		return 
		"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n" .
		" <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n" .
		" <Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/>\n".
		"</Relationships>\n";
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getWorkbookXmlRels()
	//
	// Description:	Creates file contents for xl/_rels/workbook.xml.rels
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private function getWorkbookXmlRels()
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Create output
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		$sheetList = "";
		$numWorkSheets = $this->getWorkbook()->getSheetCount();
		for($index = 0; $index < $numWorkSheets; $index++)
			$sheetList .= "  <Relationship Id=\"sheet".($index + 1)."\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet".($index + 1).".xml\" />\n"; 
			
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Consolidate
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		return 
		"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>" .
		" <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">" .
		$sheetList .
		"  <Relationship Id=\"sharedStrings\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\"/>\n" .
	 	" </Relationships>\n";
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getWorkbookXmlRels()
	//
	// Description:	Creates file contents for xl/worksheets/sheetxxx.xml
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private function getWorksheetXml($callback)
	{
		$workbook = $this->getWorkbook();
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Create content for each sheet
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		$sheets = array();
		for($sheetIndex = 0; $sheetIndex < $workbook->getSheetCount(); $sheetIndex++)
		{
			$sheets[$sheetIndex] = array();
			$sheets[$sheetIndex]["Headers"] = "";
			$sheets[$sheetIndex]["Cells"] = "";
		}

		for($sheetIndex = 0; $sheetIndex < $workbook->getSheetCount(); $sheetIndex++)
		{
			$cells = $this->getWorkbook()->getSheet($sheetIndex)->_getAllCells();

			uasort($cells, array('novExcel_Cell', 'compareCells'));

			$headersList = "";
			$currentRow = -1;
			foreach($cells as $ref => $cell)
			{
				if($currentRow != $cell->getRow())
				{
					if($currentRow != -1) $headersList .= "   </row>\n";
					$currentRow = $cell->getRow();
	
					$headersList .= "   <row r=\"$currentRow\">\n";
				}
				
				switch($cell->getType())
				{
					case "inlineStr":
						$headersList .=
						"    <c t=\"".$cell->getType()."\" r=\"".$cell->getColumn().$cell->getRow()."\">\n" . 
						"     <is>\n" .
						"      <t>".$cell->getValue()."</t>\n" .
						"     </is>\n" .
						"    </c>\n";
						break;				
					
					case "s":
						$headersList .=
						"    <c t=\"".$cell->getType()."\" r=\"".$cell->getColumn().$cell->getRow()."\">\n" . 
						"     <v>".$cell->getValue()."</v>\n" .
						"    </c>\n";
						break;
				}
				
			}
			if($currentRow != -1)
				$headersList .= "   </row>\n";
				
			$sheets[$sheetIndex]["Headers"] = $headersList;
		}

		while(TRUE)
		{
			$currentRow++;

			if(!onTraverse()) break;

			for($sheetIndex = 0; $sheetIndex < $workbook->getSheetCount(); $sheetIndex++)
			{
				$result = $callback($sheetIndex);
			
				$cellsList = "   <row r=\"$currentRow\">\n";			
				foreach($result as $ref => $value)
				{
				
					$cellsList .=
					"    <c t=\"s\" r=\"$ref$currentRow\">\n" . 
					"     <v>".$this->getWorkbook()->getSharedString($value["Value"])."</v>\n" .
					"    </c>\n";
				
				}
				$cellsList .= "   </row>\n";

				$sheets[$sheetIndex]["Cells"] .= $cellsList;			
			}
		}

		$sheetsOut = array();
		for($sheetIndex = 0; $sheetIndex < $workbook->getSheetCount(); $sheetIndex++)
		{
			$sheetsOut[$sheetIndex] =
			"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n" .
			" <worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\">\n" .
			"  <sheetData>\n" .
			$sheets[$sheetIndex]["Headers"].
			$sheets[$sheetIndex]["Cells"].
			"  </sheetData>\n" .
			" </worksheet>\n";
		}

		return $sheetsOut;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getSharedStrings()
	//
	// Description:	Creates file contents for xl/sharedStrings.xml
	//
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private function getSharedStringsXml()
	{
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Count number of cells with shared string contents
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		$count = 0;
		$sharedStrings = $this->getWorkbook()->_getAllSharedStrings();

		$numWorkSheets = $this->getWorkbook()->getSheetCount();
		for($index = 0; $index < $numWorkSheets; $index++)
		{
			$sheet = $this->getWorkbook()->getSheet($index);
			foreach($sheet->_getAllCells() as $cell)
			{
				if($cell->getType() == "s")
					$count ++;
			}
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Create output
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		$sharedStringsSection = "";
		foreach($sharedStrings as $Value)
		{
			$sharedStringsSection .= 
			"  <si>\n" . 
			"   <t>".str_replace("&", "", $Value)."</t>\n" .
			"  </si>\n";
		}
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Consolidate
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		return
		"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n" .
		" <sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"$count\" uniqueCount=\"".count($sharedStrings)."\">\n" .
		$sharedStringsSection .
		" </sst>\n";
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getWorkbookXml()
	//
	// Description:	Creates file contents for xl/workbook.xml
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private function getWorkbookXml()
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Create output
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		$sheetList = "";
		$numWorkSheets = $this->getWorkbook()->getSheetCount();
		for($index = 0; $index < $numWorkSheets; $index++)
			$sheetList .= "   <sheet name=\"".$this->getWorkbook()->getSheet($index)->getName()."\" sheetId=\"".($index + 1)."\" r:id=\"sheet".($index + 1)."\"/>\n";

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Consolidate
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		return
		"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n" .
		" <workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\">\n" .
		"  <sheets>\n" . 
		$sheetList .
		"  </sheets>\n" .
		" </workbook>\n";
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Function:	getContentTypesXml()
	//
	// Description:	Creates file contents for [Content_Types].xml
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private function getContentTypesXml()
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Create output
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		$sheetList = "";
		$numWorkSheets = $this->getWorkbook()->getSheetCount();
		for($index = 0; $index < $numWorkSheets; $index++)
			$sheetList .= "   <Override PartName=\"/xl/worksheets/sheet".($index + 1).".xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" />\n";
	
		return
		"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n" .
		" <Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">\n" .
		"  <Default Extension=\"bin\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings\" />\n" .
		"  <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" />\n" .
		"  <Default Extension=\"xml\" ContentType=\"application/xml\" />\n" .
		$sheetList .
		"  <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" />\n" .
		"  <Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>\n" .
		" </Types>\n";
	}
	
}

$workbook = new novExcel_Workbook();
$sheet1 = $workbook->createSheet();
$sheet1->setName("Lijst1");
$sheet1->getCell("A1")->setValue($workbook->getSharedString("Voornaam"), "s");
$sheet1->getCell("B1")->setValue($workbook->getSharedString("Achternaam"), "s");
$sheet1->getCell("C1")->setValue($workbook->getSharedString("Personeelsnummer"), "s");
$sheet1->getCell("D1")->setValue($workbook->getSharedString("EMail"), "s");

$sheet2 = $workbook->createSheet();
$sheet2->setName("Lijst2");
$sheet2->getCell("B1")->setValue($workbook->getSharedString("Voornaam"), "s");
$sheet2->getCell("C1")->setValue($workbook->getSharedString("Achternaam"), "s");
$sheet2->getCell("A1")->setValue($workbook->getSharedString("Pandcode"), "s");
$sheet2->getCell("D1")->setValue($workbook->getSharedString("MobielZakelijk"), "s");

$DB = mysql_connect("localhost", $UserName, $PassWord);
mysql_select_db($Database, $DB);
$res = mysql_query("SELECT Pandcode, Voornaam, Achternaam, Personeelsnummer, Email, MobielZakelijk FROM lijst");
$row = null;

$writer = new novExcel_Writer_XLS2007($workbook);

$writer->save("myphpexcel.xlsx", "onCreateData");

echo date('H:i:s') . " Peak memory usage: " . (memory_get_peak_usage(true) / 1024 / 1024) . " MB\r\n";

function onTraverse()
{
	global $res, $row;
	return (($row = mysql_fetch_array($res)) !== FALSE);
}

function onCreateData($sheetIndex)
{
	global $row;
	$result = array();

	switch($sheetIndex)
	{
		case 0:
			$result["A"]["Value"] = $row["Voornaam"];
			$result["B"]["Value"] = $row["Achternaam"];
			$result["C"]["Value"] = $row["Personeelsnummer"];
			$result["D"]["Value"] = $row["Email"];
			$result["E"]["Value"] = $row["Voornaam"];
			$result["F"]["Value"] = $row["Achternaam"];
			$result["G"]["Value"] = $row["Personeelsnummer"];
			$result["H"]["Value"] = $row["Email"];
			$result["I"]["Value"] = $row["Voornaam"];
			$result["J"]["Value"] = $row["Achternaam"];
			$result["K"]["Value"] = $row["Personeelsnummer"];
			$result["L"]["Value"] = $row["Email"];
			$result["M"]["Value"] = $row["Voornaam"];
			$result["N"]["Value"] = $row["Achternaam"];
			$result["O"]["Value"] = $row["Personeelsnummer"];
			$result["P"]["Value"] = $row["Email"];
			$result["Q"]["Value"] = $row["Voornaam"];
			$result["R"]["Value"] = $row["Achternaam"];
			$result["S"]["Value"] = $row["Personeelsnummer"];
			$result["T"]["Value"] = $row["Email"];
			$result["U"]["Value"] = $row["Voornaam"];
			$result["V"]["Value"] = $row["Achternaam"];
			$result["W"]["Value"] = $row["Personeelsnummer"];
			$result["X"]["Value"] = $row["Email"];
			$result["Y"]["Value"] = $row["Voornaam"];
			$result["Z"]["Value"] = $row["Achternaam"];
			$result["AA"]["Value"] = $row["Personeelsnummer"];
			$result["AB"]["Value"] = $row["Email"];
			break;
		
		case 1:
			$result["A"]["Value"] = $row["Voornaam"];
			$result["B"]["Value"] = $row["Achternaam"];
			$result["C"]["Value"] = $row["Pandcode"];
			$result["D"]["Value"] = $row["MobielZakelijk"];
			$result["E"]["Value"] = $row["Voornaam"];
			$result["F"]["Value"] = $row["Achternaam"];
			$result["G"]["Value"] = $row["Pandcode"];
			$result["H"]["Value"] = $row["MobielZakelijk"];
			$result["I"]["Value"] = $row["Voornaam"];
			$result["J"]["Value"] = $row["Achternaam"];
			$result["K"]["Value"] = $row["Pandcode"];
			$result["L"]["Value"] = $row["MobielZakelijk"];
			$result["M"]["Value"] = $row["Voornaam"];
			$result["N"]["Value"] = $row["Achternaam"];
			$result["O"]["Value"] = $row["Pandcode"];
			$result["P"]["Value"] = $row["MobielZakelijk"];
			$result["Q"]["Value"] = $row["Voornaam"];
			$result["R"]["Value"] = $row["Achternaam"];
			$result["S"]["Value"] = $row["Pandcode"];
			$result["T"]["Value"] = $row["MobielZakelijk"];
			$result["U"]["Value"] = $row["Voornaam"];
			$result["V"]["Value"] = $row["Achternaam"];
			$result["W"]["Value"] = $row["Pandcode"];
			$result["X"]["Value"] = $row["MobielZakelijk"];
			$result["Y"]["Value"] = $row["Voornaam"];
			$result["Z"]["Value"] = $row["Achternaam"];
			$result["AA"]["Value"] = $row["Pandcode"];
			$result["AB"]["Value"] = $row["MobielZakelijk"];
			break;
	
	}
	
	
	return $result;
}


?>

