Index: PHPExcel/Reader/CSV.php
===================================================================
--- PHPExcel/Reader/CSV.php
+++ PHPExcel/Reader/CSV.php
@@ -114,6 +114,41 @@
 	}
 	
 	/**
+	 * Open file and skip BOM if present.
+	 *
+	 * @param string $pFilename File to open
+	 * @throws Exception
+	 * @return resource File handle
+	 */
+	private function openFile($pFilename)
+	{
+		// Check if file exists
+		if (!file_exists($pFilename)) {
+			throw new Exception("Could not open " . $pFilename . " for reading! File does not exist.");
+		}
+
+		// Open file
+		$fileHandle = fopen($pFilename, 'r');
+		if ($fileHandle === false) {
+			throw new Exception("Could not open file $pFilename for reading.");
+		}
+
+		// Skip BOM, if any
+		switch ($this->_inputEncoding) {
+			case 'UTF-8':
+				fgets($fileHandle, 4) == "\xEF\xBB\xBF" ?
+					fseek($fileHandle, 3) : fseek($fileHandle, 0);
+				break;
+
+			default:
+				break;
+		}
+
+		return $fileHandle;
+
+	}
+
+	/**
 	 * Can the current PHPExcel_Reader_IReader read the file?
 	 *
 	 * @param 	string 		$pFileName
@@ -121,16 +156,47 @@
 	 */	
 	public function canRead($pFilename) 
 	{
-		// Check if file exists
-		if (!file_exists($pFilename)) {
-			throw new Exception("Could not open " . $pFilename . " for reading! File does not exist.");
-		}
 		
-		// Read sample data (first 2 KB will do)
-		$fh = fopen($pFilename, 'r');
-		$data = fread($fh, 2048);
-		fclose($fh);
+		// Open file and skip BOM if present
+		$fileHandle = $this->openFile($pFilename);
+	
+		$rowLen = null;
+		$result = true;
+		for ($currentRow = 0; $currentRow < 5; $currentRow++) {
+			$rowData = fgetcsv($fileHandle, 0, $this->_delimiter, $this->_enclosure);
+			if ($rowData !== false) {
+				if ($currentRow == 0) { // Set rowLen on first row
+					$rowLen = count($rowData);
+				} else if ($rowLen != count($rowData)) { // If rowLen differs, bail out
+					$result = false;
+					break;
+				}
+			} else { // False result can mean end of file and invalid csv
+				if (!feof($fileHandle)) {
+					$result = false;
+					break;
+				}
+			}
+		}
+
+		fclose($fileHandle);
+		return $result;
+	}
+
+	/**
+	 * Detects the most probable delimiter of pFilename
+	 *
+	 * @param string $pFilename CSV file to detect
+	 * @return boolean True if detection succeded
+	 */
+	public function detectDelimiter($pFilename)
+	{
+		// Open file and skip BOM if present
+		$fileHandle = $this->openFile($pFilename);
 		
+		$data = fread($fileHandle, 8192);
+		fclose($fileHandle);
+
 		// Count delimiters in file
 		$delimiterCount = array(
 			',' => substr_count($data, ','),
@@ -139,19 +205,16 @@
 			'|' => substr_count($data, '|')
 		);
 		arsort($delimiterCount, SORT_NUMERIC);
-		$probableDelimiter = array_shift(array_flip($delimiterCount));
 		
-		// Analyze first few lines and check if field count is equal
-		$lines = explode("\n", $data);
-		$fieldCount = null;
-		for ($i = 0; $i < 5 && $i < count($lines); $i++) {
-			if (is_null($fieldCount))
-				$fieldCount = substr_count($lines[$i], $probableDelimiter);
-			if ($fieldCount != substr_count($lines[$i], $probableDelimiter))
-				return false;
+		$oldDelimiter = $this->_delimiter;
+		foreach (array_keys($delimiterCount) as $delimiterCandidate) {
+			$this->_delimiter = $delimiterCandidate;
+			if ($this->canRead($pFilename)) {
+				return true;
+			}
 		}
-		
-		return true;
+		$this->_delimiter = $oldDelimiter;
+		return false;
 	}
 
 	/**
@@ -216,34 +279,15 @@
 	 */
 	public function loadIntoExisting($pFilename, PHPExcel $objPHPExcel)
 	{
-		// Check if file exists
-		if (!file_exists($pFilename)) {
-			throw new Exception("Could not open " . $pFilename . " for reading! File does not exist.");
-		}
-
+		// Open file and skip BOM if present
+		$fileHandle = $this->openFile($pFilename);
+		
 		// Create new PHPExcel
 		while ($objPHPExcel->getSheetCount() <= $this->_sheetIndex) {
 			$objPHPExcel->createSheet();
 		}
 		$objPHPExcel->setActiveSheetIndex( $this->_sheetIndex );
 
-		// Open file
-		$fileHandle = fopen($pFilename, 'r');
-		if ($fileHandle === false) {
-			throw new Exception("Could not open file $pFilename for reading.");
-		}
-
-		// Skip BOM, if any
-		switch ($this->_inputEncoding) {
-			case 'UTF-8':
-				fgets($fileHandle, 4) == "\xEF\xBB\xBF" ?
-					fseek($fileHandle, 3) : fseek($fileHandle, 0);
-				break;
-
-			default:
-				break;
-		}
-
 		// Loop through file
 		$currentRow = 0;
 		$rowData = array();
