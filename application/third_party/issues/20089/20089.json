{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Hi guys,\n\nI have a .xlsx file with 6 sheet that I load with \n\n```\n$objPHPExcel = PHPExcel_IOFactory::load('./FINAL SEB.xlsx');\n```\n\nWhen I want to get a calculated value from a cell I get a wrong value.\nThis cell have a formula\n\n```\n(IF(COMPARATEUR!B6=20,EMPRUNT20ANS!F32,IF(COMPARATEUR!B6=25,EMPRUNT25ANS!F37,IF(COMPARATEUR!B6=15,EMPRUNT15ANS!F27,\"Erreur années\"))))-B35\n```\n\nIn my PHP code I do\n\n```\necho $worksheet->getCell('B38')->getCalculatedValue().'<br />';\n```\n\nWhen I debbuging I obtain\n\n```\nFormula Value is=(IF(COMPARATEUR!B6=20,EMPRUNT20ANS!F32,IF(COMPARATEUR!B6=25,EMPRUNTANS!F37,IF(COMPARATEUR!B6=15,EMPRUNT15ANS!F27,\"Erreur années\"))))-B35\nExpected Value is 59045.580877165\nParser Stack :-\narray (size=21)\n  0 => \n    array (size=3)\n      'type' => string 'Cell Reference' (length=14)\n      'value' => string 'COMPARATEUR!B6' (length=14)\n      'reference' => string 'COMPARATEUR!B6' (length=14)\n  1 => \n    array (size=3)\n      'type' => string 'Value' (length=5)\n      'value' => int 20\n      'reference' => null\n  2 => \n    array (size=3)\n      'type' => string 'Binary Operator' (length=15)\n      'value' => string '=' (length=1)\n      'reference' => null\n  3 => \n    array (size=3)\n      'type' => string 'Cell Reference' (length=14)\n      'value' => string 'EMPRUNT20ANS!F32' (length=16)\n      'reference' => string 'EMPRUNT20ANS!F32' (length=16)\n  4 => \n    array (size=3)\n      'type' => string 'Cell Reference' (length=14)\n      'value' => string 'COMPARATEUR!B6' (length=14)\n      'reference' => string 'COMPARATEUR!B6' (length=14)\n  5 => \n    array (size=3)\n      'type' => string 'Value' (length=5)\n      'value' => int 25\n      'reference' => null\n  6 => \n    array (size=3)\n      'type' => string 'Binary Operator' (length=15)\n      'value' => string '=' (length=1)\n      'reference' => null\n  7 => \n    array (size=3)\n      'type' => string 'Cell Reference' (length=14)\n      'value' => string 'EMPRUNTANS!F37' (length=14)\n      'reference' => string 'EMPRUNTANS!F37' (length=14)\n  8 => \n    array (size=3)\n      'type' => string 'Cell Reference' (length=14)\n      'value' => string 'COMPARATEUR!B6' (length=14)\n      'reference' => string 'COMPARATEUR!B6' (length=14)\n  9 => \n    array (size=3)\n      'type' => string 'Value' (length=5)\n      'value' => int 15\n      'reference' => null\n  10 => \n    array (size=3)\n      'type' => string 'Binary Operator' (length=15)\n      'value' => string '=' (length=1)\n      'reference' => null\n  11 => \n    array (size=3)\n      'type' => string 'Cell Reference' (length=14)\n      'value' => string 'EMPRUNT15ANS!F27' (length=16)\n      'reference' => string 'EMPRUNT15ANS!F27' (length=16)\n  12 => \n    array (size=3)\n      'type' => string 'Value' (length=5)\n      'value' => string '\"Erreur années\"' (length=16)\n      'reference' => null\n  13 => \n    array (size=3)\n      'type' => string 'Operand Count for Function IF()' (length=31)\n      'value' => int 3\n      'reference' => null\n  14 => \n    array (size=3)\n      'type' => string 'Function' (length=8)\n      'value' => string 'IF(' (length=3)\n      'reference' => null\n  15 => \n    array (size=3)\n      'type' => string 'Operand Count for Function IF()' (length=31)\n      'value' => int 3\n      'reference' => null\n  16 => \n    array (size=3)\n      'type' => string 'Function' (length=8)\n      'value' => string 'IF(' (length=3)\n      'reference' => null\n  17 => \n    array (size=3)\n      'type' => string 'Operand Count for Function IF()' (length=31)\n      'value' => int 3\n      'reference' => null\n  18 => \n    array (size=3)\n      'type' => string 'Function' (length=8)\n      'value' => string 'IF(' (length=3)\n      'reference' => null\n  19 => \n    array (size=3)\n      'type' => string 'Cell Reference' (length=14)\n      'value' => string 'B35' (length=3)\n      'reference' => string 'B35' (length=3)\n  20 => \n    array (size=3)\n      'type' => string 'Binary Operator' (length=15)\n      'value' => string '-' (length=1)\n      'reference' => null\nCalculated Value is 9860500\nEvaluation Log:\nnull\n```\n\nCan you help me please ?\n\nP.S. Sorry for my english.",
    "LastUpdatedDate": "2013-08-19T03:36:12.157-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "PHPExcel",
    "ReportedDate": "2013-08-19T02:16:39.75-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "GetCalculatedValue wrong value",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 20089
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "If you're using the standardised testFormula() debugging code that I've posted before to dump the trace you've shown, then this has changed in version 1.7.9 when the calculation engine was modified from a singleton to a multiton pattern to avoid problems when working with more than one workbook file at a time. An updated version of that code is shown below:\r\n\r\n```php\nfunction testFormula($sheet,$cell) {\n    $formulaValue = $sheet->getCell($cell)->getValue();\n    echo 'Formula Value is' , $formulaValue , PHP_EOL;\n    $expectedValue = $sheet->getCell($cell)->getOldCalculatedValue();\n    echo 'Expected Value is '  , ((!is_null($expectedValue)) ? $expectedValue : 'UNKNOWN') , PHP_EOL;\r\n\r\n\n    $calculate = false;\n    try {\n        $tokens = PHPExcel_Calculation::getInstance(\n            $sheet->getParent()\n        )->parseFormula(\n            $formulaValue,\n            $sheet->getCell($cell)\n        );\n        echo 'Parser Stack :-' , PHP_EOL;\n        print_r($tokens);\n        echo PHP_EOL;\n        $calculate = true;\n    } catch (Exception $e) {\n        echo 'PARSER ERROR: ' , $e->getMessage() , PHP_EOL;\r\n\r\n        echo 'Parser Stack :-' , PHP_EOL;\n        print_r($tokens);\n        echo PHP_EOL;\n    }\r\n\r\n    if ($calculate) {\n        PHPExcel_Calculation::getInstance(\n            $sheet->getParent()\n        )->getDebugLog()\n        ->setWriteDebugLog(true);\n        try {\n            $cellValue = $sheet->getCell($cell)->getCalculatedValue();\n            echo 'Calculated Value is ' , $cellValue , PHP_EOL;\r\n\r\n            echo 'Evaluation Log:' , PHP_EOL;\n            print_r(\n                PHPExcel_Calculation::getInstance(\n                    $sheet->getParent()\n                )->getDebugLog()\n                ->getLog()\n            );\n            echo PHP_EOL;\n        } catch (Exception $e) {\n            echo 'CALCULATION ENGINE ERROR: ' , $e->getMessage() , PHP_EOL;\r\n\r\n            echo 'Evaluation Log:' , PHP_EOL;\n            print_r(\n                PHPExcel_Calculation::getInstance(\n                    $sheet->getParent()\n                )->debugLog\n                ->getLog()\n            );\n            echo PHP_EOL;\n        }\n    }\n}\r\n\r\n\n$sheet = $objPHPExcel->getActiveSheet();\ntestFormula($sheet,'A1');\n```\r\n\r\nPlease try using the above to help diagnose the problem",
      "PostedDate": "2013-08-19T03:36:12.157-07:00",
      "Id": -2147483648
    }
  ]
}