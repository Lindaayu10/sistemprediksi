<?php

//
// Alternative 2:
//
// Similar to Alternative 1. The properties of PHPExcel_Style are implemented with a collection of other classes, generally
// dubbed PHPExcel_Style_SubStyle. Alternative 2 is to create those property objects on the fly. This would save memory
// for as far as the default style does not have any properties set. Because if those properties would be set, the clone
// instruction in PHPExcel_Worksheet::getStyle() would copy those properties too, thereby eliminating the effort here. Given
// that the default style is empty this appears to be a viable option.
//
// Result: Reduction in memory consumption
//
// Consequences:
//
//   1. All places where PHPExcel_Style::$_font, $_numberformat, $_fill or any of the other properties are accessed code
//      must be aware that not all styles may have an entry
//      in $_styles.
//
//		PHPExcel_Style::__construct
//		--> Assignement only.
//
//		*	1. Delete the lines $this->_fill = new PHPExcel_Style_SubStyle(); It creates a default that may also be
//			   created on the fly later.
//
//		PHPExcel_Worksheet::getXXX() (XXX being Font, NumberFormat, etc.)
//		--> Public function.
//
//		*	1. Return the stored object or return the default object.
//
//		*	2. Implement code to make sure a change in any of the properties of the returned PHPExcel_Style_SubStyle object results
//			   in actually assigning the result to the property in the PHPExcel_Style object. This includes code that ensures
//				integrity if the caller calls getXXX() twice.
//
// Code below displays the impact of items marked * only for memory consumption demonstration purposes.
//

class PHPExcel_Style_SubStyle {							// This is a generalization for PHPExcel_Style_Fill, NumberFormat, etc.
    public static $cntObjects = 0;						// This for tracking purposes

    private $_property;									// This could be any of the properties of these classes.
    
    private $_parent;

	function __construct($parent = null) {
		PHPExcel_Style_SubStyle::$cntObjects++;
		$this->_property = 0;
		$this->_parent = $parent;
	}

    public function setProperty($value) {
    
    	// If a parent relationship exists, then the PHPExcel_Style object that this Substyle belongs to is not the real
    	// PHPExcel_Style_SubStyle object. That's because it was defaulted and therefore not yet set to memory.
    	//
    	// If the parent already has an in-memory object, set the property of that in-memory object too, to synchronise.
    	// Also, if the parent has no in-memory object yet, make this the in memory object
    	
		if(isset($this->_parent)) {
			$parent = $this->_parent;
			
			if(!$parent->isPresent()) {								// If parent does not have an in-memory object
				$parent->setSubStyle($this);						// Offer myself. Parent will reference me from now on.
				$this->_parent = null;								// so disable my reference to him to break the circle.
			}

			$parent->getSubStyle()->_property = $value;				// May actually be myself
		
		}
		else
	    	$this->_property = $value;								// I am the actual in-memory object. Just set and leave.
   
    }

    public function getProperty() {
		
    	// If a parent relationship exists, then the PHPExcel_Style object that this Substyle belongs to is not the real
    	// PHPExcel_Style_SubStyle object. That's because it was defaulted and therefore not yet set to memory.
    	//
    	// If the parent already has an in-memory object, then clearly in between acquiring this SubStyle (through 
    	// PHPExcel_Style::getFont() or any of the others) and the user calling this getProperty() method he must also
    	// have called setProperty somehow. Possibly even through another SubStyle object as he may have aquired more than
    	// one reference to this SubStyle.
    	//
    	//

		if(isset($this->_parent)) {
			$parent = $this->_parent;

			if(!$parent->isPresent()) {								// If parent does not have an in-memory object
				return $this->_property;							// then we continue defaulting.
			}
			else
				return $parent->getSubStyle()->_property;			// Otherwise get it from the in-memory object.
		}
		else
    		return $this->_property;								// I am the actual in-memory object. Just get and leave.
		
    	
    }

	public function __clone() {
		self::$cntObjects++;

		$vars = get_object_vars($this);
		foreach ($vars as $key => $value) {
			if (is_object($value)) {
				$this->$key = clone $value;
			} else {
				$this->$key = $value;
			}
		}
	}
}

class PHPExcel_Style {
    public static $cntObjects = 0;						// This for tracking purposes

	private $_font;
	private $_fill;
	private $_borders;
	private $_alignment;
	private $_numberFormat;
	private $_protection;

	public function __construct() {
		PHPExcel_Style::$cntObjects++;
	}

	public function getFont() {
		// If assigned return the object. Similar to current PHPExcel implementation.
		if(isset($this->_font))
			return $this->_font;
		
		// Alternatively create a PHPExcel_Style_SubStyle to return so as to comply with the API. However, do not store it.
		//
		// If the caller destroys it's own reference to this new object then this new object will be deleted from memory
		// (GC friendly).
		//
		// If the caller does nothing with the returned object then subsequent calls to this method yield the same result.
		// Thus writer classes and other pieces of code are ok with this solution.
		//
		// If the caller DOES do something with the returned object, then we need to figure out a way to hook up the result
		// to this PHPExcel_Style object. This file does not demonstrate this yet so as to demonstrate the impact on memory
		// of this solution.
		//

		// Now, also create a relationship between the substyle and the style, so that the style knows that it is an abstract and not
		// the real thing. Do this by creating a parent child relationship.
		
		// Please note: we do not create a circular reference. PHPExcel_Style_Substyle references back to PHPExcel_Style BUT
		// PHPExcel_Style does not reference PHPExcel_Style_Substyle. The latter is the whole point ;)
		
		$newSubStyle = new PHPExcel_Style_SubStyle($this);
		return $newSubStyle;
	}

	// Basically implement the following ofr all substyles but I'm limiting to Font. You get the point.

	public function getFill() {
		if(isset($this->_fill))
			return $this->_fill;
		// Same deal
		
		$newFill = new PHPExcel_Style_SubStyle();
		return $newFill;
	}

	public function setSubStyle($subStyle) {
		if(isset($this->_font))
			throw new Exception("Two PHPExcel_Style_SubStyles tried to hook to PHPExcel_Style");
		$this->_font = $subStyle;		
	}
	
	public function getSubStyle() {
		return $this->_font;
	}
	
	public function isPresent() {
		if(isset($this->_font)) return TRUE;
		return FALSE;
	}

	public function __clone() {
		self::$cntObjects++;

		$vars = get_object_vars($this);
		foreach ($vars as $key => $value) {
			if (is_object($value)) {
				$this->$key = clone $value;
			} else {
				$this->$key = $value;
			}
		}
	}
}

class PHPExcel_Worksheet {

	private $_styles = array();

	public function __construct() {
   		$this->_styles['default'] 	= new PHPExcel_Style();
	}
	
    public function getDefaultStyle() {
    	return $this->_styles['default'];
    }
    
    public function getStyle($pCellCoordinate = 'A1')
    {
		// Check if we already have style information for this cell.
		// If not, create a new style.
		if (isset($this->_styles[$pCellCoordinate])) {
			return $this->_styles[$pCellCoordinate];
		} else {
			$newStyle = clone $this->getDefaultStyle();
			$this->_styles[$pCellCoordinate] = $newStyle;
			return $newStyle;
		}    
    }

	public function __clone() {
		$vars = get_object_vars($this);
		foreach ($vars as $key => $value) {
			if (is_object($value)) {
				$this->$key = clone $value;
			} else {
				$this->$key = $value;
			}
		}
	}
}

echo "Memory usage: ".memory_get_usage()."\n";

$activeWorksheet = new PHPExcel_Worksheet();

for($column = 'A'; $column <= 'K'; $column++) {
	for($row = 1; $row <= 500; $row++) {
		$style = $activeWorksheet->getStyle("$column$row");
		
		// Get all of the property objects to see memory impact.
		$fontRef1		= $style->getFont();
		$fontRef2		= $style->getFont();
		
		// modify the font property and see that it gets reflected 
		
//		$fontRef1->setProperty(10);
//		echo "Font's property is: ".$fontRef2->getProperty()."\n";
//		$fontRef2->setProperty(11);
//		echo "Font's property is: ".$fontRef1->getProperty()."\n";
		
	}
}

echo "Memory usage: ".memory_get_usage()."\n";

echo "To the caller it appeared we just created (but we actually didn't):\n";
echo "PHPExcel_Style objects: ".PHPExcel_Style::$cntObjects."\n";
echo "PHPExcel_Style_SubStyle objects: ".PHPExcel_Style_SubStyle::$cntObjects."\n";


?>
