<?php
/**
 * PHPExcel
 *
 * Copyright (C) 2006 - 2010 PHPExcel
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * @category   PHPExcel
 * @package    PHPExcel
 * @copyright  Copyright (c) 2006 - 2010 PHPExcel (http://www.codeplex.com/PHPExcel)
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt	LGPL
 * @version    1.7.2, 2010-01-11
 */

/** Error reporting */
error_reporting(E_ALL);

/** PHPExcel */
require_once 'PHPExcel.php';

/** PHPExcel_IOFactory */
require_once 'PHPExcel/IOFactory.php';

// Create new PHPExcel object
echo date('H:i:s') . " Create new PHPExcel object\n";
$objPHPExcel = new PHPExcel();

// Set properties
echo date('H:i:s') . " Set properties\n";
$objPHPExcel->getProperties()->setCreator("Maarten Balliauw")
							 ->setLastModifiedBy("Maarten Balliauw")
							 ->setTitle("Office 2007 XLSX Test Document")
							 ->setSubject("Office 2007 XLSX Test Document")
							 ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
							 ->setKeywords("office 2007 openxml php")
							 ->setCategory("Test result file");


// Add some data
echo date('H:i:s') . " Add some data\n";
$objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1', 'Hello')
            ->setCellValue('B2', 'world!')
            ->setCellValue('C1', 'Hello')
            ->setCellValue('D2', 'world!');

// Miscellaneous glyphs, UTF-8
$objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A4', 'Miscellaneous glyphs')
            ->setCellValue('A5', 'éàèùâêîôûëïüÿäöüç');

// Rename sheet
echo date('H:i:s') . " Rename sheet\n";
$objPHPExcel->getActiveSheet()->setTitle('Simple');


// Set active sheet index to the first sheet, so Excel opens this as the first sheet
$objPHPExcel->setActiveSheetIndex(0);

$newObjPHPExcel = new PHPExcel();

$objWorksheet = $objPHPExcel->getActiveSheet();

$data = array();
$dataRow=0;
foreach ($objWorksheet->getRowIterator() as $row) {
  $cellIterator = $row->getCellIterator();
  $cellIterator->setIterateOnlyExistingCells(false); 
  $dataCell = 0;
  foreach ($cellIterator as $cell) {
    $data[$dataRow][$dataCell] = $cell->getValue();
    $dataCell++;
  }
  $dataRow++;
  
}

print_r($data);

$newObjPHPExcel = _formatSpreadsheet($newObjPHPExcel, $data, array("AgencyID", "Last Name", "FirstName", "Entered", "On", "by", "when") );

// Rename sheet
echo date('H:i:s') . " Rename sheet\n"; 
$newObjPHPExcel->getActiveSheet()->setTitle('Simple');


// Set active sheet index to the first sheet, so Excel opens this as the first sheet
$newObjPHPExcel->setActiveSheetIndex(0);

		
// Save Excel 2007 file
echo date('H:i:s') . " Write to Excel5 format\n";
$objWriter = PHPExcel_IOFactory::createWriter($newObjPHPExcel, 'Excel5');
$objWriter->save(str_replace('.php', '.xls', __FILE__));

// Echo memory peak usage
echo date('H:i:s') . " Peak memory usage: " . (memory_get_peak_usage(true) / 1024 / 1024) . " MB\r\n";

// Echo done
echo date('H:i:s') . " Done writing file.\r\n";


 function _formatSpreadsheet(&$dataDoc, $data, $header = array()){        
        // Populate Excel doc object. Columns are 0-indexed, rows are 1-indexed.
        $docCol = 0;
        $docRow = 1;
        
        if (count($data) > 0 && count($header) > 0){
            // The header rows are formatted as bold, horizontal center.
            if (count($header) > 0){
                foreach($header as $cell){
                    $dataDoc->getActiveSheet()->getCellByColumnAndRow($docCol, $docRow)
                                             ->setValue($cell);
                    $headerCellStyle = $dataDoc->getActiveSheet()->getStyleByColumnAndRow($docCol, $docRow);
                    $headerCellStyle->getAlignment()
                                    ->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                    $headerCellStyle->getFont()
                                    ->setBold(true);
                    $docCol++;
                }
                $docCol = 0;
                $docRow++;
            }
            
            foreach($data as $dataRow){
                foreach($dataRow as $dataCell){
                    $dataDoc->getActiveSheet()->getCellByColumnAndRow($docCol, $docRow)
                                             ->setValue($dataCell);
                    $docCol++;
                }
                $docCol = 0;
                $docRow++;
            }
        } else {
            $dataDoc->getActiveSheet()->getCellByColumnAndRow($docCol,$docRow)
                                      ->setValue("No data has been entered for this survey.");
        }
        // Format columns; the autosize method sort of works, but it's better
        // than not calling it at all. Do some fancy-pants shifting of the high
        // column index so that we can iterate over columns.
        $docHighCol = $dataDoc->getActiveSheet()->getHighestColumn();
	    print("Highest Column: ");
        print_r($docHighCol);
        print_r("\n");
        
        print ("Is String: ");
        print_r(is_string($docHighCol));
        print_r("\n");


        $docHighCol += ord('A');
        $docHighCol = chr($docHighCol);
        for ($col='A'; $col <= $docHighCol; $col++){
            $dataDoc->getActiveSheet()->getColumnDimension($col)->setAutoSize(true);
        }

        return $dataDoc;
    }
