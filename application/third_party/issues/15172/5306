public function rangeToArray($pRange = 'A1', $nullValue = NULL, $calculateFormulas = true, $formatData = true, $returnCellRef = false) {
		// Returnvalue
		$returnValue = array();

		//	Identify the range that we need to extract from the worksheet
		list($rangeStart, $rangeEnd) = PHPExcel_Cell::rangeBoundaries($pRange);
		$minCol = PHPExcel_Cell::stringFromColumnIndex($rangeStart[0] -1);
		$minRow = $rangeStart[1];
		$maxCol = PHPExcel_Cell::stringFromColumnIndex($rangeEnd[0] -1);
		$maxRow = $rangeEnd[1];

		$maxCol++;

		// Loop through rows
		for ($row = $minRow; $row <= $maxRow; ++$row) {
			$c = -1;
			// Loop through columns in the current row
			for ($col = $minCol; $col != $maxCol; ++$col) {
				$rRef = ($returnCellRef) ? $row : $row-1;
				$cRef = ($returnCellRef) ? $col : ++$c;
				//	Using getCell() will create a new cell if it doesn't already exist. We don't want that to happen
				//		so we test and retrieve directly against _cellCollection
				//echo "<br/>Cell Exist:".var_dump($this->_cellCollection->isDataSet($col.$row));
				if ($this->_cellCollection->isDataSet($col.$row)) {
					// Cell exists
					$cell = $this->_cellCollection->getCacheData($col.$row);
					if ($cell->getValue() !== null) {
						if ($cell->getValue() instanceof PHPExcel_RichText) {
							$returnValue[$rRef][$cRef] = $cell->getValue()->getPlainText();
						} else {
							if ($calculateFormulas) {
								$returnValue[$rRef][$cRef] = $cell->getCalculatedValue();
							} else {
								$returnValue[$rRef][$cRef] = $cell->getValue();
							}
						}

						if ($formatData) {
							$style = $this->_parent->getCellXfByIndex($cell->getXfIndex());
							$returnValue[$rRef][$cRef] = PHPExcel_Style_NumberFormat::toFormattedString($returnValue[$rRef][$cRef], $style->getNumberFormat()->getFormatCode());
						}
					} else {
						// Cell doesn't exist
						$returnValue[$rRef][$cRef] = $nullValue;
					}
				}
				// here i add else part of your function to get empty cell with proper key
				else {
					$returnValue[$rRef][$cRef] = $nullValue;
				}
			}
		}

		// Return
		return $returnValue;
	}
