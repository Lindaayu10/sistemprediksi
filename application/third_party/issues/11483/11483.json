{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "PHPExcel",
      "DisplayName": "PHPExcel"
    },
    "ClosedComment": "Fixed in SVN.",
    "ClosedDate": "2010-01-25T04:14:28.683-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Using the following code we should end up with a real Excel date value in the cell.  This code works if the date is (say) '2010-01-01', but once the year is high (probably above 2038, although I havent fully tested where the cutoff is) it doesnt work, and the code only puts in a text string.\n \n<?php\n.........\n$dateValueBinder = new PHPExcel_Cell_AdvancedValueBinder();\nPHPExcel_Cell::setValueBinder($dateValueBinder);\n$workbook->getActiveSheet()->setCellValue('A1', '2100-01-01');\n$workbook->getActiveSheet()->getStyleByColumnAndRow(3, $intRow)->applyFromArray($export->getCWStyle('date'));\n \n..........\n?>",
    "LastUpdatedDate": "2013-05-16T05:42:12.947-07:00",
    "PlannedForRelease": "PHPExcel 1.7.3 Production",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "PHPExcel",
    "ReportedDate": "2010-01-13T12:23:25.647-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "[Bug] PHPExcel_Cell_AdvancedValueBinder doesn't work for dates in far future (v1.7.2)",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 11483
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "The AdvancedValueBinder can only recognise a data value that falls within the PHP date range for the server (ie 32-bit or 64-bit) and that uses a format that is valid for the PHP strtotime() function. On a 32-bit server, this limits the range of dates as (Friday, 13 December 1901 20:45:54 UST to Tuesday, 19 January 2038 03:14:07 UST). On a 64-bit server, the range far exceeds the values actually supported by Excel itself.\r\n\r\nAn alternative is to convert the date value to an Excel timestamp yourself using PHPExcel_Calculation_Functions::DATE() or PHPExcel_Calculation_Functions::DATEVALUE(), e.g.\r\n$dateStamp = PHPExcel_Calculation_Functions::DATE(2100,1,1);\r\n$workbook->getActiveSheet()->setCellValue('A1', $dateStamp);\r\n$workbook->getActiveSheet()->getStyleByColumnAndRow(3, $intRow)->applyFromArray($export->getCWStyle('date'));\r\nor\r\n$dateStamp = PHPExcel_Calculation_Functions::DATEVALUE(\"2100-01-01\");\r\n$workbook->getActiveSheet()->setCellValue('A1', $dateStamp);\r\n$workbook->getActiveSheet()->getStyleByColumnAndRow(3, $intRow)->applyFromArray($export->getCWStyle('date'));\r\n\r\nNote that DATEVALUE() also accepts a wider range of formats than PHP's strtotime() function, although you should test that the return is a valid numeric rather than an error.",
      "PostedDate": "2010-01-13T14:25:08.88-08:00",
      "Id": -2147483648
    },
    {
      "Message": "See this thread http://phpexcel.codeplex.com/Thread/View.aspx?ThreadId=78910 for additional information about setting date/time values directly without using the AdvancedValueBinder",
      "PostedDate": "2010-01-13T14:28:18.86-08:00",
      "Id": -2147483648
    },
    {
      "Message": "So this is a flaw in AdvancedValueBinder.php on 32-bit systems.\r\n\r\nPerhaps we should get it fixed by avoiding PHPs strtotime() function and use some regular expressions instead.\r\nThe important thing is that AdvancedValueBinder.php recognizes timestamps of these kinds:\r\n'2100-12-31'\r\n'2100-12-31 15:59'\r\n\r\n>> On a 64-bit server, the range far exceeds the values actually supported by Excel itself.\r\n\r\nI tried to type some dates in MS Office Excel 2007, it accepted this range in 1900 date mode:\r\n'1900-01-01'\r\n'9999-12-31'\r\n\r\nAnd in 1904 date mode\r\n'1904-01-01'\r\n'9999-12-31'\r\n\r\nMark, would you agree that an ideal AdvancedValueBinder.php should recognize those ranges in 1900-mode and 1904-mode, respectively. No matter 32-bit or 64-bit server.",
      "PostedDate": "2010-01-13T16:19:56.25-08:00",
      "Id": -2147483648
    },
    {
      "Message": ">> Mark, would you agree that an ideal AdvancedValueBinder.php should recognize those ranges \r\n>> in 1900-mode and 1904-mode, respectively. No matter 32-bit or 64-bit server.\r\n>> \r\nI agree. strtotime() on a 32-bit server simply won't work for dates that fall outside of the 32-bit range; but a regexp that supported a full range of date formats wouldn't be easy, and the code would still need to convert to an Excel date as well.\r\nThe PHP datetime object can work with a wider range of date values, and supports a wider range of date/time formats as well. That's why I use the datetime object in the DATEVALUE() function.\r\nI'd suggest something like:-\r\n\r\nif ((is_string($value)) && (is_numeric($dateValue = PHPExcel_Calculation_Functions::DATEVALUE($value)))) {\r\n\t// Set cell value to the Excel date\r\n\t$cell->setValueExplicit( $dateValue, PHPExcel_Cell_DataType::TYPE_NUMERIC);\r\n\t\t\t\t\r\n\t// Set style\r\n\t$cell->getParent()->getStyle( $cell->getCoordinate() )->getNumberFormat()->setFormatCode( PHPExcel_Style_NumberFormat::FORMAT_DATE_YYYYMMDD2 );\r\n\t\t\t\t\r\n\treturn true;\r\n}\r\n\r\nDATEVALUE() also handles any UTC conversion internally.\r\n\r\nThe value returned from a call to DATEVALUE() could also be used to determine the masking to use. It's always a float (so long as ReturnDateType is set to RETURNDATE_EXCEL); but if floor($dateValue) == $dateValue, then it's purely the date part, otherwise it's both date and time.... allowing a more appropriate format mask to be set.\r\n",
      "PostedDate": "2010-01-14T04:42:15.247-08:00",
      "Id": -2147483648
    },
    {
      "Message": "The advancedValueBinder could also use the TIMEVALUE() for times.\r\nThis also supports a wider ranger of time formats than the regexp you've used, e.g\r\n1:32 PM",
      "PostedDate": "2010-01-14T04:45:50.37-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I tried your solution which worked for pure dates, but unfortunately not when there was a time part like in '2050-12-31 15:59'.\r\n\r\nTherefore I instead created PHPExcel_Shared_Date::stringToExcel() (using your technique from DATEVALUE) for use in AdvancedValueBinder.php instead of the strtotime() function that is inadequate on 32-bit systems.\r\n\r\nNote: While playing with the DATEVALUE function I found that it was not working correctly for pure time values. Will raise a new issue for this.\r\n\r\nSo far, setting this to \"fixed\" since the original issue with large dates on 32-bit systems is now fixed.\r\n",
      "PostedDate": "2010-01-16T18:55:52.953-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-01-25T04:14:28.683-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T19:03:22.217-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T05:42:12.947-07:00",
      "Id": -2147483648
    }
  ]
}