[
  {
    "Id": "842579",
    "ThreadId": "357671",
    "Html": "\r\n<p>First, thank you all for your development time on PHPExcel, it is exceptionally powerful.</p>\r\n<p>&nbsp;</p>\r\n<p>I have never before needed to use it to render an already existing Excel document inside of a webbrowser, but I find myself needing to use it for that purpose now.</p>\r\n<p>I had assumed that this functionality was already existing inside of the PHPExcel classes, but all I see referenced about this ability inside of the developer documentation is:</p>\r\n<p>&nbsp;</p>\r\n<p><strong><em>&quot;<span style=\"font-size:7pt\">&nbsp;</span>Spreadsheet in memory</em></strong></p>\r\n<p><strong><em>PHPExcel&rsquo;s architecture is built in a way that it can serve as an in-memory spreadsheet. This means that, if one would want to create a web based view of a spreadsheet which communicates with PHPExcel&rsquo;s object model, he would only\r\n have to write the front-end code.</em></strong></p>\r\n<p><strong><em>Just like desktop spreadsheet software, PHPExcel represents a spreadsheet containing one or more worksheets, which contain cells with data, formulas, images, &hellip;&quot;</em></strong></p>\r\n<p>&nbsp;</p>\r\n<p>Am I correct in assuming that this means I am going to have to recreate the entire layout of the existing Excel file, by hand, using something like table rows and columns or am I missing some nifty PHP function in the PHPExcel api that loops through the\r\n data in the excel file and attempts to display it accurately for you in the browser?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks ahead of time~</p>\r\n",
    "PostedDate": "2012-05-30T07:55:22.003-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "842767",
    "ThreadId": "357671",
    "Html": "<p>PHPExcel is a library allowing PHP to interact with the PHPExcel object, and providing file read/write capabilities; not a front-end browser or GUI&nbsp;application. It isn't Google Docs. You would need to write this part yourself.</p>\r\n<p>You can generate HTML from an Excel workbook using the HTML Writer, but this is static HTML rather than an interactive editing application.</p>\r\n<p>This would be possible by creating a custom HTML Writer (which could be based on the existing HTML Writer) that defined each table cell from your \"template\" workbook as a form field; then writing a back-end application which could read the data from that form, reload the file and update the PHPExcel object with new values from the form, then save it back to disk. It's easy enough if you don't allow the \"structure\" of the original \"template\"&nbsp;to be changed, but if you want to allow front-end users to do cell merges or similar it becomes quite complex.</p>\r\n<p>You'd also need a whole host of javascript if you wanted to allow user-styling of&nbsp;options like cell/colum/row formatting.</p>\r\n<p>I did do this at one point, using Ajax calls to handle cell updates to a persistent PHPExcel object, and responding with any cell differences that this triggered as a result of any formulae... it required building an additional network map of which cells triggered updates on what other cells, plus all the daemon logic for maintaining the PHPExcel object as a persitent object rather than reloading it onevery ajax call; and while performance was adequate running it on localhost, it slowed noticeably when run over a network (despite the persistent PHPExcel object).</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-05-30T12:48:55.167-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "842836",
    "ThreadId": "357671",
    "Html": "<p>Thank you MarkBaker, it all makes sense in my head now.</p>",
    "PostedDate": "2012-05-30T14:49:23.613-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]