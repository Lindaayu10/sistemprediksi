[
  {
    "Id": "1130139",
    "ThreadId": "471463",
    "Html": "Hi All,\r<br />\n<br />\nI've managed to generate and download an excel file from oracle database using PHPexcel, below is my coding for reference:-<br />\n<pre><code>\n// Instantiate a new PHPExcel object\n$objPHPExcel = new PHPExcel();\n// Set the active Excel worksheet to sheet 0\n$objPHPExcel-&gt;setActiveSheetIndex(0);\n// Initialise the Excel row number\n$rowCount = 2;\n\n$objPHPExcel-&gt;getActiveSheet()-&gt;SetCellValue('A1', 'ATB')-&gt;getStyle('A1')-&gt;getFill()-&gt;applyFromArray(\n        array(\n      'type'       =&gt; PHPExcel_Style_Fill::FILL_SOLID,\n      'startcolor' =&gt; array('rgb' =&gt; 'FFFF00'),\n      'endcolor'   =&gt; array('rgb' =&gt; 'FFFF00'),\n\n   )\n);\n$objPHPExcel-&gt;getActiveSheet()-&gt;SetCellValue('B1', 'ATA')-&gt;getStyle('B1')-&gt;getFill()-&gt;applyFromArray(\n        array(\n      'type'       =&gt; PHPExcel_Style_Fill::FILL_SOLID,\n      'startcolor' =&gt; array('rgb' =&gt; 'FFFF00'),\n      'endcolor'   =&gt; array('rgb' =&gt; 'FFFF00')\n   )\n);\n\n\n// Iterate through each result from the SQL query in turn\n// We fetch each database result row into $row in turn\nwhile($objResult = oci_fetch_array($objParse,OCI_ASSOC+OCI_RETURN_NULLS)){\n    // Set cell An to the &quot;name&quot; column from the database (assuming you have a column called name)\n    //    where n is the Excel row number (ie cell A1 in the first row)\n    $objPHPExcel-&gt;getActiveSheet()-&gt;SetCellValue('A'.$rowCount, $objResult[&quot;ATB&quot;])-&gt;getStyle('A'.$rowCount)-&gt;getNumberFormat()-&gt;setFormatCode('dd/mm/yyyy hh:mm:ss');\n    // Set cell Bn to the &quot;age&quot; column from the database (assuming you have a column called age)\n    //    where n is the Excel row number (ie cell A1 in the first row)\n    $objPHPExcel-&gt;getActiveSheet()-&gt;SetCellValue('B'.$rowCount, $objResult[&quot;ATA&quot;])-&gt;getStyle('B'.$rowCount)-&gt;getNumberFormat()-&gt;setFormatCode('dd/mm/yyyy hh:mm:ss');\n    // Increment the Excel row counter\n    $rowCount++;\n}\n\n// Instantiate a Writer to create an OfficeOpenXML Excel .xlsx file\n$objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);\n// Write the Excel file to filename some_excel_file.xlsx in the current directory\n$objWriter-&gt;save('report_actual.xlsx');</code></pre>\n\nSo when I open the excel file, the column value of ATB and ATA is formatted as dd/mm/yyyy hh:mm:ss. My intention right now is to SUM all column for ATB and get the total sum as a number. But the problem right now is after SUM all ATB the result is 0, so I need to double click each column for ATB and it will start to calculate the total SUM. Just for your information, my excel file look something like this:\r<br />\n<br />\n|    ATB                     |     ATA                      |\r<br />\n|22/03/2013 07:00:00 | 21/03/2013 20:20:00  |\r<br />\n|23/03/2013 17:10:00 | 22/03/2013 04:45:00  |\r<br />\n<br />\nI've noticed when I double click on that particular column, at the formula bar the value (example for ATB 22/03/2013 07:00:00) became like this one 22/3/2013  7:00:00 AM. When the value became like that, the total SUM column will automatically start summing. Imagine if I need to double click one thousand rows! \r<br />\n<br />\nSo I would like to seek any advise/assistance/opinion from experts. Is there any easy way to SUM all ATB without doing this messy work? I would prefer if the SUM also can be calculated automatically using PHPexcel.\r<br />\n<br />\n(p/s: i knew that excel SUM function is based on 1/1/1900 00:00:00)\r<br />\n<br />\nGlad if someone could help me. Many thanks.<br />\n",
    "PostedDate": "2013-11-28T20:37:41.82-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1130520",
    "ThreadId": "471463",
    "Html": "I think that your values from your database, are seen as text. The phenomenon that you recorded by double-clicking a cell is Excel that does the conversion work.\r<br />\nIf you want the conversion to be performed by PHPExcel,, you can explicitly do the work (using the PHPExcel_Shared_Date methods, setCellValueExplicit with a number type, setFormatCode,...) or use an Advanced Value Binder (one that is provided in example handles texts that &quot;look like&quot; dates/times, see 4.5.6 documentation and code).\r<br />\nDo some testing, but as a first step, I would use database output the universal format (yyyy-mm-dd hh:mm:ss) and I'd let the binder update format: native formats (those that Excel displays with a ' *') are automatically converted to the locale.\r<br />\n<br />\nWhatever the method chosen, each cell will contain a number, and PHPExcel will make the sum (I am however curious sense that one can give to this operation).<br />\n",
    "PostedDate": "2013-11-30T08:28:22.73-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]