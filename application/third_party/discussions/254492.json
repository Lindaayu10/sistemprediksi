[
  {
    "Id": "599741",
    "ThreadId": "254492",
    "Html": "\r\n<p>Hi there,</p>\r\n<p>OS: CentOS 5<br>\r\nPHP Version: 5.2.1<br>\r\nPHPExcel: 1.7.6</p>\r\n<p>I can't seem to get past 700 rows without timing out. Code is below</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>$query = $this-&gt;paged_results-&gt;GetQuery();\r\n\t\t$query-&gt;SetLimit(null);\r\n\t\t$query-&gt;SetOffset(0);\r\n\t\t$query-&gt;Run();\r\n\r\n\t\t<span style=\"color:green\">//header(&quot;Cache-Control: &quot;);</span>\r\n\t\t<span style=\"color:green\">//header(&quot;Pragma: &quot;);</span>\r\n\t\t<span style=\"color:green\">//header(&quot;Expires: &quot;);</span>\r\n\t\t<span style=\"color:green\">//header('Content-type: text/csv');</span>\r\n\t\t<span style=\"color:green\">//header(sprintf('Content-disposition: attachment; filename=&quot;clients-%s.csv&quot;', $this-&gt;paged_results-&gt;GetId()));</span>\r\n\r\n\r\n\t\t$flat_assigns = <span style=\"color:blue\">array</span>(\r\n\t\t\t<span style=\"color:#a31515\">'client1_first_name'</span> =&gt; <span style=\"color:#a31515\">'first_name'</span>,\r\n\t\t\t<span style=\"color:#a31515\">'client1_last_name'</span> =&gt; <span style=\"color:#a31515\">'last_name'</span>,\r\n\t\t\t<span style=\"color:#a31515\">'application_type'</span>,<span style=\"color:#a31515\">'sales_stage'</span>, <span style=\"color:#a31515\">'property_value'</span>, <span style=\"color:#a31515\">'total_financing'</span>, <span style=\"color:#a31515\">'down_payment'</span>, <span style=\"color:#a31515\">'payment'</span>, <span style=\"color:#a31515\">'payment_frequency'</span>,\r\n\t\t\t<span style=\"color:#a31515\">'date_entered'</span>, <span style=\"color:#a31515\">'maturity_date'</span>, <span style=\"color:#a31515\">'closing_date'</span>, <span style=\"color:#a31515\">'condition_of_finance_date'</span>,\r\n\t\t\t<span style=\"color:#a31515\">'sales_stage'</span>,\r\n\t\t\t<span style=\"color:#a31515\">'agent'</span>,\t\t\t\r\n\t\t\t<span style=\"color:#a31515\">'client2_first_name'</span>,<span style=\"color:#a31515\">'client2_last_name'</span>,\r\n\t\t\t<span style=\"color:#a31515\">'client3_first_name'</span>,<span style=\"color:#a31515\">'client3_last_name'</span>,\r\n\t\t\t<span style=\"color:#a31515\">'client_address1'</span>,\r\n\t\t\t<span style=\"color:#a31515\">'client_postal_code'</span>,\r\n\t\t\t<span style=\"color:#a31515\">'client_city'</span>,\r\n\t\t\t<span style=\"color:#a31515\">'client_province'</span>,\r\n\t\t\t<span style=\"color:#a31515\">'email'</span>,\r\n\t\t);\r\n\r\n\t\t<span style=\"color:green\">/** PHPExcel */</span>\r\n\t\tLibAxiom::ImportByPath(<span style=\"color:#a31515\">'/PHPExcel/PHPExcel.php'</span>);\r\n\t\t<span style=\"color:green\">/** PHPExcel */</span>\r\n\t\t\r\n\t\t$objPHPExcel = <span style=\"color:blue\">new</span> PHPExcel();\r\n\r\n\t\t<span style=\"color:green\">// Set properties</span>\r\n\t\t$objPHPExcel-&gt;getProperties()-&gt;setCreator(<span style=\"color:#a31515\">&quot;Maarten Balliauw&quot;</span>);\r\n\t\t$objPHPExcel-&gt;getProperties()-&gt;setLastModifiedBy(<span style=\"color:#a31515\">&quot;Maarten Balliauw&quot;</span>);\r\n\t\t$objPHPExcel-&gt;getProperties()-&gt;setTitle(<span style=\"color:#a31515\">&quot;Office 2007 XLSX Test Document&quot;</span>);\r\n\t\t$objPHPExcel-&gt;getProperties()-&gt;setSubject(<span style=\"color:#a31515\">&quot;Office 2007 XLSX Test Document&quot;</span>);\r\n\t\t$objPHPExcel-&gt;getProperties()-&gt;setDescription(<span style=\"color:#a31515\">&quot;Test document for Office 2007 XLSX, generated using PHP classes.&quot;</span>);\r\n\t\t\r\n\t\tLibAxiom::WriteToLog(<span style=\"color:#a31515\">'about to create object'</span>);\r\n\t\t<span style=\"color:green\">// Add some data</span>\r\n\t\t$objPHPExcel-&gt;setActiveSheetIndex(0);\r\n\t\t<span style=\"color:green\">//Set column headings</span>\r\n\t\t$col=<span style=\"color:#a31515\">'a'</span>;\r\n\t\t$styleArray = <span style=\"color:blue\">array</span>(\r\n\t<span style=\"color:#a31515\">'font'</span> =&gt; <span style=\"color:blue\">array</span>(\r\n\t\t<span style=\"color:#a31515\">'bold'</span> =&gt; true,\r\n\t),\r\n\t<span style=\"color:#a31515\">'alignment'</span> =&gt; <span style=\"color:blue\">array</span>(\r\n\t\t<span style=\"color:#a31515\">'horizontal'</span> =&gt; PHPExcel_Style_Alignment::HORIZONTAL_LEFT,\r\n\t),\r\n\t<span style=\"color:#a31515\">'borders'</span> =&gt; <span style=\"color:blue\">array</span>(\r\n\t\t<span style=\"color:#a31515\">'bottom'</span> =&gt; <span style=\"color:blue\">array</span>(\r\n\t\t\t<span style=\"color:#a31515\">'style'</span> =&gt; PHPExcel_Style_Border::BORDER_THIN,\r\n\t\t),\r\n\t),\r\n\t<span style=\"color:#a31515\">'fill'</span> =&gt; <span style=\"color:blue\">array</span>(\r\n\t\t<span style=\"color:#a31515\">'type'</span> =&gt; PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,\r\n\t\t<span style=\"color:#a31515\">'rotation'</span> =&gt; 90,\r\n\t\t<span style=\"color:#a31515\">'startcolor'</span> =&gt; <span style=\"color:blue\">array</span>(\r\n\t\t\t<span style=\"color:#a31515\">'argb'</span> =&gt; <span style=\"color:#a31515\">'00000000'</span>,\r\n\t\t),\r\n\t\t<span style=\"color:#a31515\">'endcolor'</span> =&gt; <span style=\"color:blue\">array</span>(\r\n\t\t\t<span style=\"color:#a31515\">'argb'</span> =&gt; <span style=\"color:#a31515\">'FFFFFFFF'</span>,\r\n\t\t),\r\n\t),\r\n);\r\n<span style=\"white-space:pre\">\t\t</span>//Format Header column\r\n\t\t<span style=\"color:blue\">foreach</span> ($flat_assigns <span style=\"color:blue\">as</span> $k =&gt; $v){ \r\n\t\t\t$objPHPExcel-&gt;getActiveSheet()-&gt;SetCellValue($col.<span style=\"color:#a31515\">&quot;1&quot;</span>, $v);\r\n\t\t\t$col&#43;&#43;;\r\n\t\t}\r\n\t\t$objPHPExcel-&gt;getActiveSheet()-&gt;getStyle(<span style=\"color:#a31515\">&quot;a1:&quot;</span>.$col.<span style=\"color:#a31515\">&quot;1&quot;</span>)-&gt;applyFromArray($styleArray);\r\n\t\t\t\r\n\t\t$row=1;\t\t\r\n\t\t<span style=\"color:blue\">foreach</span> ($query <span style=\"color:blue\">as</span> $result) {\r\n\t\t\t<span style=\"color:green\">//var_dump($result);exit;</span>\r\n\t\t\t$col = <span style=\"color:#a31515\">'a'</span>;\r\n\t\t\t$row&#43;&#43;;\r\n\t\t\t<span style=\"color:blue\">foreach</span> ($flat_assigns <span style=\"color:blue\">as</span> $k =&gt; $v) {\r\n\t\t\t\t\r\n\t\t\t\t<span style=\"color:blue\">if</span> (intval($k) == $k){\r\n\t\t\t\t\t$objPHPExcel-&gt;getActiveSheet()-&gt;SetCellValue(<span style=\"color:#a31515\">&quot;$col$row&quot;</span>, $result[$v]);\r\n\t\t\t\t}\r\n\t\t\t\t<span style=\"color:blue\">else</span>{\r\n\t\t\t\t\t$objPHPExcel-&gt;getActiveSheet()-&gt;SetCellValue(<span style=\"color:#a31515\">&quot;$col$row&quot;</span>, $result[$v]);\r\n\t\t\t\t}\r\n\t\t\t\t$column_list[] = $col;\r\n\t\t\t\t$col&#43;&#43;;\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\r\n\t\t}\r\n\t\t\t$subtotal = $row&#43;1;\r\n\t\t\t$objPHPExcel-&gt;getActiveSheet()-&gt;SetCellValue(<span style=\"color:#a31515\">&quot;F$subtotal&quot;</span>, <span style=\"color:#a31515\">&quot;=SUBTOTAL(9,F1:F$row)&quot;</span>);\r\n\t\t\t\t\t\r\n\t\t\t<span style=\"color:green\">//Once all the rows are created set column auto size true</span>\r\n\t\t\t<span style=\"color:green\">//foreach($column_list as $column)</span>\r\n\t\t\t\t<span style=\"color:green\">//$objPHPExcel-&gt;getActiveSheet()-&gt;getColumnDimension(&quot;$column&quot;)-&gt;setAutoSize(true);</span>\r\n\t\t\tLibAxiom::WriteToLog(<span style=\"color:#a31515\">'Finished Loop'</span>);\r\n\r\n\t\t\theader(<span style=\"color:#a31515\">'Content-Type: application/excel'</span>);\r\n\t\t\theader(<span style=\"color:#a31515\">'Content-Disposition: attachment;filename=&quot;test.xls&quot;'</span>);\r\n\t\t\theader(<span style=\"color:#a31515\">'Cache-Control: max-age=0'</span>);\r\n\t\t\t\r\n\t\t\t$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, <span style=\"color:#a31515\">'Excel5'</span>);\r\n\t\t\t$objWriter-&gt;save(<span style=\"color:#a31515\">'php://output'</span>); \r\n\t}\r\n</pre>\r\n</div>\r\nAny thoughts on where to start debugging?\r\n<p></p>\r\n",
    "PostedDate": "2011-04-19T06:34:05.33-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "599745",
    "ThreadId": "254492",
    "Html": "<p>In general, when my app tries to output a spreadsheet and it times out, PHPExcel does not give a lot of clues as to why.</p>\r\n<p>So I just arbitrarily reduce the output until I do get a spreadsheet, and go from there.</p>",
    "PostedDate": "2011-04-19T06:38:53.517-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "599750",
    "ThreadId": "254492",
    "Html": "<p>It just seems that 700ish rows is a fairly small recordset. &nbsp;I use the same function to create a csv with 13,000 records easily. &nbsp;I was hoping to create spreadsheets that are a little more robust using PHPExcel.</p>",
    "PostedDate": "2011-04-19T06:43:41.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "600001",
    "ThreadId": "254492",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>mcameron123 wrote:</strong><br />\r\n<p>It just seems that 700ish rows is a fairly small recordset. &nbsp;I use the same function to create a csv with 13,000 records easily. &nbsp;I was hoping to create spreadsheets that are a little more robust using PHPExcel.</p>\r\n</blockquote>\r\n<p><br />700 rows isn't a particularly meaningful measure. A row can contain just one column, or it can contain 256 columns... and the difference in memory requirements between those is about 256 times as much. Each cell in your workbook is a cell object, taking up about 1k of PHP's memory (on a 32-bit server; about 1.6k on a 64-bit server). The Excel Writers double that requirement, because they build the complete binary in memory as well, while the CSV writer writes each line as it is generated.</p>\r\n<p>A lot has been written on how to use memory more efficiently on this forum, and there are some links to specific discussion threads in the FAQ. I'm not going to repeat it all; but cell caching is one tool, that can reduce the memory requirements for each cell.</p>",
    "PostedDate": "2011-04-19T14:05:38.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "600004",
    "ThreadId": "254492",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>MarkBaker wrote:</strong><br />\r\n<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>mcameron123 wrote:</strong><br />\r\n<p>It just seems that 700ish rows is a fairly small recordset. &nbsp;I use the same function to create a csv with 13,000 records easily. &nbsp;I was hoping to create spreadsheets that are a little more robust using PHPExcel.</p>\r\n</blockquote>\r\n<p><br />700 rows isn't a particularly meaningful measure. A row can contain just one column, or it can contain 256 columns... and the difference in memory requirements between those is about 256 times as much. Each cell in your workbook is a cell object, taking up about 1k of PHP's memory (on a 32-bit server; about 1.6k on a 64-bit server). The Excel Writers double that requirement, because they build the complete binary in memory as well, while the CSV writer writes each line as it is generated.</p>\r\n<p>A lot has been written on how to use memory more efficiently on this forum, and there are some links to specific discussion threads in the FAQ. I'm not going to repeat it all; but cell caching is one tool, that can reduce the memory requirements for each cell. The costs is slower performance. There are also threads about improving execution speed, such as using the worksheet fromArray() method to set a bock of cells at a time, or disabling calculation when saving using a writer's setPreCalculateFormulas(false) method.</p>\r\n</blockquote>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-04-19T14:09:07.923-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "600017",
    "ThreadId": "254492",
    "Html": "<p>Thanks Mark</p>\r\n<p>I will investigate your suggestions. &nbsp;I am not getting an out of memory error but an execution timeout. &nbsp;My data is 24 columns wide.&nbsp;</p>\r\n<p>The exact error is&nbsp;</p>\r\n<p>Fatal error: &nbsp;Maximum execution time of 30 seconds exceeded in /home/mike/env/lib/PHPExcel/PHPExcel/Cell/DefaultValueBinder.php on line 77&nbsp;</p>",
    "PostedDate": "2011-04-19T14:27:29.063-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "600380",
    "ThreadId": "254492",
    "Html": "<p>mcameron,</p>\r\n<p>I am getting the same error, so I would be interested in knowing if you find a solution. I have been able to generate an Excel file with 3300 rows, but as soon as I add borders to the cells, it times out on me. I timed the step by step execution of the script and total time is 1:30 - 1:00 for database queries (an issue that will be resolved with a new server) and 30 seconds for the rest of the script to manipulate the data annd output the Excel. I noticed when I get the timeout error the file path I'm given is different every time, so it's not specific to a particular method or script in PHPExcel, but more the generally the overall execution time for conversion to Excel. I'll look at other posts as suggested by MarkBaker, but wanted to make my info known so it might help you solve this.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-04-20T06:56:37.897-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "600612",
    "ThreadId": "254492",
    "Html": "<p>@mcameron123</p>\r\n<p>Using the fromArray() method will improve speed of setting the cell values</p>\r\n<p>@denewey</p>\r\n<p>When you set your border styling, use the applyFromArray() method, and apply to ranges rather than individual cells, as mcameron123 is doing</p>\r\n<p>@both of you</p>\r\n<p>Especially if you're not using formulae (though it can still help even if you are), set the writer setPreCalculateFormulas(false) before saving.</p>",
    "PostedDate": "2011-04-20T12:36:48.083-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]