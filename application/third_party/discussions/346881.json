[
  {
    "Id": "803815",
    "ThreadId": "346881",
    "Html": "\r\n<p>I understand that PHPExcel has a lot of features for spreadsheet generation and manipulation. However, I have an instance where I need to create lots of sheets and files without any bells and whistles, in OOXML format. Unfortunately, for the bare bones,\r\n PHPExcel isn't doing so swift.</p>\r\n<p>Is there any alternative writer that does nothing&nbsp;special: just writes values to cells, and exports in OO XML?</p>\r\n<p>To give you an idea my problems with PHPExcel; I ran tests on a single workbook with one worksheet consisting of 6.2k rows, 18 columns, no formulas, and column 18 formatted with $#,##0.00.</p>\r\n<p>Using Spreadsheet_Excel_Writer: ~.5 seconds to write the worksheet. ~.3 to export (-&gt;close())</p>\r\n<p>Using PHPExcel: ~10 seconds to write the worksheet. ~30 seconds to export (-&gt;save('php://output')) (using Excel5 and Excel2007 writer: no difference in&nbsp;general&nbsp;speed)</p>\r\n<p>Those numbers are very consistent throughout all my tests.</p>\r\n<p>In PHPExcel, I'm using setCellValueExplicit() on every cell -- it's the fastest method I have found. fromArray() actually showed everything down considerably (~30 seconds). I don't use any&nbsp;formulas; it's all direct value writing as number or as string.</p>\r\n<p>How is it that Spreadsheet_Excel_Writer can be, by orders of&nbsp;magnitude, so much faster? Unfortunately, SEW doesn't support OOXML.</p>\r\n",
    "PostedDate": "2012-03-01T07:50:58.06-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "803886",
    "ThreadId": "346881",
    "Html": "<p>There are plenty of alternative writers... I maintain a list&nbsp;in response to a <a href=\"http://stackoverflow.com/questions/3930975/alternative-for-php-excel/3931142#3931142\">question on Stack Overflow</a>,&nbsp;and if all you want is speed without the bells and whistles, then you really are better off using one of those (for the moment) with a few caveats: many of those alternatives were originally written for earlier versions of PHP, and so may use deprecated features.... so you do need to watch out for warnings about this. Unfortunately, with the exception of COM and PUNO, I'm not aware of any other PHP libraries that will write OfficeOpenXML.</p>\n<p>Why is something like SEW faster? Because it does a lot less. It doesn't need to test if certain Excel features are being used to decide whether or not to write the appropriate data to the file because it simply doesn't support those features.</p>\n<p>Yes, we know PHPExcel is slow, and a large part of my development time is taken up be trying to ensure that any changes don't impact further on speed, and in reducing the execution time still further where I can. There are options that I've been looking at, but all involve a radical rewrite of the underlying code: something I'm not willing to commit to until I've invested in automating all my regression tests... only then will I be able to ensure that such a fundamental rewrite generates correct output without having to spend&nbsp;months doing so.</p>\n<p>WRT setting cell values: don't use</p>\n<div style=\"background-color: white; color: black;\">\n<pre><span style=\"color: blue;\"><div style=\"color: black; background-color: white;\"><pre><span style=\"color: blue;\">for</span> ($i=1; $i &lt;= 1000; ++$i) {\r\n    $objPHPExcel-&gt;getActiveSheet()\r\n                -&gt;setCellValueExplicit(<span style=\"color: #a31515;\">'A'</span>.$row, <span style=\"color: #a31515;\">'Test Data'</span>, PHPExcel_Cell_DataType::TYPE_STRING);\r\n}\r\n</pre>\n</div>\n</span></pre>\n</div>\n<p>in a loop. Instead get the active sheet first:</p>\n<div style=\"background-color: white; color: black;\">\n<pre>$sheet = $objPHPExcel-&gt;getActiveSheet();\r\n<span style=\"color: blue;\">for</span> ($i=1; $i &lt;= 1000; ++$i) {\r\n    $sheet-&gt;setCellValueExplicit(<span style=\"color: #a31515;\">'A'</span>.$row, <span style=\"color: #a31515;\">'Test Data'</span>, PHPExcel_Cell_DataType::TYPE_STRING);\r\n}\r\n</pre>\n</div>\n<p>It saves on&nbsp;999 calls to getActiveSheet().</p>\n<p>And use the fluent interface where you're making several calls to methods that return the same entity. It can make a big difference.</p>\n<p>&nbsp;</p>",
    "PostedDate": "2012-03-01T10:12:57.28-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "803901",
    "ThreadId": "346881",
    "Html": "<p>Cool. I'll look over those. And yeah, I do get activeSheet() first, before looping over my data.</p>\r\n<p>Example of the code:&nbsp;</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>        $excel = <span style=\"color: blue;\">new</span> \\PHPExcel();\r\n\r\n        $excel-&gt;getProperties()-&gt;setCreator(<span style=\"color: #a31515;\">\"PHP Automated Generator\"</span>);\r\n        $excel-&gt;getProperties()-&gt;setLastModifiedBy(<span style=\"color: #a31515;\">\"PHP Automated Generator\"</span>);\r\n\r\n        $activeSheet = $excel-&gt;getActiveSheet();\r\n        $activeSheet-&gt;setTitle(<span style=\"color: #a31515;\">\"Commissions\"</span>);\r\n\t\t\r\n        <span style=\"color: green;\">/* Headers */</span>\r\n        $activeSheet-&gt;setCellValueExplicit(<span style=\"color: #a31515;\">'A1'</span>, <span style=\"color: #a31515;\">'CP'</span>);\r\n\t\t...\r\n\r\n        $i = 2; <span style=\"color: green;\">// Row Index</span>\r\n        <span style=\"color: blue;\">foreach</span> ( $commissions <span style=\"color: blue;\">as</span> $row ) {\r\n            <span style=\"color: green;\">/** @var $row \\Models\\XSP\\Row */</span>\r\n\r\n            <span style=\"color: green;\">// Row output here</span>\r\n            $activeSheet-&gt;setCellValueExplicit(<span style=\"color: #a31515;\">'A'</span>.$i, $row-&gt;getUserId(), PHPExcel_Cell_DataType::TYPE_NUMERIC);\r\n            $activeSheet-&gt;setCellValueExplicit(<span style=\"color: #a31515;\">'B'</span>.$i, $row-&gt;getPartnerCompany());\r\n\t\t\t...\r\n\t\t\t\r\n            $i++;\r\n\r\n        }\r\n\r\n        <span style=\"color: green;\">/* Cell Formatting */</span>\r\n        $activeSheet-&gt;getStyle(<span style=\"color: #a31515;\">'R2:R'</span>.$i)-&gt;getNumberFormat()\r\n                                      -&gt;setFormatCode(<span style=\"color: #a31515;\">'$#,##0.00'</span>);\r\n\r\n        <span style=\"color: green;\">/* Have to set width individually */</span>\r\n        $activeSheet-&gt;getColumnDimension(<span style=\"color: #a31515;\">'A'</span>)-&gt;setAutoSize(true);\r\n\t\t...\r\n\t\t\r\n        <span style=\"color: blue;\">return</span> \\PHPExcel_IOFactory::createWriter($excel, <span style=\"color: #a31515;\">'Excel2007'</span>);\r\n\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2012-03-01T10:48:10.92-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]