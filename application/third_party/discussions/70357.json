[
  {
    "Id": "239640",
    "ThreadId": "70357",
    "Html": "<p>Hi,</p>\r\n<p>for a Datawarehouse Tool I'm working on i have to provide the possibility to export up to 50k rows and n Columns. I just tested 2007 and BIFF Output with the following result:</p>\r\n<p>Memory: ~600MB</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">foreach</span>($buffer <span style=\"color:Blue\">as</span> $row) {\r\n    \r\n    $c = 1;         \r\n    <span style=\"color:Blue\">foreach</span>($row <span style=\"color:Blue\">as</span> $val) {         \r\n      $o-&gt;getActiveSheet()-&gt;setCellValueExplicitByColumnAndRow($c, $i, $val, PHPExcel_Cell_DataType::TYPE_STRING);\r\n      $c++;             \r\n    } \r\n    $i++;\r\n  }\r\n</pre>\r\n</div>\r\n<p>took ~50 sec.</p>\r\n<p>Saving the file took another&nbsp;250 sec. with BIFF and 470 sec. with Excel2007. There are no Styles implemented yet!</p>\r\n<p>Any ideas for speeding up that thing?</p>\r\n<p>ty</p>",
    "PostedDate": "2009-09-28T11:25:52.113-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "239774",
    "ThreadId": "70357",
    "Html": "<p>What version of PHPExcel are you using? If you are using PHPExcel 1.7.0 then can you also try with latest source code. It could be faster:</p>\r\n<p><a href=\"http://phpexcel.codeplex.com/SourceControl/ListDownloadableCommits.aspx\">http://phpexcel.codeplex.com/SourceControl/ListDownloadableCommits.aspx</a></p>\r\n<p>Also, do you have formulas in your workbook?</p>",
    "PostedDate": "2009-09-28T19:24:53.583-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "240277",
    "ThreadId": "70357",
    "Html": "<p>Hi,</p>\r\n<p>i already used the latest version and no there are no formulas. i tried to optimize some things by breaking some coding standards. i wrote 10.000 rows with 4 columns.</p>\r\n<p>e.g.: accessing Cell:_value directly instead of Cell:getValue() brings 2 seconds.</p>\r\n<p>on line 236 of Cell.php there should be included an if:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">if</span>(iconv_strlen($pValue) &gt; 32767)\r\n   $pValue = PHPExcel_Shared_String::Substring($pValue, 0, 32767);\r\n</pre>\r\n<pre>without the if an expensive substring is made on EVERY cell-value. this brings another 2 sec. </pre>\r\n<pre>finally i switched to excel com api. the performance is unbeatable: 80.000 rows with formatting in 2-3 secs.</pre>\r\n</div>",
    "PostedDate": "2009-09-30T00:11:17.42-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "240718",
    "ThreadId": "70357",
    "Html": "<p>Thanks for the tips. We should try to include them even if they only save a couple of seconds.</p>\r\n<p>Well, the original goal of PHPExcel was to provide a simple solution for creating  invoices and stuff that would work on  cheap shared web hosting solutions. Then came users with their large workbooks trying to use PHPExcel. Only recently have we been trying to push the limits. I would say that 100,000 cells is currently the limit where it was 10,000 cells prior to PHPExcel 1.7.0. If we can bring that number up to 1,000,000 cells then it would great.</p>",
    "PostedDate": "2009-09-30T20:02:47.383-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "240787",
    "ThreadId": "70357",
    "Html": "<p>We can't &quot;compete&quot; with the Excel COM API... that will always be able to do everything that Excel can do (and as quickly) because it's actually running Excel itself. But it requires a Windows server, with Excel installed on that server, and most web hosts don't offer that option. What we're trying to provide is as much of the functionality of Excel as we can, as efficiently as we can, with an API that's as easy to use and as powerful as we can, in pure PHP for those developers who can't use COM, or who want a cross-platform option.</p>\r\n<p>With each new release, we're trying to add new functionality, but also trying to improve performance, to run more quickly, to reduce the memory footprint. Suggestions like your length test before calling substring are always useful because they help in that regard, so thanks for the tip</p>",
    "PostedDate": "2009-10-01T01:00:03.377-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "240982",
    "ThreadId": "70357",
    "Html": "<p>Hi,</p>\r\n<p>it's clear for me that the lib can't reach the performance of the com api and I my intention was not to make phpexcel bad because of the comparison. I'm still using the library for the pivot-output&nbsp;of my tool&nbsp;(not Excel-Pivottable), because styling is dramaticlly simpler than with the com api and there is no better possibilty to produce such great output with php. Just keep on working on the library - it's very important for a lot of people! Thank you for that.</p>",
    "PostedDate": "2009-10-01T09:54:25.13-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "242018",
    "ThreadId": "70357",
    "Html": "<p>Hi, i think this is a very good library but unfortunally I was almost try to do what rokx need.</p>\r\n<p>I found another php library to do that, you can check it at:</p>\r\n<p>http://www.phpclasses.org/browse/package/1919.html</p>\r\n<p>May be you have to read the threads to make it works.</p>\r\n<p>I tested on Linux and I have to add/change some lines of code</p>\r\n<p>Contact me if you want.</p>\r\n<p>TGP</p>\r\n<p>webmastertgp[at]hotmail[dot]com</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-04T21:44:28.363-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]