[
  {
    "Id": "203222",
    "ThreadId": "60042",
    "Html": "<p>I am in the process of migrating a malfunctioning system over from the now-unsupported <a href=\"http://pear.php.net/package/Spreadsheet_Excel_Writer\">Spreadsheet Excel Writer</a> renderer to PHPExcel.  I am overall quite impressed with the available features.</p>\r\n<p>The first question I have is regarding getting PHPExcel set up as a PEAR package.  I've installed per instructions I located (pear install [path-to-TGZ]) and as a result have the package seemingly installed, on a channel called &quot;__uri&quot;, but I cannot seem to access its functionality innately.  I've been working via simple includes, but integrating it into the system via PEAR is something I'd really like to do.  Have I missed something?  I admit that PEAR is not my forte.</p>\r\n<p>The second question is: how would I go about rendering and returning the spreadsheet file via a HTTP request, rather than saving it to disk?  The examples I've located all seem to focus on saving the end result of the render to a file on the local file system, but the implementation I'm seeking would deliver the results of the render directly to users of a web-based system.</p>\r\n<p>I have searched the discussion boards, but was unable to find answers to these questions, so answers and advice would be much appreciated.  Thanks!</p>",
    "PostedDate": "2009-06-18T22:34:03.683-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "203483",
    "ThreadId": "60042",
    "Html": "<p><em>&gt;&gt; The first question I have is regarding getting PHPExcel set up as a PEAR package.</em><br> <br> I admit that I haven't been using PEAR that much. I tested your method locally on Windows XP running XAMPP, but I had no problems. Here is what I did.<br> <br> 1. Download the PEAR PHPExcel from &quot;Downloads&quot; here on this site. This gave me the file PHPExcel-1.6.7.tgz on the desktop.<br> <br> 2. Run from the command prompt:<br> <br> <span style=\"font-family:Courier New\">pear install PHPExcel-1.6.7.tgz</span><br> <br> <a href=\"http://img221.imageshack.us/img221/4085/pear.png\">http://img221.imageshack.us/img221/4085/pear.png</a><br> <br> 3. Check that the PHPExcel.php and PHPExcel folder are in place in the PEAR directory.<br> <br> <a href=\"http://img197.imageshack.us/img197/4085/pear.png\">http://img197.imageshack.us/img197/4085/pear.png</a><br> <br> After this, I could do like this:<br> <br> <span style=\"font-family:Courier New\">$objPHPExcel = new PHPExcel();</span><br> <br> without having to include any classes. I could have achieved the same by just copying those files manually to the PEAR directory. Not sure what the big difference is?<br> <br> <em>&gt;&gt; The second question is: how would I go about rendering and returning the spreadsheet<br> &gt;&gt; file via a HTTP request</em><br> <br> Be sure to check the documentation. There is a section called &quot;Redirect output to a client's web browser&quot; showing which headers to use for both xls and xlsx.</p>",
    "PostedDate": "2009-06-19T12:12:23.397-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "203615",
    "ThreadId": "60042",
    "Html": "<p>The documentation was really helpful in setting me on my way - you should really download it - it's along with the main package.</p>",
    "PostedDate": "2009-06-20T00:15:38.46-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "203619",
    "ThreadId": "60042",
    "Html": "<p>Thank you for the help!&nbsp; I found all the information I needed to get the system to output to client browsers right where you said it would be.</p>\r\n<p>On the PEAR front, it seems that I am able to use PHPExcel via calls to include() as if it were local, even though it is not, so the installation must have worked to some degree.&nbsp; Having to be sure I call include() before accessing the features is a minor inconvenience I can overlook.</p>\r\n<p>I was wondering if you might direct me towards any useful information that could help me with optimization practices.&nbsp; The system in question will often generate spreadsheets with thousands of rows, so any tips that you can offer to help cut overhead would be very useful.</p>",
    "PostedDate": "2009-06-20T00:57:31.263-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "203798",
    "ThreadId": "60042",
    "Html": "<p>From what I've gathered from koyama's posts, you would do well to specify the datatype of the cell explicitly - you can find the syntax for this in the documentation again. He says it improves speed up to 30% and I trust his judgment implicitly! If you are using formulas, you could disable the pre-calculation of formulas to improve speed - just run a search on the forum, there is a discussion regarding this that's about 2-3 days old.</p>\r\n<p>Would love to hear your benchmarks and experience - do let us know.</p>",
    "PostedDate": "2009-06-21T03:18:34.1-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "207891",
    "ThreadId": "60042",
    "Html": "<p>I've implemented much of the features I need.&nbsp; I'm noticing a decent amount of memory overhead, especially when particularly large (10,000+ row) sheets are generated.&nbsp; Could you recommend some methods of perhaps decreasing the memory usage?<br><br>Also, while I am able to set cell formatting individually, I could find no reference to functions that might enable me to set formatting (numeric value display, justification) by column rather than by cell.&nbsp; Each column always obeys specific formatting, and I'm concerned that specifying formatting per-cell might also be causing unneeded overhead.</p>",
    "PostedDate": "2009-07-02T04:20:27.493-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "207892",
    "ThreadId": "60042",
    "Html": "<p>@kbarsotti: What version of PHPExcel are you using?</p>",
    "PostedDate": "2009-07-02T04:25:00.257-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "207897",
    "ThreadId": "60042",
    "Html": "<p>I am using version 1.6.7.</p>",
    "PostedDate": "2009-07-02T04:40:27.227-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "207900",
    "ThreadId": "60042",
    "Html": "<p><em>&gt;&gt; I am using version 1.6.7.</em><br> <br> Then I recommend that you grab the latest source code:<br> <a href=\"../SourceControl/ListDownloadableCommits.aspx\">http://phpexcel.codeplex.com/SourceControl/ListDownloadableCommits.aspx</a><br> <br> Out of the box, latest source code will use less memory than PHPExcel 1.6.7, especially if you are using styling.<br> <br> The preferred way of styling multiple cells is with latest source code:<br> <br> <span style=\"font-family:Courier New\">$objWorksheet-&gt;getStyle(A1:A10000)-&gt;...</span><br> <br> which is much faster than looping through cells and styling them one at a time. So I recommend that you update your code to make use of this.<br> <br> You are correct that column styling is not yet implemented. I posted a feature request last year, but for some reason it didn't get many votes. You may vote for this:<br> <a href=\"../WorkItem/View.aspx?WorkItemId=7333\">http://phpexcel.codeplex.com/WorkItem/View.aspx?WorkItemId=7333</a><br></p>",
    "PostedDate": "2009-07-02T04:54:00.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "207905",
    "ThreadId": "60042",
    "Html": "<p>Thanks, that's a very handy feature.&nbsp; I'll definitely vote for the column-styling as well, it's important to have complete interoperability above and beyond the convenience such a feature would offer.</p>\r\n<p>Just to make sure, to do a PEAR install of the contents of the archive you linked, I'll want to put the package.xml from /Build into /Classes?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-02T05:09:22.233-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "207913",
    "ThreadId": "60042",
    "Html": "<p>&gt;&gt; Just to make sure, to do a PEAR install of the contents of the archive you linked,<br> &gt;&gt; I'll want to put the package.xml from /Build into /Classes?<br> <br> Hmm... I think that package.xml file is just a template, so it may not be good to do that.<br> <br> I am not a PEAR expert, but somewhere in you PEAR directory you should find <span style=\"font-family:Courier New\">PHPExcel.php</span> and the <span style=\"font-family:Courier New\">PHPExcel</span> directory with the remaining classes. Manually replacing them with the new versions found in Classes should work, I think. Can you try that?</p>",
    "PostedDate": "2009-07-02T05:31:46.78-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "207924",
    "ThreadId": "60042",
    "Html": "<p>Will do.&nbsp; I've a few things to do today before I'll be sitting down to code, but I'll let you know how it all turns out.</p>",
    "PostedDate": "2009-07-02T06:07:57.837-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "215855",
    "ThreadId": "60042",
    "Html": "<p>I apologize for the delay, a number of things came up that prevented my response.</p>\r\n<p>The system works very well, but even with the latest source code I am experiencing a large efficiency loss compared to the original Spreadsheet_Excel_Writer solution.&nbsp; I'll list my findings and methods.</p>\r\n<p><strong>Using an example sheet which has 48 columns and 2472 rows (a large spreadsheet, but the system is capable of producing result sets in the tens of thousands at times):<br></strong><br>PHPExcel (No Formatting): 145MB peak memory.</p>\r\n<p>PHPExcel (Full Formatting): 310MB peak memory.</p>\r\n<p>Spreadsheet_Excel_Writer (Full Formatting): 31.5MB peak memory.</p>\r\n<p>As you can see, the new system utilizes between five and ten times as much memory to produce the same output.&nbsp; The computation time (and subsequent load time on the application's web front-end) is similarly longer.</p>\r\n<p><strong>Methods:</strong></p>\r\n<p>I was unable to use cell ranges as parameters for the getStyle() method, ala:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>$objWorkSheet-&gt;getStyle(A1:A2000)-&gt;getAlignment()-&gt;setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);\r\n</pre>\r\n</div>\r\n</p>\r\n<p>So I used a single cell assignment followed by a cell range duplicateStyle().</p>\r\n<p>If you can offer me any advice as to how I might improve the efficiency of this system, I would be most grateful.&nbsp; Thank you again for all your help!</p>",
    "PostedDate": "2009-07-24T13:43:49.587-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "215864",
    "ThreadId": "60042",
    "Html": "<p><em>&gt;&gt; If you can offer me any advice as to how I might improve the efficiency of this system,<br> &gt;&gt; I would be most grateful.</em><br> <br> Are you using <span style=\"font-family:Courier New\">setValue()</span> or <span style=\"font-family:Courier New\">setValueExplicit()</span>? Like karpar mentioned, the latter is faster than the first and makes a notable difference when you have many cells. Also, if you are generating xlsx, you may consider disabling formula precalculation.</p>",
    "PostedDate": "2009-07-24T14:08:01.173-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "215871",
    "ThreadId": "60042",
    "Html": "<p>I am actually using setCellValueByColumnAndRow iteratively, ala:<br><br>for($i=0;$i&lt;count(rows);$i++){<br>&nbsp; for($j=0;$j&lt;count(columns);$j++){<br>&nbsp;&nbsp;&nbsp; $o-&gt;getActiveSheet()-&gt;setCellValueByColumnAndRow($j,$i,$val);<br>&nbsp; }<br>}</p>\r\n<p>What would be an analogous way to perform the same sort of operation but with the setValueExplicit() function?</p>",
    "PostedDate": "2009-07-24T14:35:04.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "215872",
    "ThreadId": "60042",
    "Html": "<p>Instead of this<br>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>$sheet-&gt;setCellValueByColumnAndRow(0, 1, <span style=\"color:#A31515\">'hello'</span>);\r\n$sheet-&gt;setCellValueByColumnAndRow(0, 2, 1234567);\r\n\r\n</pre>\r\n</div>\r\nDo like this:<br>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>$sheet-&gt;setCellValueExplicitByColumnAndRow(0, 1, <span style=\"color:#A31515\">'hello'</span>, PHPExcel_Cell_DataType::TYPE_STRING);\r\n$sheet-&gt;setCellValueExplicitByColumnAndRow(0, 2, 1234567, PHPExcel_Cell_DataType::TYPE_NUMERIC);\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-07-24T14:53:07.063-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216206",
    "ThreadId": "60042",
    "Html": "<p>I've made the revision, along with another that I'll outline after the benchmark, with the following results:</p>\r\n<p><strong>Test Case: 48 Columns, 2472 Rows:</strong></p>\r\n<p>Peak Memory (Explicit Assignment): 310.75MB (an increase in memory usage, but negligible)</p>\r\n<p>Peak Memory (Explicit Assignment, Conditional*): 292.5MB</p>\r\n<p>Peak Memory (Explicit Assignment, Conditional, No Formatting): 110MB.</p>\r\n<p>* I realized that the existing logic, which I based mine upon, never actually checks for null values from the database before it creates and fills a cell.&nbsp; By adding a conditional to every cell assignment, I eliminated all the Excel logic associated with null/empty cells, which improved efficiency somewhat, though it'll vary depending on how many of the records are incomplete.</p>\r\n<p>The end result is that using explicit assignments does not seem to have improved memory use (and actually may have increased it to a negligible degreee).&nbsp; The conditional fix helped a bit more, but again not profoundly.&nbsp; The memory usage for this particular test case is now oscillating between 290MB and 300MB.&nbsp; Can you think of some other ways I could enhance the efficiency of the operation?&nbsp; It seems that the formatting action does produce the lion's share (~60%) of the memory usage.</p>\r\n<p>My formatting method involves setting the formatting for the first cell in a column (or the title row) then using the duplicateStyle() function to duplicate that style information to all subsequent cells in that column or row.&nbsp; Is there a more efficient way to accomplish this?</p>\r\n<p>Perhaps disk caching could be utilized to lighten the memory load?</p>\r\n<p><strong>Sidenote</strong></p>\r\n<p>I'm also trying to get currency-value columns formatted like &quot;$1000&quot;.&nbsp; The USD_SIMPLE currency format is &quot;$1000.00&quot;.&nbsp; Do you know of some good examples for creating a custom number formatting to accomplish the desired format, with a '$' prefix but no decimal precision?</p>",
    "PostedDate": "2009-07-26T13:06:40.057-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216212",
    "ThreadId": "60042",
    "Html": "<p><em>&gt;&gt; I was unable to use cell ranges as parameters for the getStyle() method, ala:</em></p>\r\n<p><em>&gt;&gt; $objWorkSheet-&gt;getStyle(A1:A2000)-&gt;getAlignment()-&gt;setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);</em></p>\r\n<p>Ups, I discover missing quotes<br><span style=\"font-family:Courier New\"><br>getStyle(A1:A2000)</span><br><br><span style=\"font-family:Courier New\">getStyle('A1:A2000')</span><br> <br> Maybe that is why it is not working. Can you test again? I can't understand why memory usage is so high with latest source code. I just ran some test with 100,000 cells and styling didn't really add anything to memory usage. It stayed constant at around 140MB.</p>\r\n<p>The explicit assignment does not lower memory usage, but increases speed a bit. I should have been more clear about that.</p>\r\n<p><em>&gt;&gt;Do you know of some good examples for creating a custom number formatting to accomplish the desired format, with a '$' prefix but no decimal precision?</em></p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>$sheet-&gt;getCell(<span style=\"color:#A31515\">'B1'</span>)-&gt;setValueExplicit(199, PHPExcel_Cell_DataType::TYPE_NUMERIC);\r\n$sheet-&gt;getStyle(<span style=\"color:#A31515\">'B1'</span>)-&gt;getNumberFormat()-&gt;setFormatcode(<span style=\"color:#A31515\">'[$$-409]#,##0'</span>);\r\n\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-07-26T13:52:26.08-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]