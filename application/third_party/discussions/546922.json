[
  {
    "Id": "1250885",
    "ThreadId": "546922",
    "Html": "Hi there,<br />\n<br />\nI am the PHP/Javascript/AJAX developer for <a href=\"http://performatix.co\" rel=\"nofollow\">http://performatix.co</a><br />\nI have recently started working with PHPExcel as it is a requirement to import attribute &quot;ancestrees&quot;, visually depicted in an xls file as the one uploaded to <a href=\"https://www.codeplex.com/Download/AttachmentDownload.ashx?ProjectName=phpexcel&amp;WorkItemId=10749&amp;FileAttachmentId=8503\" rel=\"nofollow\">https://www.codeplex.com/Download/AttachmentDownload.ashx?ProjectName=phpexcel&WorkItemId=10749&FileAttachmentId=8503</a> (05.New_Bus.Phone System_Performatix_Ancestree_20May14.xls)<br />\n<br />\nhow is it recommended to write PHP code to process the following file?<br />\nXLS document, for Business Phone Systems Service - containing the sheets 2 tier and 1 tier which we specifically focus on, in our Performatix attributes manager's ancestree import feature.<br />\nthe PHP code i have sofar for doing this is:<br />\n<pre><code>        getrecords(); // retrieve attribute records from performatix database\n        //$tabledata = explode(&quot;;,;&quot;,$_POST[&quot;list_tables&quot;]);\n        //$table = $tabledata[0];\n        //$file = $table.&quot;_&quot;.date(&quot;YmdHis&quot;,time()).&quot;.xls&quot;;\n        set_time_limit(7200);\n        $updateorreplace = $_POST[&quot;radio_updateorreplace&quot;];\n        $uploaddir = '../temp/';\n        $uploadfile = $uploaddir . basename($_FILES['file_importfile']['name']);\n        $firstname = $uploadfile;\n        $i=0;\n        if (file_exists($firstname)) {\n            $uploadfile = str_replace(&quot;.xls&quot;,&quot; (&quot;.$i.&quot;).xls&quot;,$firstname);\n            while (file_exists($uploadfile)) {\n                $i++;\n                $uploadfile = str_replace(&quot;.xls&quot;,&quot; (&quot;.$i.&quot;).xls&quot;,$firstname);\n            }\n        }\n        if (move_uploaded_file($_FILES['file_importfile']['tmp_name'], $uploadfile)) {\n            // auto detect ancestree dimentions\n            echo &quot;  &lt;result&gt;Successfully uploaded \\&quot;&quot;.$uploadfile.&quot;\\&quot;.&lt;/result&gt;\\n&quot;;\n            ob_flush();\n            if ($updateorreplace==&quot;0&quot;) {\n                // Update Existing Record Ancestree's\n                /**  Identify the type of $uploadfile  **/\n                $inputFileType = PHPExcel_IOFactory::identify($uploadfile);\n                /**  Create a new Reader of the type that has been identified  **/\n                $objReader = PHPExcel_IOFactory::createReader($inputFileType);\n                try {\n                    /** Load $uploadfile to a PHPExcel Object  **/\n                    $objPHPExcel = PHPExcel_IOFactory::load($uploadfile);\n                    $worksheetData = $objReader-&gt;listWorksheetInfo($uploadfile);\n                } catch(PHPExcel_Reader_Exception $e) {\n                    die('   &lt;result&gt;Error loading file: '.$e-&gt;getMessage()).'&lt;/result&gt;\\n';\n                }\n                echo &quot;  &lt;workbook file=\\&quot;&quot;.$uploadfile.&quot;\\&quot; format=\\&quot;&quot;.$inputFileType.&quot;\\&quot;&gt;/n&quot;;\n                $wsi = 0;\n                $xCol = &quot;A&quot;;\n                $xRow = &quot;1&quot;;\n                $yCol = &quot;A&quot;;\n                $yRow = &quot;1&quot;;\n                $keys = array();\n                $_SESSION[&quot;keysvalues&quot;] = breakdown($_REQUEST[&quot;menu_services&quot;]);\n                foreach ($worksheetData as $worksheet) {\n                    if (stristr($worksheet['worksheetName'],&quot;tier&quot;) !== false) {\n                        $worksheetname = $worksheet['worksheetName'];\n                        $alpha = &quot;BCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;\n                        $num = &quot;123456789&quot;;\n                        $objWorksheet = $objPHPExcel-&gt;setActiveSheetIndex($wsi);\n                        $i = 0;\n                        $char = substr($alpha,$i,$i+1);\n                        for ($n = 1; $n &lt; strlen($num); $i++) {\n                            $digit = substr($num,$n,$n+1);\n                            $value = $objWorksheet-&gt;getCellByColumnAndRow($char, $digit)-&gt;getValue();\n                            if ($value !== &quot;&quot; &amp;&amp; strlen($value) &lt; 24) {\n                                $xCol = $char;\n                                $xRow = $digit;\n                                array_push($keys, $value);\n                                while (stristr($value, &quot;;&quot;)==false &amp;&amp; stristr($value, &quot;,&quot;)==false &amp;&amp; !is_numeric($value) || array_key_exists($value,$_SESSION[&quot;keysvalues&quot;]) || $value !== &quot;&quot;) {\n                                    $char = substr($alpha,$i++,$i+1);\n                                    $yCol = $char;\n                                    $value = $objWorksheet-&gt;getCellByColumnAndRow($char, $digit)-&gt;getValue();\n                                    array_push($keys, $value);\n                                }\n                                goto label0;\n                            }\n                        }\n                        label0:\n                        for ($a = 0; $a &lt; strlen($alpha); $a++) {\n                            $char = substr($alpha,$i,$i+1);\n                            $value = $objWorksheet-&gt;getCellByColumnAndRow($char, $worksheet['totalRows']-1)-&gt;getValue();\n                            if ($value !== &quot;&quot; &amp;&amp; (stristr($value,&quot;;&quot;)==false &amp;&amp; stristr($value,&quot;,&quot;)==false)) {\n                                $yRow = $worksheet['totalRows'];\n                                goto label1;\n                            }\n                        }\n                        $objPHPExcel-&gt;disconnectWorksheets();\n                        unset($objPHPExcel);\n                        $objReader = PHPExcel_IOFactory::createReader($inputFileType);\n                        $worksheetData = $objReader-&gt;listWorksheetInfo($uploadfile);\n                        label1:\n                        echo &quot;      &lt;spreadsheet tab=\\&quot;&quot;.xmlentities($worksheetname).&quot;\\&quot; dimensions=\\&quot;&quot;.$xCol.&quot;;&quot;.$xRow.&quot;;&quot;.$yCol.&quot;;&quot;.$yRow.&quot;\\&quot; keys=\\&quot;&quot;.$keys.&quot;\\&quot; /&gt;\\n&quot;;\n                    }\n                    $wsi++;\n                }\n                echo &quot;  &lt;/workbook&gt;\\n&quot;;\n                echo &quot;  &lt;result&gt;File is valid, and was successfully uploaded as &quot;.$uploadfile.&quot;.&lt;/result&gt;\\n&quot;;\n            } elseif ($updateorreplace==&quot;1&quot;) {\n                // Replace Existing Attribute Record's\n                /**  Identify the type of $uploadfile  **/\n                $inputFileType = PHPExcel_IOFactory::identify($uploadfile);\n                /**  Create a new Reader of the type that has been identified  **/\n                $objReader = PHPExcel_IOFactory::createReader($inputFileType);\n                $worksheetData = $objReader-&gt;listWorksheetInfo($uploadfile);\n                try {\n                    /** Load $uploadfile to a PHPExcel Object  **/\n                    $objPHPExcel = PHPExcel_IOFactory::load($uploadfile);\n                } catch(PHPExcel_Reader_Exception $e) {\n                    die('   &lt;result&gt;Error loading file: '.$e-&gt;getMessage()).'&lt;/result&gt;\\n';\n                }\n                $worksheetData = $objReader-&gt;listWorksheetInfo($uploadfile);\n                echo &quot;  &lt;workbook file=\\&quot;&quot;.$uploadfile.&quot;\\&quot; format=\\&quot;&quot;.$inputFileType.&quot;\\&quot;&gt;/n&quot;;\n                echo &quot;  &lt;/workbook&gt;\\n&quot;;\n            }\n        } else {\n            echo &quot;  &lt;result&gt;File upload failed!&lt;/result&gt;\\n&quot;;\n        }\n        //echo '    &lt;result&gt;Debugging info:\\n';\n        //foreach ($_FILES as $file) {\n        //  echo implode(&quot;  &quot;,$file).&quot;\\n&quot;;\n        //}\n        //echo '&lt;/result&gt;';</code></pre>\n\nthe code was modified however, as follows, with some help from someone who has worked with PHPExcel before...<br />\n<pre><code>/* Error reporting */\nerror_reporting(E_ALL);\n/* Set PHP Memory Limit */\nini_set('memory_limit', '8192M');\nini_set('display_errors', TRUE);\nini_set('display_startup_errors', TRUE);\ndefine('EOL',(PHP_SAPI == 'cli') ? PHP_EOL : '&lt;br /&gt;');\ndate_default_timezone_set('Africa/Johannesburg');</code></pre>\n\nthe code previously, (especially within the &quot;if ($updateorreplace) {&quot; statement) attempts to get the ancestree dimensions within the worksheets - some errors were noted in the coding practice, and rectified.<br />\nhowever - the RAM STILL runs out very quickly and we JUST upgraded our Ubuntu server to 1GB ram. is there perhaps a better method to get these data dimensions calculated? Does PHPExcel require a longer timeout for calculating the data dimensions? Or does it just require even <em>MORE</em> memory to be made available, within the code (for reading a 60KB sized XLS file!)??<br />\nthe next step after getting the dimensions, would be to get the attribute id's from mysql (the column Ancestree's headered in RED) according to the xls document, and building a two tier array to update the ancestrees with for the last column's attribute values. (on right top two rows, horizontally also titled in RED - these are to be set into the database then as the last step for each of the attributes to be displayed via an ajax script in joomla).<br />\nall columns titled as attribute values in RED are to be populated via PHPExcel and MySQL eventually (the following steps, to finally get the attribute id's into arrays and populate on the attributes via MySQL)...<br />\nsincerely,<br />\nPierre &quot;Greywacke&quot; du Toit.<br />\n",
    "PostedDate": "2014-05-29T08:15:53.887-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1251258",
    "ThreadId": "546922",
    "Html": "ok the real issue here seems to be that the script keeps timing out! why does PHPExcel need to take so long to return values? 1GB seems to be enough ram for the server to be able to load and read a 60KB spreadsheet... 0o<br />\n<ul>\n<li>Pierre &quot;Greywacke&quot; du Toit.</li>\n</ul>\n",
    "PostedDate": "2014-05-30T06:49:59.683-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1251547",
    "ThreadId": "546922",
    "Html": "So is it actually running out of memory, or is it timing out? I'm not completely certain what your problem is.... and how many database queries are actually being executed?<br />\n",
    "PostedDate": "2014-05-31T04:58:40.227-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1251647",
    "ThreadId": "546922",
    "Html": "<pre><code>include(&quot;../includes/content/performatix.php&quot;);\ninclude(&quot;../public/PHPExcel_1.8.0/Classes/PHPExcel.php&quot;);   // import PHPExcel 1.8.0 classes\nerror_reporting(E_ALL);\nini_set('memory_limit', '8192M');\nini_set('display_errors', TRUE);\nini_set('display_startup_errors', TRUE);\ndefine('EOL',(PHP_SAPI == 'cli') ? PHP_EOL : '&lt;br /&gt;');\ndate_default_timezone_set('Africa/Johannesburg');\n$q = intval($_GET[&quot;q&quot;]);\nif (is_numeric($q)) {\n    if ($q &gt; 8 || $q &lt; 0) {\n        $q = 0;\n    }\n} else {\n    $q = 0;\n}\n$sid = $_GET[&quot;sid&quot;];\nif (is_numeric($sid)) {\n    if ($sid &gt; 17 || $sid &lt; 1) {\n        $sid = 1;\n    }\n} else {\n    $sid = 1;\n}\nfunction getrecords() {\n    global $conn, $sid;\n    $sql = &quot;SELECT * FROM 2_servicescatalogue ORDER BY text_ServiceDescription ASC;&quot;;\n    $result = mysql_query_errors($sql , $conn , __FILE__ , __LINE__);;\n    if ($result) {\n        while ($row = mysql_fetch_array($result)) {\n            echo &quot;  &lt;service sid=\\&quot;&quot; . $row[&quot;bigint_ServiceID&quot;] . &quot;\\&quot; desc=\\&quot;&quot; . xmlentities($row[&quot;text_ServiceDescription&quot;]) . &quot;\\&quot; selected=\\&quot;&quot;.(($row[&quot;bigint_ServiceID&quot;]==$sid)?&quot;selected\\&quot;&quot;:&quot;\\&quot;&quot;).&quot; &gt;\\n&quot;;\n            $sql1 = &quot;SELECT * FROM 3_serviceattributes WHERE bigint_AttributeServiceID = &quot;.$row[&quot;bigint_ServiceID&quot;].&quot; ORDER BY text_AttributeDescription ASC, smallint_ValueOrder ASC;&quot;;\n            $result1 = mysql_query_errors($sql1 , $conn , __FILE__ , __LINE__);;\n            if ($result1) {\n                while ($row1 = mysql_fetch_array($result1)) {\n                    echo &quot;      &lt;attribute id=\\&quot;&quot;.$row1[&quot;bigint_AttributeID&quot;].&quot;\\&quot; desc=\\&quot;&quot;.xmlentities($row1[&quot;text_AttributeDescription&quot;]).&quot;\\&quot; val=\\&quot;&quot;.xmlentities($row1[&quot;text_AttributeValue&quot;]).&quot;\\&quot; ord=\\&quot;&quot;.$row1[&quot;smallint_ValueOrder&quot;].&quot;\\&quot; ptr=\\&quot;&quot;.$row1[&quot;bigint_AttributeParentID&quot;].&quot;\\&quot; /&gt;\\n&quot;;\n                }\n            }\n            echo &quot;  &lt;/service&gt;\\n&quot;;\n        }\n        mysql_free_result($result);\n    }\n}\nfunction getarraykeys($sid, $cnt, $att) {\n    global $conn;\n    $att = explode(&quot;,&quot;,$att);\n    foreach ($att as $key-&gt;$value) {\n        if (stristr($value,&quot;;&quot;)!==FALSE) {\n            $i = 0;\n            $value = explode(&quot;;&quot;,$value);\n            foreach ($value as $val) {\n                if ($i == 0) {\n                    $att[$key] = &quot;(SA1.bigint_AttributeID = &quot;.$val;\n                } else {\n                    $att[$key] .= &quot; OR SA1.bigint_AttributeID = &quot;.$val;\n                }\n                $i++;\n            }\n            $att[$key] .= &quot;)&quot;;\n        } else {\n            $att[$key] = &quot;SA1.bigint_AttributeID = &quot;.$value;\n        }\n    }\n    $tsql = &quot;SELECT \n                 DISTINCT(SA0.text_AttributeDescription), \n                 SA0.bigint_AttributeID, \n                 (SA1.text_AttributeDescription LIKE SA0.text_AttributeDescription) AS selected \n             FROM \n                 3_serviceattributes SA0 \n             JOIN 3_serviceattributes SA1 ON (&quot;.implode(&quot; OR &quot;,$att).&quot;) \n             WHERE \n                 SA0.bigint_AttributeServiceID = &quot;.$sid.&quot; AND \n                 SA0.text_AttributeDescription != UPPER(SA0.text_AttributeDescription) \n             GROUP BY SA0.text_AttributeDescription \n             ORDER BY SA0.text_AttributeDescription ASC, SA0.bigint_AttributeID ASC&quot;;\n    $result = mysql_query_errors($tsql , $conn , __FILE__ , __LINE__);\n    if ($result) {\n        $i = 0;\n        echo &quot;  &lt;attributekeys cnt=\\&quot;&quot;.$cnt.&quot;\\&quot; ids=\\&quot;&quot;;\n        while ($row = mysql_fetch_array($result)) {\n            echo $row[&quot;bigint_AttributeID&quot;];\n            if ($i &lt; mysql_affected_rows($conn)-1) {\n                echo &quot;;&quot;;\n                $i++;\n            } else {\n                echo &quot;\\&quot;&quot;;\n                $i++;\n            }\n        }\n        $i = 0;\n        mysql_data_seek($result, 0);\n        echo &quot; keys=\\&quot;&quot;;\n        while ($row = mysql_fetch_array($result)) {\n            echo $row[&quot;text_AttributeDescription&quot;];\n            if ($i &lt; mysql_affected_rows($conn)-1) {\n                echo &quot;;&quot;;\n                $i++;\n            } else {\n                echo &quot;\\&quot;&quot;;\n                $i++;\n            }\n        }\n        echo &quot; /&gt;\\r\\n&quot;;\n        mysql_free_result($result);\n    }\n}\nfunction getarrayvals($sid = 0, $aid = 0, $cnt = 0) {\n    global $conn;\n    $aid = explode(&quot;;&quot;, $aid, $cnt);\n    $tsql = &quot;SELECT \n                 SA0.text_AttributeDescription, \n                 SA0.text_AttributeValue, \n                 SA0.bigint_AttributeID \n             FROM \n                 3_serviceattributes SA0 \n             WHERE (&quot;;\n             for ($i = 0; $i &lt; count($aid); $i++) {\n                 $tsql .= &quot; \n                 &quot;.(($i==0)?&quot;&quot;:&quot;OR &quot;).&quot;SA0.bigint_AttributeID = &quot;.$aid[$i];\n            }\n    $tsql .= &quot; \n             ) AND SA0.bigint_AttributeServiceID = &quot;.$sid.&quot; \n             GROUP BY SA0.text_AttributeDescription, SA0.text_AttributeValue \n             ORDER BY SA0.text_AttributeDescription ASC, SA0.text_AttributeValue ASC;&quot;;\n    $result = mysql_query_errors($tsql , $conn , __FILE__ , __LINE__);\n    if ($cnt == 0) $cnt = mysql_affected_rows($result);\n    if ($result) {\n        $i = 0;\n        echo &quot;  &lt;attributevals cnt=\\&quot;&quot;.$cnt.&quot;\\&quot; ids=\\&quot;&quot;;\n        while ($row = mysql_fetch_array($result)) {\n            echo $row[&quot;bigint_AttributeID&quot;];\n            if ($i &lt; mysql_affected_rows($conn)-1) {\n                echo &quot;;&quot;;\n                $i++;\n            } else {\n                echo &quot;\\&quot;&quot;;\n                $i++;\n            }\n        }\n        $i = 0;\n        mysql_data_seek($result, 0);\n        echo &quot; keys=\\&quot;&quot;;\n        while ($row = mysql_fetch_array($result)) {\n            echo $row[&quot;text_AttributeDescription&quot;];\n            if ($i &lt; mysql_affected_rows($conn)-1) {\n                echo &quot;;&quot;;\n                $i++;\n            } else {\n                echo &quot;\\&quot;&quot;;\n                $i++;\n            }\n        }\n        $i = 0;\n        mysql_data_seek($result, 0);\n        echo &quot; vals=\\&quot;&quot;;\n        while ($row = mysql_fetch_array($result)) {\n            echo $row[&quot;text_AttributeValue&quot;];\n            if ($i &lt; mysql_affected_rows($conn)-1) {\n                echo &quot;;&quot;;\n                $i++;\n            } else {\n                echo &quot;\\&quot;&quot;;\n                $i++;\n            }\n        }\n        echo &quot; /&gt;\\r\\n&quot;;\n        mysql_free_result($result);\n    }\n}\nfunction importancestrees($uploadfile=&quot;&quot;) {\n    \n}\nfunction replaceattributes($uploadfile=&quot;&quot;) {\n    \n}\nfunction breakdown($string = &quot;&quot;) {\n    $array1 = explode(&quot;|;|&quot;,$string);\n    $array = array();\n    for ($i = 2; $i &lt; count($array1); $i++) {\n        $array2 = explode(&quot;;;;&quot;,$array1[$i]);\n        $array[$array2[1]] = array();\n        $array[$array2[1]][0] = $array2[0];\n        $array[$array2[1]][1] = $array2[2];\n    }\n    return $array;\n}</code></pre>\n\n",
    "PostedDate": "2014-05-31T20:22:16.547-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1251649",
    "ThreadId": "546922",
    "Html": "hi Mark Baker! :D ok - meditated a bit, and i've realised that it's unfortunately TERRIBLY easy to fall into the MEMORY traps with PHPExcel! :o i've had a relook at my code whilst commenting it - and it is pasted below before i continue to test. just hope i avoided all the memory traps available on a [quad core Rackspace server with 40GB HDD and 1GB RAM] (<a href=\"http://31.222.157.140/mySpecs.html\" rel=\"nofollow\">http://31.222.157.140/mySpecs.html</a>) ;) here's the updated code now. ;)<br />\n<pre><code>    case 6: // upload xls document for reading ancestree(s) from\n        //getrecords(); // retrieve service's attribute records from performatix database\n        //$tabledata = explode(&quot;;,;&quot;,$_POST[&quot;list_tables&quot;]);\n        //$table = $tabledata[0];\n        //$file = $table.&quot;_&quot;.date(&quot;YmdHis&quot;,time()).&quot;.xls&quot;;\n        set_time_limit(7200);                                                           // increase time limit for php switch ($q) execusion\n        $updateorreplace = $_POST[&quot;radio_updateorreplace&quot;];                             // decide which code procedure to follow\n        $uploaddir = '../temp/';                                                        // set relative directory for uploads\n        $uploadfile = $uploaddir . basename($_FILES['file_importfile']['name']);        // get the relative file path of the upload\n        $firstname = $uploadfile;                                                       // set the initial name of the upload\n        $i=0;                                                                           // initiate the counter for similar filenames\n        if (file_exists($firstname)) {                                                  // if file already exists\n            $uploadfile = str_replace(&quot;.xls&quot;,&quot; (&quot;.$i.&quot;).xls&quot;,$firstname);               // append counter to end of filename within brackets\n            while (file_exists($uploadfile)) {                                          // loop while file exists\n                $i++;                                                                   // iterate counter\n                $uploadfile = str_replace(&quot;.xls&quot;,&quot; (&quot;.$i.&quot;).xls&quot;,$firstname);           // change uploadfile filename\n            }                                                                           // end while file exists loop\n        }                                                                               // end if file exists\n        if (move_uploaded_file($_FILES['file_importfile']['tmp_name'], $uploadfile)) {  // if uploaded file successfully moved to\n            echo &quot;  &lt;result&gt;Successfully uploaded \\&quot;&quot;.$uploadfile.&quot;\\&quot;.&lt;/result&gt;\\n&quot;;     // write upload status\n            ob_flush();                                                                 // ensure send of upload and move xml status\n            if ($updateorreplace==&quot;0&quot;) {                                                // if Update Existing Record Ancestree's\n                $inputFileType = PHPExcel_IOFactory::identify($uploadfile);             // Identify the type of $uploadfile\n                $objReader = PHPExcel_IOFactory::createReader($inputFileType);          // Create a new Reader of the type that has been identified\n                $objReader-&gt;setReadDataOnly(true);                                      // set this if you don't need to write (yet)\n                try {                                                                   // try clause\n                    $objPHPExcel = PHPExcel_IOFactory::load($uploadfile);               // Load $uploadfile to a PHPExcel Object\n                    $worksheetData = $objReader-&gt;listWorksheetInfo($uploadfile);        // list the worksheetinfo as $worksheetData\n                } catch(PHPExcel_Reader_Exception $e) {                                 // catch exceptions\n                    die('   &lt;result&gt;Error loading file: '.$e-&gt;getMessage()).'&lt;/result&gt;\\n'; // report error\n                }                                                                       // end try / catch clause\n                echo &quot;  &lt;workbook file=\\&quot;&quot;.$uploadfile.&quot;\\&quot; format=\\&quot;&quot;.$inputFileType.&quot;\\&quot;&gt;/n&quot;;   // export relative workbook location/filename and format\n                $wsi = 0;                                                               // instantiate worksheet counter\n                $xCol = &quot;A&quot;;                                                            // instantiate left column\n                $xRow = &quot;1&quot;;                                                            // intantiate top row\n                $yCol = &quot;A&quot;;                                                            // instantaite right column\n                $yRow = &quot;1&quot;;                                                            // instantiate bottom row\n                $keys = array();                                                        // instantiate the keys array\n                $_SESSION[&quot;keysvalues&quot;] = breakdown($_REQUEST[&quot;menu_services&quot;]);        // split service attribute key/value pairs as array data\n                foreach ($worksheetData as $worksheet) {                                // step through worksheets\n                    if (stristr($worksheet['worksheetName'],&quot;tier&quot;) !== false) {        // if worksheet contains biometric data\n                        $worksheetname = $worksheet['worksheetName'];                   // get the worksheetname\n                        $alpha = &quot;BCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;                           // instantiate the alphabetical characters\n                        $num = &quot;123456789&quot;;                                             // instantiate the numerical characters\n                        $objWorksheet = $objPHPExcel-&gt;setActiveSheetIndex($wsi);        // load the worksheet into memory for viewing\n                        $i = 0;                                                         // instantiate the horizontal index iterator\n                        $char = substr($alpha,$i,$i+1);                                 // instantiate the first horizontal character to find the top left dimention\n                        for ($n = 1; $n &lt; strlen($num); $i++) {                         // loop through the columns vertically to find the starting and ending numbers\n                            $digit = substr($num,$n,$n+1);                              // instantiate the first vertical digit\n                            $value = $objWorksheet-&gt;getCellByColumnAndRow($char, $digit)-&gt;getValue();   // get the value of the cell\n                            if ($value !== &quot;&quot; &amp;&amp; strlen($value) &lt; 24) {                 // if the value is not empty and the length is less than 24 (most form fields submitted are) also check if blue, has a border and is bold?\n                                $xCol = $char;                                          // set the left character\n                                array_push($keys, $value);                              // add to the collected keys array\n                                while (stristr($value, &quot;;&quot;)==false &amp;&amp;                   // loop horizontally and check that there are no ; in column values\n                                       stristr($value, &quot;,&quot;)==false &amp;&amp;                   // check that there are no comma's in values\n                                       !is_numeric($value) ||                           // check that there are no single numeric values on values\n                                       array_key_exists($value,$_SESSION[&quot;keysvalues&quot;]) // check wether the current value exists in the $keysvalues array\n                                       || $value !== &quot;&quot;) {                              // check wether the values are not empty\n                                    $char = substr($alpha,$i++,$i+1);                   // get next horizontal character\n                                    $xRow = $digit;                                     // set the top digit\n                                    $yCol = $char;                                      // get latest horizontal character\n                                    $value = $objWorksheet-&gt;getCellByColumnAndRow($char,// get next value\n                                                                   $digit)-&gt;getValue();\n                                    array_push($keys, $value);                          // save next &quot;header&quot; value to array\n                                }                                                       // end horizontal loop\n                                goto label0;                                            // jump to vertical loop exit point (label0)\n                            }                                                           // end if\n                        }                                                               // end vertical loop\n                        label0:                                                         // label0 (exit point)\n                        $yRow = $worksheet['totalRows'];                                // set the bottom row\n                        $objPHPExcel-&gt;disconnectWorksheets();                           // disconnect worksheets\n                        unset($objPHPExcel);                                            // unset objPHPExcel\n                        $objReader = PHPExcel_IOFactory::createReader($inputFileType);  // reset objReader\n                        $worksheetData = $objReader-&gt;listWorksheetInfo($uploadfile);    // reload worksheets\n                        echo &quot;      &lt;spreadsheet tab=\\&quot;&quot;.xmlentities($worksheetname).   // write spreadsheet dimentions to xml\n                                    &quot;\\&quot; dimensions=\\&quot;&quot;.$xCol.                           // top constraint\n                                    &quot;;&quot;.$xRow.                                          // left constraint\n                                    &quot;;&quot;.$yCol.                                          // bottom constraint\n                                    &quot;;&quot;.$yRow.                                          // right constraint\n                                    &quot;\\&quot; keys=\\&quot;&quot;.$keys.&quot;\\&quot; /&gt;\\n&quot;;                       // keys collected to build ancestree\n                    }                                                                   // end if worksheet contains biometric data \n                    $wsi++;                                                             // increment worksheet index\n                }                                                                       // end worksheet loop\n                echo &quot;  &lt;/workbook&gt;\\n&quot;;                                                 // end workbook data\n                echo &quot;  &lt;result&gt;File is valid, and was successfully uploaded as &quot;.      // export upload result status\n                     $uploadfile.&quot;.&lt;/result&gt;\\n&quot;;                                        // export location/filename\n            } elseif ($updateorreplace==&quot;0&quot;) {                                          // else if Replace Existing Attribute Record's\n                $inputFileType = PHPExcel_IOFactory::identify($uploadfile);             // (all work below is still to be resumed unrelated to current forum post)\n                $objReader = PHPExcel_IOFactory::createReader($inputFileType);          // Create a new Reader of the type that has been identified\n                $worksheetData = $objReader-&gt;listWorksheetInfo($uploadfile);            // list the worksheetinfo as $worksheetData\n                try {                                                                   // try clause\n                    $objPHPExcel = PHPExcel_IOFactory::load($uploadfile);               // Load $uploadfile to a PHPExcel Object\n                    $worksheetData = $objReader-&gt;listWorksheetInfo($uploadfile);        // list the worksheetinfo as $worksheetData\n                } catch(PHPExcel_Reader_Exception $e) {                                 // catch exceptions\n                    die('   &lt;result&gt;Error loading file: '.$e-&gt;getMessage()).'&lt;/result&gt;\\n'; // report error\n                }                                                                       // end try / catch clause\n                echo &quot;  &lt;workbook file=\\&quot;&quot;.$uploadfile.&quot;\\&quot; format=\\&quot;&quot;.$inputFileType.&quot;\\&quot;&gt;/n&quot;;   // export relative workbook location/filename and format\n                echo &quot;  &lt;/workbook&gt;\\n&quot;;                                                 // end workbook data// end workbook data// end workbook data// end workbook data\n            }                                                                           // end if $inputFileType clause\n        } else {                                                                        // id uploaded file not successfully moved to\n            echo &quot;  &lt;result&gt;File upload failed!&lt;/result&gt;\\n&quot;;                            // export upload failure status\n        }                                                                               // end if upload successful clause\n        //echo '    &lt;result&gt;Debugging info:\\n';\n        //foreach ($_FILES as $file) {\n        //  echo implode(&quot;  &quot;,$file).&quot;\\n&quot;;\n        //}\n        //echo '&lt;/result&gt;';\n        break;</code></pre>\n\nand here is the breakdown function, with the specific purpose of taking a string as argument and breaking it down into an array to match attribute keys and return id's for processing in the next step. ;)<br />\n(had to replace previous post due to max post length &quot;impositions&quot; - i also included the other functions which have mysql calls - but i am keeping them on different instances of the file <a href=\"http://www.example.com\" rel=\"nofollow\">https://blah/scripts/ajax_attributes.php?q=6</a> (sofar is the only one which uses PHPExcel and 0 MySQL queries.))<br />\n",
    "PostedDate": "2014-05-31T20:35:40.75-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]