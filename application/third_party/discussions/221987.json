[
  {
    "Id": "474696",
    "ThreadId": "221987",
    "Html": "<p>I've tested on a small range and the various cache engines are accepted and change the memory use.</p>\r\n<p>So I can at least confirm it is no jedi mind trick.</p>\r\n<table style=\"border-collapse:collapse\" border=0 cellspacing=0 cellpadding=0 width=368 height=173>\r\n<col style=\"width:143pt\" width=190> <col style=\"width:48pt\" width=64> \r\n<tbody>\r\n<tr style=\"height:15pt\" height=20>\r\n<td style=\"height:15pt;width:143pt\" width=190 height=20>\r\n<p>cache_to_discISAM</p>\r\n</td>\r\n<td align=right>22 M<br></td>\r\n</tr>\r\n<tr>\r\n<td>cache_in_memory_serialized</td>\r\n<td align=right>21 M<br></td>\r\n</tr>\r\n<tr height=20>\r\n<td height=20>cache_in_memory</td>\r\n<td align=right>32 M<br></td>\r\n</tr>\r\n<tr>\r\n<td>cache_to_phpTemp</td>\r\n<td align=right>\r\n<p>22 M</p>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>This thread http://phpexcel.codeplex.com/Thread/View.aspx?ThreadId=203384 has a table with an extra cache strategy</p>\r\n<p>Disk (Full) cell storage (using a temporary file for each cell)</p>\r\n<p>How do I set this up ?</p>\r\n<p>as I am failing on memory_limit 256M</p>",
    "PostedDate": "2010-07-30T04:30:45.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "474704",
    "ThreadId": "221987",
    "Html": "<p>Disk (Full) Cell Storage was never released because it was so slow as to be unusable, as can be seen from the results table:</p>\r\n<table border=1 cellspacing=2 cellpadding=2>\r\n<tbody>\r\n<tr>\r\n<th valign=bottom>Cell Storage Method</th><th valign=bottom>Memory Usage<br>(MB)</th><th>Cell Creation time<br>(seconds for<br>16,384 cells)</th><th>Cell retrieve time<br>(seconds for<br>16,384 cells)</th><th>\r\n<p>Cell modify time<br>(seconds for<br>16,384 cells)</p>\r\n</th>\r\n</tr>\r\n<tr>\r\n<td>Current cell storage (at 1.7.2 release)</td>\r\n<td align=right>12.25</td>\r\n<td align=right>0.2293</td>\r\n<td align=right>0.0674</td>\r\n<td align=right>0.2117</td>\r\n</tr>\r\n<tr>\r\n<td>Serialized cell storage</td>\r\n<td align=right>9</td>\r\n<td align=right>0.4141</td>\r\n<td align=right>0.3384</td>\r\n<td align=right>1.5574</td>\r\n</tr>\r\n<tr>\r\n<td>APC cell storage</td>\r\n<td align=right>0</td>\r\n<td align=right>0.9113</td>\r\n<td align=right>0.5387</td>\r\n<td align=right>2.8961</td>\r\n</tr>\r\n<tr>\r\n<td>Memcache cell storage</td>\r\n<td align=right>0</td>\r\n<td align=right>11.6727</td>\r\n<td align=right>5.6859</td>\r\n<td align=right>18.4403</td>\r\n</tr>\r\n<tr>\r\n<td>Disk (Partial) cell storage<br>(using an ISAM file for all cells)</td>\r\n<td align=right valign=top>4.75</td>\r\n<td align=right valign=top>1.0742</td>\r\n<td align=right valign=top>0.7211</td>\r\n<td align=right valign=top>2.9781</td>\r\n</tr>\r\n<tr>\r\n<td>Disk (Full) cell storage<br>(using a temporary file for each cell)</td>\r\n<td align=right valign=top>0</td>\r\n<td align=right valign=top>45.04405</td>\r\n<td align=right valign=top>10.4741</td>\r\n<td align=right valign=top>66.5842</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>Cell caching is a trade-off between reduced memory usage and increased execution time, and I made an arbitrary decision that taking over a minute to read/modify/rewrite just 16,384 cells (compared with sub 3 seconds for most of the other caching methods) was too much speed overhead for the memory gain that it provided... especially when compared with cache_to_discISAM or cache_to_phpTemp.</p>\r\n<p>&nbsp;</p>\r\n<p>In practise, none of the cell caching mechanisms reduces cell memory usage to 0. As a further compromise, the cell caching engine still retains an array of cell IDs in memory to reduce the performance overheads of identifying whether a cell exists or not, or to retrieve a list of the cells in a row or column. 100% caching is just too slow, and this trade-off allowed some reduction in memory usage (allowing more than double the size of worksheets to be held in the same memory as previous versions) while retaining an acceptable level of execution time.</p>\r\n<p>I'd love to be able to do full caching, including that array, but (for the moment at least) it simply isn't practical.</p>\r\n<p>&nbsp;</p>\r\n<p>We are still actively trying to reduce the memory footprint further, and I am still running performance tests on other potential improvements, particularly in the writers to see where we can make additional savings, but haven't highlighted any significant gains as yet. I've also been playing with a method for dynamically increasing and reducing PHP memory as needed (although this isn't always an option in shared hosting environments), while still keeping to a minimum so that concurrent server requests aren't being adversely affected, and this <em>may </em>appear in the next release.</p>",
    "PostedDate": "2010-07-30T04:59:56.66-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "474738",
    "ThreadId": "221987",
    "Html": "<p>Hi Mark</p>\r\n<p>&nbsp;&nbsp;&nbsp; $cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_to_phpTemp;<br>&nbsp;&nbsp;&nbsp; $cacheSettings = array( ' memoryCacheSize '&nbsp; =&gt; '256MB' );<br><br>&nbsp;&nbsp;&nbsp; peak memory usage of 46M for 498 products<br>&nbsp;&nbsp;&nbsp; peak memory usage of 52M for 598 products<br>&nbsp;&nbsp;&nbsp; peak memory usage of 78M for 998 products<br>&nbsp;&nbsp;&nbsp; peak memory usage of 2000 products :=<br>&lt;b&gt;Fatal error&lt;/b&gt;:&nbsp; <br>&nbsp; Call to a member function attach() on a non-object in <br>&nbsp; &lt;b&gt;/home/potncom/public_html/supplyant/PHPExcel/Classes/PHPExcel/CachedObjectStorage/PHPTemp.php&lt;/b&gt; on line &lt;b&gt;98&lt;/b&gt;&lt;br /&gt;</p>\r\n<p>I wasn't expecting that.</p>\r\n<p>Are there any guidelines for cache size setting and tradoffs ?</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-07-30T06:30:15.8-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]