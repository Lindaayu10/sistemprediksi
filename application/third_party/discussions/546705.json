[
  {
    "Id": "1250031",
    "ThreadId": "546705",
    "Html": "I need help in structuring my code to prevent this error.<br />\n<blockquote>\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 19 bytes) in d:\\php\\Classes\\PHPExcel\\Cell.php on line 130<br />\n</blockquote>\nMy platform is:<br />\nWindows xP<br />\nPHP 5.3<br />\nPHPExcel 1.7.6<br />\n<br />\nWhen I attempt to write 3K+ records with 39 columns it runs out of memory in either the cell.php or worksheet.php app.<br />\n<br />\nNote - the app has no problem when I only attempt to export a few records.<br />\n<br />\nHere  is my code (if this insufficient to provide help please suggest what else I can show)<br />\n<pre><code>&lt;?php\ntry \n{\n    require_once 'PHPExcel.php';\n\n    $Excel = new PHPExcel();\n    $objSheet = &quot;&quot;;\n\n    class setupFunctions\n    {\n        .............................\n        function defaultFields()\n        {\n            global $aFieldList,$defaultSelect...;\n\n            //setup column labels for output\n            $aFieldList =  array( 'l1', 'l2', 'l3',......);\n\n            //setup revised sql select\n            $defaultSelect  = 'select f1, f2, f3.....';\n            return;\n        }\n\n        ..............\n        function setUpExcel()\n        {\n            global $Excel, $objSheet, $cWorkSheetName;\n\n            $Excel-&gt;getDefaultStyle()-&gt;getFont()-&gt;setName('Arial');\n            $Excel-&gt;getDefaultStyle()-&gt;getFont()-&gt;setSize(10);\n            $Excel-&gt;getDefaultStyle()-&gt;getAlignment()-&gt;setVertical(PHPExcel_Style_Alignment::VERTICAL_TOP);\n            $Excel-&gt;getActiveSheet()-&gt;getPageSetup()-&gt;setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_PORTRAIT);\n            $Excel-&gt;getActiveSheet()-&gt;getPageSetup()-&gt;setFitToPage(false);\n            $Excel-&gt;getActiveSheet()-&gt;getPageSetup()-&gt;setScale(100);\n            $Excel-&gt;getActiveSheet()-&gt;getPageSetup()-&gt;setHorizontalCentered(false);\n            $Excel-&gt;getActiveSheet()-&gt;getPageSetup()-&gt;setRowsToRepeatAtTopByStartAndEnd(1,1);\n            $Excel-&gt;getActiveSheet()-&gt;getPageSetup()-&gt;setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_LETTER);\n            $Excel-&gt;getActiveSheet()-&gt;getHeaderFooter()-&gt;setOddFooter('&amp;C&amp;B Printed on &amp;D &amp;T &amp;R&amp;B Page &amp;P of &amp;N');\n\n            $objSheet = $Excel-&gt;getActiveSheet();\n            $objSheet-&gt;setTitle($cWorkSheetName);\n            $objSheet-&gt;setShowGridlines(true);\n        }\n\n    } //end setupFunctions class;\n    $pl = new setupFunctions;\n\n    $aFieldList = array();/*column header list*/\n    $defaultSelect = &quot;&quot;;/*default list of fields if user does not select specific fields*/\n    .....\n    $pl-&gt;defaultFields();\n    ........\n    $sql = $defaultSelect.' from &lt;my table&gt;....';\n\n    if ( $result = $mysqli-&gt;query($sql) )\n    {\n        if ($result-&gt;num_rows &gt; 0)\n        {\n            ...\n            $cWorkSheetName = &quot;Client&quot;;\n            ....\n            /*output is an xls spreadsheet*/\n            $pl-&gt;setUpExcel();\n\n            /* add header row */\n            $cFile = &quot;Adhoc_summary_report_of_&quot;.$cWorkSheetName.&quot;_records&quot;;\n            $row = 1; // 1-based index\n            $col = 0;\n            for($i=0; $i &lt; count($aFieldList); $i++) {\n                $Excel-&gt;getActiveSheet()-&gt;setCellValueByColumnAndRow($col, $row, $aFieldList[$i]);\n                $col++;\n            }\n\n            /*add content*/\n            $row++;\n            while($row_data = $result-&gt;fetch_assoc()) {\n                $col = 0;\n                foreach($row_data as $key=&gt;$value) {\n                    ....................................\n                    $Excel-&gt;getActiveSheet()-&gt;setCellValueByColumnAndRow($col, $row, $thisVal);\n                    $col++;\n                }\n                $row++;\n            }\n\n            /*adjust column width for each column*/\n            $nCols = count($aFieldList); //set the number of columns\n\n            foreach (range(0, $nCols) as $col) {\n                $Excel-&gt;getActiveSheet()-&gt;getColumnDimensionByColumn($col)-&gt;setAutoSize(true);                \n            }\n            require_once 'PHPExcel\\IOFactory.php';   \n            header('Content-Type: application/vnd.ms-excel');\n            header('Content-Disposition: attachment;filename =&quot;'.$cFile.'.xls&quot;');\n            header('Cache-Control: max-age=0');\n            $objWriter = PHPExcel_IOFactory::createWriter($Excel, 'Excel5');\n            $objWriter-&gt;save('php://output');\n            exit;\n        }else{\n            throw new Exception(&quot;No matching records found. Try typing in less in your search request.&quot;);\n        }\n    }else{\n        throw new Exception(&quot;Query failed!.&quot;);\n    }\n}\n\ncatch (exception $e) \n{\n    echo 'An error occured&lt;br/&gt;'.$e-&gt;getMessage();\n}\n\n?&gt;</code></pre>\n\n",
    "PostedDate": "2014-05-27T07:27:20.097-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1250055",
    "ThreadId": "546705",
    "Html": "Start by looking at the options for cell caching<br />\n",
    "PostedDate": "2014-05-27T07:57:53.777-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1250066",
    "ThreadId": "546705",
    "Html": "Thanks. <br />\n",
    "PostedDate": "2014-05-27T08:15:36.313-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1250135",
    "ThreadId": "546705",
    "Html": "Looked at some of the simple ways to cache the cell memory, to no avail.<br />\n<br />\nReviewed Kim Steinhaug suggestion on Jan 7, 2011 at 11:02 AM and tried the following methods outlined in the documentation on my version of PHPExcel in chapter 4.2.1<br />\n<blockquote>\n// Initiate cache<br />\n$cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_to_phpTemp;<br />\n$cacheSettings = array( 'memoryCacheSize' =&gt; '32MB');<br />\nPHPExcel_Settings::setCacheStorageMethod($cacheMethod, $cacheSettings);<br />\n</blockquote>\nI inserted the following in my code<br />\n<pre><code>    require_once 'PHPExcel.php';\n\n    $Excel = new PHPExcel();\n            // Initiate cache\n//          $cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_to_phpTemp;\n//          $cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_to_discISAM;\n//          $cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_in_memory_serialized;\n            $cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_in_memory;\n            $cacheSettings = array( 'memoryCacheSize' =&gt; '128MB');\n            PHPExcel_Settings::setCacheStorageMethod($cacheMethod, $cacheSettings);</code></pre>\n\nNot really sure how to get the other options installed as my previous attempt to use Pear have been unsuccessful:<br />\n<pre><code>PHPExcel_CachedObjectStorageFactory::cache_to_apc;\nPHPExcel_CachedObjectStorageFactory::cache_to_memcache;\nPHPExcel_CachedObjectStorageFactory::cache_to_wincache;</code></pre>\n\nSince I am working on a Windows platform, Do I need to do the following:<br />\n<ol>\n<li>Have Pear installed</li>\n<li>Have to compile each of these and their dependencies files as well</li>\n<li>\nThen adjust the php.ini file to reference the related app<br />\n</li>\n</ol>\nOr is there some simpler way to do this?<br />\n",
    "PostedDate": "2014-05-27T10:33:17.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]