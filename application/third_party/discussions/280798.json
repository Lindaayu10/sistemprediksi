[
  {
    "Id": "703245",
    "ThreadId": "280798",
    "Html": "\r\n<p>Hi folks,</p>\r\n<p>I have a class with a function import() which worked correct while NOT reading a file in Excel5 format in chunks.<br>\r\nNow I changed it to read the file in chunks and it behaves in a strange way. Maybe I am missing something or made a mistake somewhere...</p>\r\n<p>This is what happens:</p>\r\n<p>Assume I set the chunk size to 10 for testing purposes.</p>\r\n<p>The first loop through the read chunk loop correctly returns the cells of the first 10 rows.</p>\r\n<p>The second loop through the read chunk loop returns 10 rows of empty cells (but correct amount of cells) PLUS the cells of the next 10 rows!</p>\r\n<p>All loops after that again return the cells of 10 rows like expected.</p>\r\n<p>To make it more clear:</p>\r\n<p>1st loop:<br>\r\n&nbsp;- 10 rows with correct data of the cells<br>\r\n2nd loop:<br>\r\n&nbsp;- 10 rows with returning empty cell data<br>\r\n&nbsp;- 10 rows with correct data of the cells<br>\r\nAll further loops:<br>\r\n&nbsp;- 10 rows with correct data of the cells</p>\r\n<p>While all that, $objWorksheetRow-&gt;getRowIndex() always returns the correct index number, which means, in the first loop 1 to 10, but in the second loop 1 to 20, since the 3rd loop again 1 to 10.</p>\r\n<p>It seems I missed something or made a mistake. - I already stripped down my code as far as possible to run debug-tests but can't find the what's wrong. Maybe I'm blind =-(</p>\r\n<p>Could someone please take a look at my stripped down example code? - I searched for the reason for two days now and am somewhat desperate.</p>\r\n<p>Many thanks in advance!</p>\r\n<p><strong>Here's some stripped down code:</strong></p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> chunkReadFilter <span style=\"color:blue\">implements</span> PHPExcel_Reader_IReadFilter {\r\n\t<span style=\"color:blue\">private</span> $_startRow = 0;\r\n\t<span style=\"color:blue\">private</span> $_endRow = 0;\r\n\t<span style=\"color:blue\">private</span> $_columnLetters = <span style=\"color:blue\">array</span>();\r\n\t<span style=\"color:blue\">private</span> $_worksheet_name = <span style=\"color:#a31515\">''</span>;\r\n\r\n\t<span style=\"color:green\">/**  Set the list of rows that we want to read  */</span>\r\n\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> setRows($startRow, $chunkSize) {\r\n\t\t$this-&gt;_startRow\t= $startRow;\r\n\t\t$this-&gt;_endRow\t\t= $startRow &#43; $chunkSize;\r\n\t}\r\n\r\n\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> setColumns($columnLetters) {\r\n\t\t$this-&gt;_columnLetters\t= $columnLetters;\r\n\t}\r\n\r\n\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> setWorksheetName($worksheet_name) {\r\n\t\t$this-&gt;_worksheet_name\t= $worksheet_name;\r\n\t}\r\n\r\n\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> readCell($column, $row, $worksheetName = <span style=\"color:#a31515\">''</span>) {\r\n\t\t<span style=\"color:blue\">if</span> (count($this-&gt;_columnLetters) &gt; 0) {\r\n\t\t\t<span style=\"color:blue\">if</span> ( $row &gt;= $this-&gt;_startRow &amp;&amp; $row &lt; $this-&gt;_endRow &amp;&amp; $this-&gt;_worksheet_name == $worksheetName &amp;&amp; array_search($column, $this-&gt;_columnLetters) !== FALSE) {\r\n\t\t\t\t<span style=\"color:blue\">return</span> TRUE;\r\n\t\t\t}\r\n\t\t}\r\n\t\t<span style=\"color:blue\">else</span> {\r\n\t\t\t<span style=\"color:blue\">if</span> ( $row &gt;= $this-&gt;_startRow &amp;&amp; $row &lt; $this-&gt;_endRow &amp;&amp; $this-&gt;_worksheet_name == $worksheetName ) {\r\n\t\t\t\t<span style=\"color:blue\">return</span> TRUE;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t<span style=\"color:green\">// Just for debugging:</span>\r\n\t\t<span style=\"color:blue\">if</span> ( ! defined(<span style=\"color:#a31515\">'SKIPPING_STARTTIME'</span>) ) {\r\n\t\t\tdefine(<span style=\"color:#a31515\">'SKIPPING_STARTTIME'</span>, microtime(TRUE));\r\n\t\t}\r\n\r\n\t\t<span style=\"color:blue\">return</span> FALSE;\r\n\t}\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p><strong>The next part of code is inside a class in my import function:</strong></p>\r\n<p><strong>class ...</strong></p>\r\n<p><strong>function ...<br>\r\n</strong></p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>$this-&gt;objReader = PHPExcel_IOFactory::createReader($this-&gt;import_session[<span style=\"color:#a31515\">'inputFileType'</span>]);\r\n\r\n$this-&gt;objReader-&gt;setLoadSheetsOnly($this-&gt;import_session[<span style=\"color:#a31515\">'worksheetName'</span>]);\r\n\r\n$this-&gt;objReader-&gt;setReadDataOnly(TRUE);\r\n\r\n$this-&gt;chunkFilter = <span style=\"color:blue\">new</span> chunkReadFilter();\r\n\r\n$this-&gt;objReader-&gt;setReadFilter($this-&gt;chunkFilter);\r\n\r\n$first_row = 1;\r\n\r\n$this-&gt;chunkFilter-&gt;setWorksheetName($this-&gt;import_session[<span style=\"color:#a31515\">'worksheetName'</span>]);\r\n\r\n<span style=\"color:blue\">for</span> ($StartRow = $first_row; $StartRow &lt;= $this-&gt;import_session[<span style=\"color:#a31515\">'HighestRow'</span>]; $StartRow &#43;= $this-&gt;chunkSize) {\r\n\t$this-&gt;chunkFilter-&gt;setRows($StartRow, $this-&gt;chunkSize);\r\n\r\n\t<span style=\"color:blue\">try</span>\t{\r\n\t\t$this-&gt;objPHPExcel = $this-&gt;objReader-&gt;load($inputFileName);\r\n\t}\r\n\t<span style=\"color:blue\">catch</span>(Exception $e) {\r\n\t\t$GLOBALS[<span style=\"color:#a31515\">'objMessagestack'</span>]-&gt;add_message(<span style=\"color:#a31515\">'%s, line %s: %s!'</span>, <span style=\"color:#a31515\">'error'</span>, FALSE, <span style=\"color:blue\">array</span>(basename(<span style=\"color:blue\">__FILE__</span>), <span style=\"color:blue\">__LINE__</span>, $e-&gt;getMessage()));\r\n\t}\r\n\r\n\t$this-&gt;objPHPExcelWorksheet = $this-&gt;objPHPExcel-&gt;getSheet($this-&gt;import_session[<span style=\"color:#a31515\">'selected_worksheet_id'</span>]);\r\n\r\n\t<span style=\"color:blue\">foreach</span> ($this-&gt;objPHPExcelWorksheet-&gt;getRowIterator() AS $objWorksheetRow) {\r\n\t\t$chunk_row_idx = $objWorksheetRow-&gt;getRowIndex();\r\n\r\n\t\t$cellIterator = $objWorksheetRow-&gt;getCellIterator();\r\n\r\n\t\t$cellIterator-&gt;setIterateOnlyExistingCells(FALSE); <span style=\"color:green\">// Loop all cells, even if it is not set</span>\r\n\r\n\t\t<span style=\"color:blue\">foreach</span> ($cellIterator <span style=\"color:blue\">as</span> $cell) {\r\n\t\t\t<span style=\"color:green\">// Collect the data of the row:</span>\r\n\t\t\t$cell-&gt;setDataType(PHPExcel_Cell_DataType::TYPE_STRING);\r\n\t\t\t$cellvalue = $cell-&gt;getCalculatedValue();\r\n\r\n\t\t\t... process $cellvalue ...\r\n\t\t}\r\n\r\n\t} <span style=\"color:green\">// End getRowIterator</span>\r\n} <span style=\"color:green\">// End Chunk reading</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2011-11-24T23:19:46.553-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "703306",
    "ThreadId": "280798",
    "Html": "<p>Sorry, I made a mistake describing the strange behavior, I interrupted the script too early to notice that.</p>\r\n<p>Not all loops since the second loop are OK:</p>\r\n<p>It behaves like this:</p>\r\n<p>loop 1:<br /> &nbsp;- 10 rows with correct data of the cells</p>\r\n<p>since 2nd loop:<br /> &nbsp;- (loop-nr - 1) * 10 rows with returning empty cell data<br /> &nbsp;- 10 rows with correct data of the cells</p>\r\n<p>Again: Thanks in advance for every hint.</p>\r\n<p>Yours Henri</p>",
    "PostedDate": "2011-11-25T02:36:54.603-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "704131",
    "ThreadId": "280798",
    "Html": "<p>This is expected behaviour... PHPExcel still reads cell data to the correct cell addresses, it simply reads a defined block of cell addresses rather than reading the entire workbook in one go. So if you tell it to read cells A10 to E20, it will read these cells as A10 to E20, <strong>not </strong>as A1 to E11.</p>",
    "PostedDate": "2011-11-28T05:11:00.887-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "704317",
    "ThreadId": "280798",
    "Html": "<p>First of all: Many thanks for your reply Mark.</p>\r\n<p>But.. Sorry, I don't understand your answer:</p>\r\n<p>What do you mean with: A10 to E20? - All cells from column A row 10 to column E row 20 ?</p>\r\n<p>And how is that related to my problem?</p>\r\n<p>Am I wrong with the following understanding?</p>\r\n<p>Let's say I have 100 rows and columns from A - Z</p>\r\n<p>-&nbsp; Shouldn't $this-&gt;objPHPExcelWorksheet-&gt;getRowIterator() give me all $objWorksheetRow s that were not filtered out by the chunkFilter when objReader-&gt;load(...)?<br />-&nbsp; Which means when I have a chunkSize of 10 it should give me ten $objWorksheetRow s for the rows from $StartRow to ($StartRow + $this-&gt;chunkSize - 1)<br />-&nbsp; Shouldn' it then always count when $chunk_row_idx = $objWorksheetRow-&gt;getRowIndex(); from 1 to 10?<br />-&nbsp; Shouldn't the cellIterator give me all cells of one row and not more?</p>\r\n<p>So, is the method to use a row-iterator and a cell-iterator not the best solution when reading a worksheet in chunks?</p>\r\n<p>Should I better manually count rows and cols and retrieve the cell's data with $this-&gt;objPHPExcelWorksheet-&gt;getCellByColumnAndRow($col, $row)-&gt;getCalculatedValue() ?</p>\r\n<p>Many thanks in advance,<br />&nbsp;&nbsp;&nbsp; yours Henri</p>",
    "PostedDate": "2011-11-28T10:38:56.897-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "704341",
    "ThreadId": "280798",
    "Html": "<p>The chunk filter is applied to the reader, so in the second iteration (with start 10, size 10) it reads only cells in rows 10 to 19 from the workbook file. Rows 1-9 are empty rows, containing no cells, because they are not read from the workbook file. The filter does not, however, affect anything other than the reader, so it has no effect on the rowIterator at all. The rowIterator always starts with row 1, so it will still iterate over the initial empty rows before reaching row 10 and the other rows that have actually been read from the workbook file: effectively, the behaviour is setIterateOnlyExistingRows(FALSE); - although there is no option to change this.</p>\r\n<p>I'll look&nbsp;to provide a method to set the start row for a rowiterator, both in the constructor and as a manually callable method.</p>",
    "PostedDate": "2011-11-28T11:43:06.37-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "704438",
    "ThreadId": "280798",
    "Html": "<p>Ahaaaa... :-) Many thanks for that answer Mark, now it's clear to me.</p>\n<p>&nbsp;</p>\n<p>You also wrote. \"I'll look&nbsp;to provide a method to set the start row for a rowiterator, both in the constructor and as a manually callable method.\"...</p>\n<p>That would be fine for future codings with PHPExcel, but if it would be possible, it would even be better (only for the reading of a row-range) to provide a method like...</p>\n<div style=\"color: black; background-color: white;\">\n<pre>$objReader-&gt;load($inputFileName, $first_row_to_load, $last_row_to_load);\n</pre>\n</div>\n<p>...which would really only iterate to load from $first_row_to_load until $last_row_to_load without the need of the filter.<br /> <br /> If it's not possible to really directly set a pointer to let's say row $first_row_to_load to start loading, it would at least be very useful to be able to \"break\" loading after loading of $last_row_to_load.</p>\n<p>The reason is, that if I have a worksheet with 60000 rows with about 20 columns, read in chunks of 1000 rows (and such big files have to be read in chunks with PHPExcel), even filtering out the other 59000 rows once needs about 3 minutes depending on the  processor-power of the computer. And this has to be done 60 times!<br /> This means that ONLY the skipping of the rows when read in chunks of 1000 rows needs one to several hours for the whole file when using a chunkFilter! - Really loading the not skipped cells needs additional time.</p>\n<p>&nbsp;</p>\n<p>I also make extensive use of the new method listWorksheetInfo described in http://phpexcel.codeplex.com/discussions/259971 and expecially of my little extension for it to return also an array of all column-letters  and my method compareColumnLetters(...) which are very, very useful.<br /> Maybe you like to take a look at the thread and think about adding it also to PHPExcel.</p>\n<p>Again, many thanks for your help and great effort on this project,<br /> &nbsp;&nbsp;&nbsp; yours Henri</p>",
    "PostedDate": "2011-11-28T14:47:58.203-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]