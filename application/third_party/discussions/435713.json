[
  {
    "Id": "1011645",
    "ThreadId": "435713",
    "Html": "Hi,\r<br />\n<br />\nI'm dealing with a large chunk of rows record file. Apparently, I've managed to get all the data, and re-constructed it into an array as per below:<br />\n<pre><code>$lines_data = array(\n  ['A1'] =&gt; 'id',\n  ['B1'] =&gt; 'fname',\n  ['C1'] =&gt; 'postalcode',\n.....\n  ['BK1'] =&gt; 'customhead30',\n  ['BL1'] =&gt; 'customval30',\n.....\n  ['A2'] =&gt; '1001',\n  ['B2'] =&gt; 'sarah',\n  ['C2'] =&gt; '06950',\n.....\n  ['BK2'] =&gt; 'dept',\n  ['BL2'] =&gt; 'IT',\n.....\n);</code></pre>\n\nAfter finished constructing the array, I proceed with the Excel Writing. While debugging, I captured the load time for the array reconstruction, and it just run for less than 0.9 second for about 6K of data. Which I consider acceptable.\r<br />\n<br />\nHowever, After the process of writing into Excel started, the time runs exceed beyond my expectation, which from test, around 20-25 seconds.<br />\n<pre><code>foreach ($lines_data as $key_cols =&gt; $write){\n    if (array_key_exists($key_cols, $text_format_array)){ //set formatting for some selected data\n        $objPHPExcel-&gt;getActiveSheet()-&gt;getCell($key_cols)\n                            -&gt;setValueExplicit($write, PHPExcel_Cell_DataType::TYPE_STRING); //set as text if this is the selected data\n    } else {\n        $objPHPExcel-&gt;getActiveSheet()-&gt;setCellValue($key_cols, $write); //default formatting\n    }\n}</code></pre>\n\nIt checks with another sets of array that contains cells that need to be formatted into text as per array sample below:<br />\n<pre><code>$text_format_array = array(\n    ['C2'] =&gt; 'C2',\n    ['C3'] =&gt; 'C3',\n    ['C4'] =&gt; 'C4',\n......\n);\n</code></pre>\n\nDoes this slow-ness issues is coming from checking for the formatting of selected cells, or I'm doing this wrong?\r<br />\n<br />\nAny Idea about this?\r<br />\n<br />\nThanks in advance.<br />\n",
    "PostedDate": "2013-03-07T02:22:15.137-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1012966",
    "ThreadId": "435713",
    "Html": "Hum... A few ideas...\r<br />\nIf you pre-built an array with the data, why not make more depending on the data type (or an array with an extra dimension that contains the type)? This would prevent the test in the loop. On the other hand, there should be multiple loops (or two nested loops).\r<br />\nUse setValueExplicit is a good idea, but why limit to the String type.\r<br />\n<br />\nAlternative: as you have many columns, the fromArray method could make a profit, by writing a whole line at once, unfortunately, this method does not support the explicit declaration of the type.\r<br />\nDepending on the source of your data, this could prevent you from getting to build your first table: a query returns an array that you pass directly to PHPExcel\r<br />\n<br />\nTest one and other should not ask for writing lots of code.\r<br />\n<br />\nI'm not sure that your method takes so long that, but you can measure it by not doing other actions within the loop.\r<br />\nYour table $texte_format_array containing keys and values identical, why not fill it only with values and test with in_array?<br />\n",
    "PostedDate": "2013-03-10T09:46:06.803-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013070",
    "ThreadId": "435713",
    "Html": "<strong>LWol wrote:</strong><br />\n<blockquote>\nHum... A few ideas...<br />\nIf you pre-built an array with the data, why not make more depending on the data type (or an array with an extra dimension that contains the type)? This would prevent the test in the loop. On the other hand, there should be multiple loops (or two nested loops).<br />\n</blockquote>\nInitially, I have done the nested loop. But, I think the nested loop are slowing down the performance of the process, so I make it to run only one loop.<br />\n<blockquote>\nUse setValueExplicit is a good idea, but why limit to the String type.<br />\n</blockquote>\nAs of now, I only need the String type to be formatted for certain cells. The rest can just use default formatting. However, as per your suggestion, I can try putting the type as the key, i.e:<br />\n<pre><code>$lines_data = array(\n  ['A1_default'] =&gt; 'id',\n  ['B1_default'] =&gt; 'fname',\n  ['C1_string'] =&gt; 'postalcode',\n.....</code></pre>\n\nOr you have any other suggestion that might make this thing easier. If possible, I would like to avoid using multidimensional array as it would require writing a nested loop.<br />\n<blockquote>\nAlternative: as you have many columns, the fromArray method could make a profit, by writing a whole line at once, unfortunately, this method does not support the explicit declaration of the type.<br />\nDepending on the source of your data, this could prevent you from getting to build your first table: a query returns an array that you pass directly to PHPExcel<br />\n<br />\nTest one and other should not ask for writing lots of code.<br />\n</blockquote>\nI tried using the fromArray method, but resulting in error. Apparently, the method tried to generate the cell coordinate automatically, in which I already supply the coordinates beforehand. I'm not sure whether I'm using it correctly or not, but, AFAIK, the usage is quite straight forward. However, if you could provide me with some sample that I can follow, then, maybe I can try to re-adjust the code as per your sample.<br />\n<blockquote>\nI'm not sure that your method takes so long that, but you can measure it by not doing other actions within the loop.<br />\nYour table $texte_format_array containing keys and values identical, why not fill it only with values and test with in_array?<br />\n</blockquote>\nIf I merge the type together with the keys as per illustrated above, this will not be an issue anymore, right?<br />\n<br />\nAll and all, thanks for the suggestion. I'll try it and provide with some result later.<br />\n",
    "PostedDate": "2013-03-10T20:59:27.77-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013347",
    "ThreadId": "435713",
    "Html": "You need to impose the formatting for some cells, such as a postal code that can begin with a zero, but is not the sole purpose of setValueExplicit, its use avoids PHPExcel wasting time to divination.\r<br />\nHence my suggestion to create your data tables based on this: you have no test in loops.\r<br />\n$stringArray = array('A1'='&gt;Name&quot;, 'B1'=&gt;Town, 'C1'=&gt;'ZipCode');\r<br />\n$numericArray = array ('D2' = &gt; 123, 'F2' = &gt; 345);\r<br />\n$F =$ objPHPExcel-&gt; getActiveSheet();\r<br />\nforeach($stringArray as $Coord=&gt;$Value) $F-&gt; setCellValueExplicit($Coord, $Value, PHPExcel_Cell_DataType::TYPE_STRING);\r<br />\nforeach($numericArray as $Coord=&gt;$Value) $F-&gt; setCellValueExplicit($Coord, $Value, PHPExcel_Cell_DataType::TYPE_NUMERIC);\r<br />\n<br />\nYou can see also I stores the worksheet in a variable before the loop to avoid calling the method many times within it, similarly, I use the method setCellValueExplicit of the worksheet object to avoid calling getCell.\r<br />\nWhen I spoke of nested loops and additional dimension, I thought a picture of this style:\r<br />\n$data = array (PHPExcel_Cell_DataType:TYPE_STRING =&gt; array('A1'='&gt;Name&quot;, 'B1'=&gt;Town, 'C1'=&gt;'ZipCode'),\r<br />\nPHPExcel_Cell_DataType::TYPE_NUMERIC =&gt; array ('D2' =&gt; 123, 'F2' =&gt; 345));\r<br />\nand two loops:\r<br />\nforeach($data as $cellType=&gt;$dataCells) {\r<br />\nforeach($dataCells as $Coord=&gt;$Value) {\r<br />\n$F-&gt;setCellValueExplicit($Coord, $Value, $cellType);\r<br />\n}\r<br />\n}\r<br />\nPerhaps a little more resource intensive.<br />\n",
    "PostedDate": "2013-03-11T09:51:31.093-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013702",
    "ThreadId": "435713",
    "Html": "Hi LWOL, Thanks for the idea.<br />\n<br />\nThe method works. The execution time did reduced. I had no problem processing 10k rows record. However, I always get Memory Exhausted Error Message when processing 13K row of records onwards.<br />\n<pre><code>Fatal error: Allowed memory size of 536870912 bytes exhausted (tried to allocate 64 bytes) in /var/www/myapp/application/third_party/PHPExcel/Cell.php on line 532</code></pre>\n\nI've already use the setCachedMemoryMethod, tried using cache_in_memory_gzip, phpTemp and apc when writing the data to Excel File. Note that I changed from one method to another, not use them all at once.<br />\n<pre><code>//cache_in_memory_gzip\n        $cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_in_memory_gzip;\n        PHPExcel_Settings::setCacheStorageMethod($cacheMethod);        \n\n//cache_to_phpTemp\n        $cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_to_phpTemp;\n        $cacheSettings = array( 'memoryCacheSize' =&gt; '1024MB');\n        PHPExcel_Settings::setCacheStorageMethod($cacheMethod, $cacheSettings);        \n\n//cache_to_apc\n        $cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_to_apc;\n        $cacheSettings = array( 'cacheTime' =&gt; '600');\n        PHPExcel_Settings::setCacheStorageMethod($cacheMethod, $cacheSettings);        \n</code></pre>\n\nI'm not sure whether I'm using it correctly or not, but, I assumed that when I set the memoryCacheSize to 1024MB, it should allow the cache to be store up to 1024MB, which I'm quite frustrated when the Memory Exhausted still showing 512MB allowed. I've already changed my php.ini memory_limit to 1024MB, as well as APC shm_size to 1024MB (even though I doubt it has nothing to do if I choose phpTemp for the CacheStorageMethod). Did I miss somewhere else that need to be change as well?<br />\n<br />\nWhy does it still shows 512MB is the limit?<br />\n",
    "PostedDate": "2013-03-11T23:53:26.66-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013945",
    "ThreadId": "435713",
    "Html": "You can check that the method initializes correctly by testing the returns of setCacheStorageMethod (true/false).\r<br />\nYou can also verify that the memory_limit setting is taken into account (the reached 512 MB while the setting is set to 1024MB is curious) displaying or storing the results of an ini_get('memory_limit'). If you do not have the same value, somewhere a configuration file change the value, but you must be able to impose it in the script even (memory_limit is PHP_INI_ALL)\r<br />\nFor the phpTemp, the memoryCacheSize is misleading, in fact this value corresponds to the memory that php has the right to use before writing to disk, so increasing it always generates problems.\r<br />\nIn addition, if I read correctly the documentation, the value must be specified in bytes, nowhere is mention with a capacity of the wrapper to take into account the short notation (K, M, G), I know not how a value like 512 MB is interpreted, as well for the value that is used by default by Mark (1 MB), therefore, unless test this, I would try 2097152 (2 MB, the default value according to the php documentation - this same documentation where the example clearly shows the conversion of 5 MB in the equivalent in bytes for the passage of the parameter)<br />\n",
    "PostedDate": "2013-03-12T07:41:25.96-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]