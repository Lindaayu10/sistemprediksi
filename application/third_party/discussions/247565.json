[
  {
    "Id": "572104",
    "ThreadId": "247565",
    "Html": "<p>I am having major problem with memory issues and just can't seem to get around them.</p>\n<p>Why is it that one spreadsheet, size: 4,890,624 bytes (5 columns, 35653 rows), works <br /> with no problems but another file, size: 74,240 bytes (5 columns, 193 rows), causes:</p>\n<pre>Allowed memory size of 268435456 bytes exhausted (tried to allocate 80 bytes) in\nPHPExcel/Classes/PHPExcel/CachedObjectStorage/DiscISAM.php on line 47</pre>\n<p><br /> Here are the cache files created when trying to open the 74K file:</p>\n<pre>Size      Date         FileName\n        0 Feb 25 05:34 PHPExcel.4394d67afd5891272.23106874.cache\n139934791 Feb 25 05:34 PHPExcel.4394d67afd58efe77.58621720.cache\n        0 Feb 25 05:34 PHPExcel.4394d67afd5b1da06.04285814.cache\n        0 Feb 25 05:34 PHPExcel.4394d67afd5b8b7b4.42921373.cache\n</pre>\n<p>&nbsp;</p>\n<p><br /> Both files are attached to this issue:<br /> http://phpexcel.codeplex.com/workitem/15414</p>\n<p>I'm having to manually convert all these files to tab-delimited in order for our process to import them. I can't take a chance on any of them throwing this error and causing the cache files&nbsp; to be left, which is what happens when it crashes with that error.</p>\n<p>It seems that your old adage that 1K per cell just doesn't make sense at all.</p>",
    "PostedDate": "2011-02-25T05:53:13.293-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "572140",
    "ThreadId": "247565",
    "Html": "<p>A part of your problem is that the smaller spreadsheet: 74,240 bytes (5 columns, 193 rows), is actually (8 columns, 65,536 rows).... there's an awful lot of blank cells in there.</p>\r\n<p>When you use the CSV writer, it creates a 2D array of all the cells, and then loops through that array a row at a time.... that means it's building a 65,536 x 8 array in memory... before writing it out to your tab-separated file. WIth the current 1.7.5 release, that also creates blank cells up to H65536.</p>\r\n<p>With the latest additions to the worksheet's toArray() methods (namely the rangeToArray() method, and the fact that it doesn't create blank cells any more; I can modify the CSV Writer to process a row at a time, but you'll still end up with a lot of blank rows in your tsv unless you delete the spurious rows from your Excel file.</p>",
    "PostedDate": "2011-02-25T07:16:09.48-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "572168",
    "ThreadId": "247565",
    "Html": "<p>1. I am not using the CSV writer to parse the files. I am just opening and reading them.</p>\r\n<p>2. Why would you create and array element for blank cells? Kind of bogus to me.</p>\r\n<p>If the row is empty, how do you delete them from your Excel file?</p>",
    "PostedDate": "2011-02-25T07:56:54.937-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "572169",
    "ThreadId": "247565",
    "Html": "<p>Still, 8 columns, 65,536 rows is only 524288.</p>",
    "PostedDate": "2011-02-25T07:58:57.78-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "572200",
    "ThreadId": "247565",
    "Html": "<blockquote style=\"padding-right: 0.25em; padding-left: 0.25em; padding-bottom: 0px; margin: 0.25em 1em 0px; padding-top: 0px; font-style: italic; border: #ccc 0.1em solid;\"><strong>mrbaseball34 wrote:</strong><br />\r\n<p>1. I am not using the CSV writer to parse the files. I am just opening and reading them.</p>\r\n</blockquote>\r\n<p>When I open/read those files, without using any cell caching at all, I get:</p>\r\n<p>42_KATECO-LESS PRICING-2-24-2011.xls&nbsp; - Peak Memory Usage 8MB</p>\r\n<p>493_legende-BFSTOCK_2_23_2011.xls&nbsp; - Peak Memory Usage 236.25MB</p>\r\n<p>So&nbsp;I don't know what you're doing with these files that might be exhausting memory. What are you doing with the files once you've loaded them?</p>\r\n<blockquote style=\"padding-right: 0.25em; padding-left: 0.25em; padding-bottom: 0px; margin: 0.25em 1em 0px; padding-top: 0px; font-style: italic; border: #ccc 0.1em solid;\"><strong>mrbaseball34 wrote:</strong><br />\r\n<p>2. Why would you create and array element for blank cells? Kind of bogus to me.</p>\r\n</blockquote>\r\n<p>&nbsp;Yes, it is kind of bogus... which is why it's being changed.</p>",
    "PostedDate": "2011-02-25T08:30:12.337-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "572208",
    "ThreadId": "247565",
    "Html": "<p>Well, the memory exhaustion actually occurs somewhere inside the cell iterator but I don't know which row, I am taking care to unset as many of the variables as I can:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre>    <span style=\"color: green;\">// This is preliminary code to parse an Excel spreadsheet</span>\n    set_include_path(get_include_path() . PATH_SEPARATOR . <span style=\"color: #a31515;\">'PHPExcel/Classes/'</span>); \n    <span style=\"color: blue;\">require_once</span> <span style=\"color: #a31515;\">'PHPExcel/Classes/PHPExcel.php'</span>;\n    <span style=\"color: blue;\">require_once</span> <span style=\"color: #a31515;\">'PHPExcel/Classes/PHPExcel/IOFactory.php'</span>;\n    $cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_to_discISAM;\n    PHPExcel_Settings::setCacheStorageMethod($cacheMethod);\n    $objReader = PHPExcel_IOFactory::createReaderForFile($<span style=\"color: blue;\">file</span>);\n    $objReader-&gt;setReadDataOnly(true);\n    $objPHPExcel  = $objReader-&gt;load($<span style=\"color: blue;\">file</span>);\n    $objWorksheet = $objPHPExcel-&gt;getActiveSheet();\n\n    <span style=\"color: green;\">// counter to skip the header rows</span>\n    $q = 1;\n    $rowIterator = $objWorksheet-&gt;getRowIterator();\n    <span style=\"color: green;\">/*\n       $format is an array of numbers defining column ordering.\n       we want stuff imported in the correct order so we provide something like this\n       We want columns imported in this order:\n       Part#, AltPart#, CC, Qty, Desc\n       (default column format is 1,2,3,4,5,6,7)\n\n       Most files are not configure in this order so say lets have one in this order:\n       Qty, Desc, Mfg, Part#, CC\n\n       The format would be like this:\n       4,5,6,1,3,2,7\n    */</span>\n    \n    <span style=\"color: blue;\">foreach</span> ($rowIterator <span style=\"color: blue;\">as</span> $row) {\n      <span style=\"color: green;\">// if file has heaer row(s), skip them</span>\n      <span style=\"color: blue;\">if</span>($q &gt; $skip_rows) {\n        $fields = <span style=\"color: blue;\">array</span>();\n        $sql = <span style=\"color: #a31515;\">''</span>;\n        $cellIterator = $row-&gt;getCellIterator();\n        $cellIterator-&gt;setIterateOnlyExistingCells(false);\n        $g = 1;\n        <span style=\"color: blue;\">foreach</span> ($cellIterator <span style=\"color: blue;\">as</span> $cell) \n        {\n          $cellval = trim(iconv(<span style=\"color: #a31515;\">\"UTF-8\"</span>,<span style=\"color: #a31515;\">\"ISO-8859-1\"</span>,$cell-&gt;getValue()),<span style=\"color: #a31515;\">\" \\t\\n\\r\\0\\x0B\\xA0\"</span>);\n        } <span style=\"color: green;\">// foreach ($cellIterator as $cell)</span>\n        <span style=\"color: blue;\">unset</span>($cellIterator);\n        <span style=\"color: green;\">// reset the array</span>\n        $fields_order = <span style=\"color: blue;\">array</span>();\n        <span style=\"color: green;\">// arrange the array values as defined by the user's file format configuration </span>\n        $y = 0;\n        <span style=\"color: blue;\">foreach</span>($format <span style=\"color: blue;\">as</span> $index =&gt; $value ) {\n          <span style=\"color: blue;\">switch</span>($value) {\n          <span style=\"color: blue;\">case</span> 1:\n            <span style=\"color: green;\">// if partno is blank, use altpartno</span>\n            <span style=\"color: blue;\">if</span>(trim($fields[$index]) == <span style=\"color: #a31515;\">''</span>) {\n              $fields[$index] = $fields[intval($value)+1];\n            }\n            $fields_order[$value] = strtoupper($fields[$index]);\n            $y = $value;\n          <span style=\"color: blue;\">case</span> 3: <span style=\"color: green;\">//Default and Uppercase the condition code</span>\n            $allowed_cc = <span style=\"color: blue;\">array</span>(<span style=\"color: #a31515;\">'NE'</span>, <span style=\"color: #a31515;\">'NS'</span>, <span style=\"color: #a31515;\">'SV'</span>, <span style=\"color: #a31515;\">'OH'</span>, <span style=\"color: #a31515;\">'AR'</span>);\n            <span style=\"color: blue;\">if</span>(trim($fields[$index]) == <span style=\"color: #a31515;\">''</span>) {\n              $fields[$index] = <span style=\"color: #a31515;\">'NS'</span>;\n            }\n            $fields_order[$value] = strtoupper($fields[$index]);\n            <span style=\"color: blue;\">if</span>(!in_array($fields_order[$value], $allowed_cc)) {\n              $fields_order[$value] = <span style=\"color: #a31515;\">'NS'</span>;\n            }\n          <span style=\"color: blue;\">break</span>;\n          <span style=\"color: blue;\">case</span> 5: <span style=\"color: green;\">// defailt description to PART</span>\n            <span style=\"color: blue;\">if</span>(trim($fields[$index]) == <span style=\"color: #a31515;\">''</span>) {\n              $fields[$index] = <span style=\"color: #a31515;\">'PART'</span>;\n            }\n            $fields_order[$value] = $fields[$index];\n          <span style=\"color: blue;\">break</span>;\n          <span style=\"color: blue;\">default</span>:\n            $fields_order[$value] = $fields[$index];\n          } <span style=\"color: green;\">// if ($value == 3)</span>\n        } <span style=\"color: green;\">// foreach($format as $index =&gt; $value ) </span>\n\n        <span style=\"color: green;\">// sort the array by key</span>\n        ksort( $fields_order );\n\n        <span style=\"color: green;\">// Now just get the values, don't need the previous keys</span>\n        $fields_order = array_values( $fields_order );\n\n        <span style=\"color: green;\">// remove all but the first 5 elements.</span>\n        $fields_order = array_slice($fields_order,0,5);\n\n        <span style=\"color: green;\">// if it is the part number column</span>\n        $j = strpos(strtolower($fields_order[$y]), <span style=\"color: #a31515;\">'number'</span>);\n        <span style=\"color: green;\">// or it is not empty</span>\n        $k = strlen(trim(str_replace($fields_order[$y], <span style=\"color: #a31515;\">'\"'</span>, <span style=\"color: #a31515;\">''</span>)));\n        \n        $ipn  = trim($this-&gt;stripIllegalChars($fields_order[0]));\n        $iapn = trim($this-&gt;stripIllegalChars($fields_order[1]), false);\n        $cc   = strtoupper($fields_order[2]);\n        $qty  = $fields_order[3];\n        $desc = addslashes($fields_order[4]);\n        <span style=\"color: green;\">// build the insert statement from the values in the cells only if partno is not blank</span>\n        <span style=\"color: blue;\">if</span>(trim($ipn) != <span style=\"color: #a31515;\">''</span>) {\n          $field_str = sprintf(<span style=\"color: #a31515;\">'\"%s\",  \"%s\",  \"%s\",  %d,  \"%s\"'</span>, $ipn,$iapn,$cc,$qty,$desc);\n          $insertsql = <span style=\"color: #a31515;\">\"INSERT INTO inventory (user_id,inventory_part_number,inventory_alt_part_number,\"</span>.\n                                              <span style=\"color: #a31515;\">\"inventory_condition_code,inventory_quantity,inventory_description,\"</span>.\n                                              <span style=\"color: #a31515;\">\"last_update) \"</span>.\n                                     <span style=\"color: #a31515;\">\"VALUES ($user_id, \"</span>.$field_str.<span style=\"color: #a31515;\">\", NOW())\"</span>;\n          $result = $this-&gt;db-&gt;query($insertsql) <span style=\"color: blue;\">or</span> <span style=\"color: blue;\">die</span>($insertsql.<span style=\"color: #a31515;\">\"&lt;BR&gt;\"</span>.mysql_error());\n        } <span style=\"color: green;\">// if(trim($ipn) != '')</span>\n      } <span style=\"color: green;\">// if($q &gt; $skip_rows)</span>\n      $q++;\n    } <span style=\"color: green;\">// foreach ($objWorksheet-&gt;getRowIterator() as $row)</span>\n    <span style=\"color: blue;\">unset</span>($rowIterator);\n    $objPHPExcel-&gt;disconnectWorksheets();\n    <span style=\"color: blue;\">unset</span>($objPHPExcel);\n</pre>\n</div>",
    "PostedDate": "2011-02-25T08:47:39.13-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]