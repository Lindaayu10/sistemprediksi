[
  {
    "Id": "614936",
    "ThreadId": "258159",
    "Html": "\r\n<p>I need to read a heavily formatted Excel 2007 file, perform checks on column headers, number of columns etc, have the dates in all the cells converted to MM/DD/YYYY format and write all of the data to csv to be mapped into an oracle table. The major steps\r\n , I used.</p>\r\n<p>1)&nbsp; a)&nbsp; $objReader-&gt;setReadDataOnly(true);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b) if( PHPExcel_Shared_Date::isDateTime($objWorksheet-&gt;getCellByColumnAndRow($j, $i) )){<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $cell = PHPExcel_Shared_Date::ExcelToPHPObject($objWorksheet-&gt;getCellByColumnAndRow($j, $i)-&gt;getValue())-&gt;format('m/d/Y');<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $cell =&nbsp; $objWorksheet-&gt;getCellByColumnAndRow($j, $i)-&gt;getCalculatedValue(); AKT<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>The problem I am facing with above option is : the file being heavily formatted has formatting associated with even blank cells. Which causes the upload to hang. The solution that works is - copy all the cells which have data into a new Excel 2007 sheet\r\n and upload it ( this works fine ).</p>\r\n<p>2) Option 2 is to ignore the formatting so that blank cells with formatting are not read.</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp; a) $objReader-&gt;setReadDataOnly(true);</p>\r\n<p>The problem with option 2) is that the date values are now the Excel number that is stored for any date ( as now isDateTime() does not work ).</p>\r\n<p>&nbsp;</p>\r\n<p>I need a workaround to this issue and not sure what can be done about this. Is there a way that I can go with option 1) but still avoid the reading of blank cells which have attached formatting ?</p>\r\n<p>Any help will be greatly appreciated.</p>\r\n",
    "PostedDate": "2011-05-18T15:49:26.47-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "616630",
    "ThreadId": "258159",
    "Html": "<p>I will appreciate a response to this query.</p>\r\n<p>Thanks</p>",
    "PostedDate": "2011-05-23T02:11:02.78-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "616695",
    "ThreadId": "258159",
    "Html": "<p>The way I have done it is like your option 2 with code like this:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">if</span>(strlen($date) == 5) { <span style=\"color: green;\">//Excel</span>\r\n        $date = PHPExcel_Style_NumberFormat::toFormattedString($date, <span style=\"color: #a31515;\">\"M/D/YYYY\"</span>);\r\n}\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-05-23T05:11:36.077-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "617675",
    "ThreadId": "258159",
    "Html": "<p>Don't set&nbsp;$objReader-&gt;setReadDataOnly(true) if you need to be able to identify dates using isDateTime();</p>\r\n<p>If your workbook contains multiple worksheets, you could try loading a worksheet at a time.</p>\r\n<p>If this is one large worksheet, you could try reading the workbook in \"chunks\" using a Read Filter.</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\"><code><span class=\"pln\"><div style=\"color: black; background-color: white;\"><pre>    $inputFileType = <span style=\"color: #a31515;\">'Excel5'</span>; \r\n    $inputFileName = <span style=\"color: #a31515;\">'./sampleData/example2.xls'</span>;\r\n\r\n    <span style=\"color: green;\">/**  Define a Read Filter class implementing PHPExcel_Reader_IReadFilter  */</span> \r\n    <span style=\"color: blue;\">class</span> chunkReadFilter <span style=\"color: blue;\">implements</span> PHPExcel_Reader_IReadFilter {\r\n        <span style=\"color: blue;\">private</span> $_startRow = 0;\r\n        <span style=\"color: blue;\">private</span> $_endRow = 0;\r\n\r\n        <span style=\"color: green;\">/**  Set the list of rows that we want to read  */</span> \r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setRows($startRow, $chunkSize) { \r\n            $this-&gt;_startRow    = $startRow; \r\n            $this-&gt;_endRow      = $startRow + $chunkSize;\r\n        } \r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> readCell($column, $row, $worksheetName = <span style=\"color: #a31515;\">''</span>) {\r\n            <span style=\"color: green;\">//  Only read the heading row, and the rows that are configured in $this-&gt;_startRow and $this-&gt;_endRow </span>\r\n            <span style=\"color: blue;\">if</span> (($row == 1) || ($row &gt;= $this-&gt;_startRow &amp;&amp; $row &lt; $this-&gt;_endRow)) { \r\n               <span style=\"color: blue;\">return</span> true;\r\n            }\r\n            <span style=\"color: blue;\">return</span> false;\r\n        } \r\n    }\r\n\r\n    <span style=\"color: green;\">/**  Create a new Reader of the type defined in $inputFileType  **/</span>\r\n    $objReader = PHPExcel_IOFactory::createReader($inputFileType);\r\n    <span style=\"color: green;\">/**  Define how many rows we want to read for each \"chunk\"  **/</span> \r\n    $chunkSize = 1024;\r\n    <span style=\"color: green;\">/**  Create a new Instance of our Read Filter  **/</span> \r\n    $chunkFilter = <span style=\"color: blue;\">new</span> chunkReadFilter(); \r\n    <span style=\"color: green;\">/**  Tell the Reader that we want to use the Read Filter that we've Instantiated  **/</span> \r\n    $objReader-&gt;setReadFilter($chunkFilter); \r\n\r\n    <span style=\"color: green;\">/**  Loop to read our worksheet in \"chunk size\" blocks  **/</span> \r\n    <span style=\"color: green;\">/**  $startRow is set to 2 initially because we always read the headings in row #1  **/</span>\r\n    <span style=\"color: blue;\">for</span> ($startRow = 2; $startRow &lt;= 65536; $startRow += $chunkSize) { \r\n        <span style=\"color: green;\">/**  Tell the Read Filter, the limits on which rows we want to read this iteration  **/</span> \r\n        $chunkFilter-&gt;setRows($startRow,$chunkSize); \r\n        <span style=\"color: green;\">/**  Load only the rows that match our filter from $inputFileName to a PHPExcel Object  **/</span> \r\n        $objPHPExcel = $objReader-&gt;load($inputFileName); \r\n        <span style=\"color: green;\">//    Do some processing here </span>\r\n    \r\n        <span style=\"color: green;\">//    Free up some of the memory </span>\r\n        $objPHPExcel-&gt;disconnectWorksheets(); \r\n        <span style=\"color: blue;\">unset</span>($objPHPExcel); \r\n    }\r\n\r\n</pre>\r\n</div>\r\n</span></code></span><span style=\"color: blue;\"><code><span class=\"pln\"><br /></span></code></span></pre>\r\n</div>",
    "PostedDate": "2011-05-24T14:22:16.263-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]