[
  {
    "Id": "983402",
    "ThreadId": "428622",
    "Html": "\r\n<p>Like many others, I'm working in a memory-constrained environment, and have a file which I have no control over that reputedly has ~50000 columns and ~10000 rows in one worksheet, however the cells with actual data are under 1000x1000 -- the rest is empty\r\n formatting.</p>\r\n<p>The xlsx file size is a little under 10MB, the XML for one of the sheets is ~60MB (in the xlsx archive), and when simplexml tries to load it for the worksheet info, the php process needs an incremental 1GB&#43; of ram.</p>\r\n<p>Fortunately I don't need this particular worksheet, but it does stop me from using the stock listWorksheetInfo function.&nbsp; Looking at MarkBaker's 2013 roadmap, he was kind enough to mention that XMLReader handles XML in chunks, and so I hacked up a quick\r\n solution for the Excel2007 reader to use it instead of simplexml for the worksheet files (the metadata files are so small I didn't bother for them).</p>\r\n<p>The end result with XMLReader was a 95% reduction in incremental RAM use and a 10x&#43;&#43; increase in speed in my use case.</p>\r\n<p>Unfortunately the code insert function on the site doesn't seem to be working for this block below, but if anyone else wants to implement this stopgap in 1.7.8, replace the code starting at line 311 and ending at line 331 in Classes/PHPExcel/Reader/Excel2007.php\r\n with the following (first and last lines should be the same for your reference):</p>\r\n<p>$fileWorksheet = $worksheets[(string) self::array_item($eleSheet-&gt;attributes(&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships&quot;), &quot;id&quot;)];</p>\r\n<p>$xml = new XMLReader();<br>\r\n$res = $xml-&gt;xml($this-&gt;_getFromZipArchive($zip, &quot;$dir/$fileWorksheet&quot;));<br>\r\n$xml-&gt;setParserProperty(2,true); <br>\r\n<br>\r\n$currCells = 0;<br>\r\nwhile ($xml-&gt;read()) {<br>\r\n&nbsp;&nbsp;&nbsp; switch ($xml-&gt;name) {<br>\r\n&nbsp;&nbsp;&nbsp; case &quot;row&quot;:<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; $xml-&gt;read();<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; $tmpInfo['totalRows']&#43;&#43;;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; $tmpInfo['totalColumns'] = max($tmpInfo['totalColumns'],$currCells);<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; $currCells = 0;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; $xml-&gt;read();<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; break;<br>\r\n&nbsp;&nbsp;&nbsp; case &quot;c&quot;:<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; $xml-&gt;read();<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; $currCells&#43;&#43;;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; $xml-&gt;read();<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; break;<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n}<br>\r\n$xml-&gt;close();</p>\r\n<p><br>\r\n$tmpInfo['lastColumnIndex'] = $tmpInfo['totalColumns'] - 1;<br>\r\n$tmpInfo['lastColumnLetter'] = PHPExcel_Cell::stringFromColumnIndex($tmpInfo['lastColumnIndex']); // note, this doesn't seem to work for certain (all?) very large column counts<br>\r\n<br>\r\n$worksheetInfo[] = $tmpInfo;<br>\r\n<br>\r\n</p>\r\n<p><br>\r\n<br>\r\n</p>\r\n",
    "PostedDate": "2013-01-05T15:26:05.147-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "983577",
    "ThreadId": "428622",
    "Html": "\r\n<p>Unfortunately, the code as it stands won't produce the correct results; you'll get 2 c entries for every column, and 2 row entries for every row, because you'll get both the opening and the closing tags; .... the listWorksheetInfo() code that I've been testing\r\n to work with xmlReader streaming uses:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">while</span> ($xml-&gt;read()) {\r\n    <span style=\"color:blue\">if</span> ($xml-&gt;name == <span style=\"color:#a31515\">'row'</span> && $xml-&gt;nodeType == XMLReader::ELEMENT) {\r\n        $tmpInfo[<span style=\"color:#a31515\">'totalRows'</span>]++;\r\n        $tmpInfo[<span style=\"color:#a31515\">'totalColumns'</span>] = max($tmpInfo[<span style=\"color:#a31515\">'totalColumns'</span>],$currCells);\r\n        $currCells = 0;\r\n    } <span style=\"color:blue\">elseif</span> ($xml-&gt;name == <span style=\"color:#a31515\">'c'</span> && $xml-&gt;nodeType == XMLReader::ELEMENT) {\r\n        $currCells++;\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>Generally XMLReader is more memory efficient, but slower. In the case of listWorksheetInfo(), it's marginally faster than the current code because it's looping through the data in a single pass rather than the nested loops of the simpleXML method. With a\r\n test file containing 2 worksheets of 16370 rows by 9 columns, it's about 7.5-8 seconds rather than 10, and uses 1.25MB (peak at 7.5MB) rather than 2.5MB (peak at 8.75).</p>\r\n<p>XMLReader streaming should povide a bigger peak memory saving, and is a lot faster than $xml-&gt;xml() to load the xml data to the reader resource, as shown in the thread&nbsp;<a href=\"http://phpexcel.codeplex.com/discussions/242712\">http://phpexcel.codeplex.com/discussions/242712</a>...\r\n this is still targetted for the 1.7.9 release sometime in the next couple of months.</p>\r\n",
    "PostedDate": "2013-01-06T16:06:24.967-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]