[
  {
    "Id": "709837",
    "ThreadId": "282391",
    "Html": "\r\n<p>Hello. I 'm trying to &nbsp;create a db table from excel file with phpexcel.Here is the concept:</p>\r\n<p>I first try to read the headers from the first row(They are always in this row).</p>\r\n<p>Then i iterate over the worksheet to discover each column's datatype.I then create the query for the creation of the table and finally, i am looping through each row (below the 1 one) to insert the values</p>\r\n<p>to the created table.</p>\r\n<p>The problem is i cant get the code to work.</p>\r\n<p>I am getting &nbsp;an error of max_execution time exceeded in <strong>PHPExcel/PHPExcel/Worksheet.php</strong><span>&nbsp;on line&nbsp;</span><strong>998</strong></p>\r\n<p><strong>&nbsp;</strong>The code i am using is:</p>\r\n<p>&nbsp;</p>\r\n<p>----------------------------------------------------------------------------------</p>\r\n<p>&nbsp;</p>\r\n<p>require_once 'PHPExcel/Autoloader.php';</p>\r\n<p>require_once 'PHPExcel/IOFactory.php';</p>\r\n<p>require_once 'PHPExcel.php';</p>\r\n<p>&nbsp;</p>\r\n<p>/* $cm=PHPExcel_CachedObjectStorageFactory::cache_to_discISAM;&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;PHPExcel_Settings::setCacheStorageMethod($cm);<br>\r\n&nbsp; &nbsp;$cm=PHPExcel_CachedObjectStorageFactory::cache_to_phpTemp;&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;$cs=array('memoryCacheSize'=&gt;'50MB');&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp; PHPExcel_Settings::setCacheStorageMethod($cm,$cs);*/&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp; &nbsp; PHPExcel_Settings::setZipClass(PHPExcel_Settings::PCLZIP);&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp; $objPHPExcel = PHPExcel_IOFactory::load(&quot;Untitled.xls&quot;);&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp; foreach ($objPHPExcel-&gt;getWorksheetIterator() as $worksheet) {<span>\r\n</span>&nbsp;</p>\r\n<p>&nbsp; &nbsp;$highestRow = $worksheet-&gt;getHighestRow();<span> </span></p>\r\n<p><span>&nbsp;</span> &nbsp; &nbsp;$highestColumn = $worksheet-&gt;getHighestColumn();<span>\r\n</span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;$highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn);<span>\r\n</span></p>\r\n<p><span>&nbsp;</span> &nbsp; &nbsp;while($row=1):<span> </span>&nbsp;</p>\r\n<p>&nbsp;<span> </span>for ($col = 0; $col &lt; $highestColumnIndex; &nbsp;$col&#43;&#43;){<span>\r\n</span>&nbsp;</p>\r\n<p>&nbsp;<span> </span>$cell = $worksheet-&gt;getCellByColumnAndRow($col, $row);<span>\r\n</span>&nbsp;</p>\r\n<p>&nbsp;<span> </span>$hvalue = $cell-&gt;getValue();<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp;<span> </span>$hvalues=array();<span> </span>&nbsp;</p>\r\n<p>&nbsp;<span> </span>$hvalues[]=$hvalue; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n<p>&nbsp; endwhile;</p>\r\n<p>&nbsp;$mkimploded=implode(&quot;,&quot;,$hvalues);&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;}</p>\r\n<p>&nbsp;require_once 'PHPExcel/Autoloader.php';&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>require_once ('config.inc.php');</p>\r\n<p>foreach ($objPHPExcel-&gt;getWorksheetIterator() as $worksheet) {<span> </span>\r\n&nbsp; &nbsp;</p>\r\n<p>$highestRow = $worksheet-&gt;getHighestRow();<span> </span>&nbsp;</p>\r\n<p>&nbsp;$highestColumn = $worksheet-&gt;getHighestColumn();<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp;$highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn);&nbsp; &nbsp;</p>\r\n<p>&nbsp;for ($col = 0; $col&lt; $highestColumnIndex; $col&#43;&#43;) { &nbsp;&nbsp;//read file on a per column basis;vertically&nbsp;&nbsp;</p>\r\n<p>&nbsp;for ($row = 2; $row &lt;= $highestRow; $row&#43;&#43;) { &nbsp; &nbsp;&nbsp;</p>\r\n<p>&nbsp;$cell = $worksheet-&gt;getCellByColumnAndRow($col, $row);<span> </span>&nbsp;</p>\r\n<p>&nbsp;$val = $cell-&gt;getValue();<span> </span>&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp;$dataType = PHPExcel_Cell_DataType::dataTypeForValue($val);<span> </span>\r\n&nbsp; &nbsp;</p>\r\n<p>&nbsp; $columndatatype=array();&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;$columndatatype[]=$datatype;&nbsp; &nbsp;</p>\r\n<p>&nbsp;}}} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>function array_most_common($input){</p>\r\n<p><span></span>$counted = array_count_values($input);<span> </span></p>\r\n<p><span>&nbsp;</span>$rcounted=arsort($counted);</p>\r\n<p><span></span>return(key($rcounted));}</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp; &nbsp;switch ($dbcoldatatype)<span> </span>&nbsp; &nbsp; &nbsp; &nbsp;{<span>\r\n</span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>case &quot;str&quot;:<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>if(array_most_common($columndatatype)==&quot;str&quot;)<span>\r\n</span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>$dbcoldatatype=&quot;varchar(150)&quot;;<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>break;<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>case &quot;s&quot;:<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>if(array_most_common($columndatatype)==&quot;s&quot;)<span> </span>\r\n&nbsp;</p>\r\n<p>&nbsp; &nbsp; &nbsp;<span> </span>$dbcoldatatype=&quot;varchar(150)&quot;;<span> </span>\r\n&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp;<span> </span>break;<span> </span>&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp;<span> </span>case &quot;f&quot;:<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>if(array_most_common($columndatatype)==&quot;f&quot;)<span> </span>\r\n&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>$dbcoldatatype=&quot;varchar(150)&quot;;<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>break;<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>case &quot;n&quot;:<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>if(array_most_common($columndatatype)==&quot;n&quot;)<span> </span>\r\n&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>$dbcoldatatype=&quot;numeric&quot;;<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>break;<span> </span>&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp;<span> </span>case &quot;b&quot;:<span> </span>&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp;<span> </span>if(array_most_common($columndatatype)==&quot;b&quot;)<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>$dbcoldatatype=&quot;varchar(150)&quot;;<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>break;<span> </span>&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp;<span> </span>case &quot;null&quot;:</p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;<span> </span>if(array_most_common($columndatatype)==&quot;null&quot;)<span>\r\n</span>&nbsp;</p>\r\n<p>&nbsp; &nbsp; &nbsp;<span> </span>$dbcoldatatype=&quot;varchar(150)&quot;;<span> </span>\r\n&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>break;<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>case &quot;inlineStr&quot;:<span> </span>&nbsp;</p>\r\n<p>&nbsp; &nbsp; &nbsp;<span> </span>if(array_most_common($columndatatype)==&quot;inlineStr&quot;)<span>\r\n</span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>$dbcoldatatype=&quot;varchar(150)&quot;;<span> </span></p>\r\n<p><span>&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span> </span>break;<span> </span>\r\n&nbsp;</p>\r\n<p>&nbsp; &nbsp; &nbsp;<span> </span>case &quot;e&quot;:<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>if(array_most_common($columndatatype)==&quot;e&quot;)<span> </span>\r\n&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>$dbcoldatatype=&quot;varchar(150)&quot;;<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>break;<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>default:<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>break;<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;}&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp;require_once&quot;mysqli_connect.php&quot;;&nbsp; &nbsp; &nbsp;</p>\r\n<p>require_once 'PHPExcel/Autoloader.php';<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;$colvaltype=array_combine($hvalues,$dbcoldatatype);&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $str=&quot;&quot;;&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $k=&quot;&quot;;<span>\r\n</span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;foreach($colvaltype as $key-&gt;$val){<span> </span>&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;<span> </span>$str.=$key.&quot; &quot;.$val.&quot;,&quot;;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $k.=$key.&quot;,&quot;;&nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$q=&quot;CREATE TABLE username (id int auto_increment not null primary key,$str)&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp;$q1=mysqli_query($dbc,$q); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$question='DESC username';&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp; $result =@mysqli_query($question,$dbc);<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp;if(!mysqli_errno()==1146){&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp; foreach ($objPHPExcel-&gt;getWorksheetIterator() as $worksheet) {&nbsp; &nbsp;</p>\r\n<p>&nbsp; &nbsp; $highestRow = $worksheet-&gt;getHighestRow();</p>\r\n<p>&nbsp;$highestColumn = $worksheet-&gt;getHighestColumn();</p>\r\n<p>&nbsp; $highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn);&nbsp; &nbsp;</p>\r\n<p>&nbsp;for ($row = 2; $row &lt;= $highestRow; $row&#43;&#43;) {//in this iteration we read the file horizontally per row;&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp; for ($col = 0; $col &lt; $highestColumnIndex; $col&#43;&#43;) {&nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp; $cell = $worksheet-&gt;getCellByColumnAndRow($col, $row);<span> </span>\r\n&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp;$value = $cell-&gt;getValue();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>$values=array();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp;$values[]=$value;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>$imploded=implode(&quot;,&quot;,$values); }</p>\r\n<p>&nbsp; //while the values of each row are parsed we insert them into the table&nbsp;</p>\r\n<p>$query='INSERT INTO username($k) VALUES($imploded)';</p>\r\n<p>$imp=mysqli_query($dbc,$query);//TODO:check if the rows were successfully inserted&nbsp; &nbsp; &nbsp;</p>\r\n<p>&nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<span> </span>}</p>\r\n<p>else echo&quot;The table was not created&quot;;<br>\r\n<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mysqli_close($dbc);</p>\r\n<p>&nbsp;</p>\r\n<p>-------------------------------------------------------------------------------</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;Any suggestions?&nbsp;</p>\r\n",
    "PostedDate": "2011-12-09T05:20:24.04-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "709842",
    "ThreadId": "282391",
    "Html": "<p>Initialise your arrays <strong><em>before </em></strong>the loop, not immediately before pushing values to them. e.g.</p>\n<div style=\"background-color: white; color: black;\">\n<pre><span style=\"color: blue;\">for</span> ($row = 2; $row &lt;= $highestRow; $row++) { \r\n    $cell = $worksheet-&gt;getCellByColumnAndRow($col, $row); \r\n    $val = $cell-&gt;getValue(); \r\n    $dataType = PHPExcel_Cell_DataType::dataTypeForValue($val); \r\n    $columndatatype=<span style=\"color: blue;\">array</span>();\r\n    $columndatatype[]=$datatype;\r\n}\r\n</pre>\n</div>\n<p>will reset the array to empty every time you loop, so only the last column value will ever be in the array at the end of the loop... try</p>\n<div style=\"background-color: white; color: black;\">\n<pre>$columndatatype=<span style=\"color: blue;\">array</span>();\r\n<span style=\"color: blue;\">for</span> ($row = 2; $row &lt;= $highestRow; $row++) {\r\n    $cell = $worksheet-&gt;getCellByColumnAndRow($col, $row); \r\n    $val = $cell-&gt;getValue(); \r\n    $dataType = PHPExcel_Cell_DataType::dataTypeForValue($val); \r\n    $columndatatype[]=$datatype;\r\n}\r\n</pre>\n</div>\n<p>and for the equivalent loops as well</p>\n<p>&nbsp;</p>",
    "PostedDate": "2011-12-09T05:35:37.517-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "710226",
    "ThreadId": "282391",
    "Html": "<p>Thanks for replying. Such a silly mistake. Now when i run the code i get 100% load on both cores and 4 GBS of RAM &amp; 1 of the 2 GB of swap&nbsp; filled. I also get an error of:</p>\n<p><strong>Allowed memory size of -1673527296 bytes exhausted on line 67</strong> which is when the values are pushed to the array specifically on the first loop</p>\n<p>$hvalues[]=$hvalue; &nbsp;&nbsp;</p>\n<p>&nbsp;</p>\n<p>P.S</p>\n<p>Although i knew it was going to be a cpu intensive and memory hungry task i did not imagine that it could be that hungry on resources. I actually fed phpexcel with a 10 row and 3 column excel file.</p>\n<p>Anyway congrats for a great object oriented project to you and to the other developers. Its a brilliant idea.</p>\n<p>I should also mention that i am running latest xampp package with php 5.3.8 i think and php's memory is at 2.5 GB.I applied all the latest patches from phpexcel's svn. <strong><br /> </strong></p>",
    "PostedDate": "2011-12-10T03:09:16.237-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]