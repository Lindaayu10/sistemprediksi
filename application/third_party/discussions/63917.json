[
  {
    "Id": "217320",
    "ThreadId": "63917",
    "Html": "<p>Hi,</p>\r\n<p>I have a problem whith Validation List on Excel 2007. I get the options from a DB. They are 55 options that I include on my script. First, I do an Array and late I use implode() to separate by comma.</p>\r\n<p>But, when I create the Excel, he show me this message:</p>\r\n<p>http://i32.tinypic.com/16lwq4x.jpg</p>\r\n<p>If I clic YES, there no options on spreadsheet.</p>\r\n<p>When I LIMIT the options to 20, there is no problem whit Excel. But, the problem isn't the quantity of options, the problem is with the quantity of characters. If I short the options string, there is no problem. Maybe exist a limit of characters to pass to the method? Or what?</p>\r\n<p>My code:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>&lt;?\r\n\r\n<span style=\"color:Blue\">include</span>(<span style=\"color:#A31515\">'../../config.php'</span>);\r\n<span style=\"color:Blue\">require_once</span>(<span style=\"color:#A31515\">'class/classRendiciones.php'</span>);\r\n\r\n$rendicion = <span style=\"color:Blue\">new</span> Rendiciones();\r\n\r\n\r\n$destinosSecundario = implode(<span style=\"color:#A31515\">','</span>, $rendicion-&gt;obtenerDestinos(false, true)); <span style=\"color:Green\">// Options from DB</span>\r\n$destinosSecundario = utf8_encode($destinosSecundario);\r\n\r\n<span style=\"color:Green\">//Format: tab;column;start row;end row</span>\r\n$destinos = Array(<span style=\"color:#A31515\">'0;R;17;24'</span>, <span style=\"color:#A31515\">'1;R;5;25'</span>, <span style=\"color:#A31515\">'2;S;5;23'</span>, <span style=\"color:#A31515\">'3;Q;5;22'</span>, <span style=\"color:#A31515\">'4;N;5;24'</span>); <span style=\"color:Green\">// Places on the spreadsheet where I put the options</span>\r\n\r\n<span style=\"color:Blue\">if</span>($_GET[<span style=\"color:#A31515\">'tipo'</span>] == 1)\r\n\t$tipo = <span style=\"color:#A31515\">'Fondo fijo'</span>;\r\n<span style=\"color:Blue\">elseif</span>($_GET[<span style=\"color:#A31515\">'tipo'</span>] == 2)\r\n\t$tipo = <span style=\"color:#A31515\">'Rendicion de gasto'</span>;\r\n<span style=\"color:Blue\">else</span>\r\n\t$tipo = <span style=\"color:#A31515\">'Fondo por rendir'</span>;\r\n\r\n<span style=\"color:Green\">/** Include path **/</span>\r\nset_include_path(get_include_path() . PATH_SEPARATOR . <span style=\"color:#A31515\">'class/PHPExcel'</span>);\r\n\r\n<span style=\"color:Green\">/** PHPExcel */</span>\r\n<span style=\"color:Blue\">require_once</span> <span style=\"color:#A31515\">'PHPExcel.php'</span>;\r\n\r\n<span style=\"color:Green\">/** PHPExcel_IOFactory */</span>\r\n<span style=\"color:Blue\">include</span> <span style=\"color:#A31515\">'PHPExcel/IOFactory.php'</span>;\r\n\r\n<span style=\"color:Green\">// Create new PHPExcel object</span>\r\n$objPHPExcel = <span style=\"color:Blue\">new</span> PHPExcel();\r\n\r\n<span style=\"color:Green\">// Read from Excel2007 (.xlsx) template</span>\r\n$objReader = PHPExcel_IOFactory::createReader(<span style=\"color:#A31515\">'Excel2007'</span>);\r\n$objPHPExcel = $objReader-&gt;load(<span style=\"color:#A31515\">&quot;$tipo.xlsx&quot;</span>);\r\n\r\n<span style=\"color:Green\">// Include options</span>\r\n\r\n<span style=\"color:Blue\">for</span>($i = 0; $i &lt; count($destinos); $i++){\r\n\r\n\t<span style=\"color:Blue\">list</span>($hoja, $letra, $desde, $hasta) = split(<span style=\"color:#A31515\">&quot;[;]&quot;</span>, $destinos[$i]);\r\n\t\r\n\t$objPHPExcel-&gt;setActiveSheetIndex($hoja);\r\n\t\r\n\t<span style=\"color:Blue\">for</span>($j = $desde; $j &lt;= $hasta; $j++){\r\n\t\t\r\n\t\t$celda = $letra.$j;\r\n\t\t\r\n\t\t$objValidation = $objPHPExcel-&gt;getActiveSheet()-&gt;getCell($celda)-&gt;getDataValidation();\r\n\t\t$objValidation-&gt;setType( PHPExcel_Cell_DataValidation::TYPE_LIST );\r\n\t\t$objValidation-&gt;setErrorStyle( PHPExcel_Cell_DataValidation::STYLE_INFORMATION );\r\n\t\t$objValidation-&gt;setAllowBlank(false);\r\n\t\t$objValidation-&gt;setShowInputMessage(true);\r\n\t\t$objValidation-&gt;setShowErrorMessage(true);\r\n\t\t$objValidation-&gt;setShowDropDown(true);\r\n\t\t$objValidation-&gt;setErrorTitle(<span style=\"color:#A31515\">'Valor erroneo'</span>);\r\n\t\t$objValidation-&gt;setError(<span style=\"color:#A31515\">'El valor no pertenece a la lista.'</span>);\r\n\t\t$objValidation-&gt;setFormula1(<span style=\"color:#A31515\">'&quot;'</span>.$destinosSecundario.<span style=\"color:#A31515\">'&quot;'</span>);\t\r\n\t\t$objPHPExcel-&gt;getActiveSheet()-&gt;getCell($celda)-&gt;setDataValidation($objValidation);\r\n\t\r\n\t}\r\n\r\n}\r\n\r\nheader(<span style=\"color:#A31515\">'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'</span>);\r\nheader(<span style=\"color:#A31515\">'Content-Disposition: attachment;filename=&quot;'</span>.$tipo.<span style=\"color:#A31515\">'.xlsx&quot;'</span>);\r\nheader(<span style=\"color:#A31515\">'Cache-Control: max-age=0'</span>);\r\n$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, <span style=\"color:#A31515\">'Excel2007'</span>);\r\n$objWriter-&gt;setOffice2003Compatibility(true); <span style=\"color:Green\">// Try also to set it to false with the same result</span>\r\n$objWriter-&gt;save(<span style=\"color:#A31515\">'php://output'</span>); \r\n\r\n?&gt;\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-29T12:18:15.533-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "217697",
    "ThreadId": "63917",
    "Html": "<p><em>&gt;&gt; Maybe exist a limit of characters to pass to the method?</em><br> <br> I verified this. Whenever the formula is more than 255 characters, the file opens as corrupt in MS Office Excel 2007. This must be an Excel limitation.<br> <br>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>$objValidation-&gt;setFormula1($formula); <span style=\"color:Green\">// max 255 characters in $formula</span>\r\n</pre>\r\n</div>\r\n<br> Perhaps try to use named ranges as a workaround instead of using a comma-separated list. I think this is considered better practice anyway.</p>",
    "PostedDate": "2009-07-30T11:09:32.423-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "218214",
    "ThreadId": "63917",
    "Html": "<p>Thanks for the answer!</p>\r\n<p>I'll use named ranges for this issue.</p>\r\n<p>Thanks!</p>",
    "PostedDate": "2009-07-31T18:22:44.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]