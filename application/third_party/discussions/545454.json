[
  {
    "Id": "1245791",
    "ThreadId": "545454",
    "Html": "Hi all,\r<br />\n<br />\nI'm using PHPExcel to generate several Excel forms at work, and it's been a real time-saver.  So thank you for that!  But we do have one nagging problem that I haven't been able to resolve: low-level differences between the PHPExcel-generated file and the &quot;real&quot; Excel file.\r<br />\n<br />\nFor example, if I generate a form using PHPExcel and try to load it directly into my company's IT system, it will fail every time.  But if I take that exact same file, open it in Excel, and then re-save it (no other changes), it will work perfectly?\r<br />\n<br />\nIt appears that there are some hidden bytes within the Excel5 (XLS)format that don't quite mesh up exactly with the &quot;real&quot; format.... but what those bytes are, I can't say for sure.<br />\n\r<br />\nHas anybody else encountered this before, and dug into determine what changes when a file is opened/saved like this?  It's a real pain, since we're using this code to generate hundreds of files at a time, and having to open/save each one is quite counter-productive.\r<br />\n<br />\nAnd before you ask, I cannot change to Excel7 (XLSX) format, as our IT system requires XLS only.\r<br />\n<br />\nI am using PHP 5.3.0 with PHPExcel v. 1.7.8.  I am not opposed to switching versions of PHPExcel, but the PHP itself cannot be updated.  Examples of the original file and the opened/saved version can be download from <a href=\"http://162.200.200.89/public/output.zip\" rel=\"nofollow\">http://162.200.200.89/public/output.zip</a><br />\n",
    "PostedDate": "2014-05-15T09:39:50.84-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1245883",
    "ThreadId": "545454",
    "Html": "I've found an ugly workaround to at least get us by for now.<br />\n\r<br />\nBasically, I wrote a VBS script that will loop through the created Excel files, open them, and then re-save them to the same location.  Definitely inelegant, and I'd much rather have a way of creating the file with whatever &quot;native&quot; bits are missing in the first place.\r<br />\n<br />\nThe workaround requires the COM function of PHP, and knowledge of the specific directory where these files are being created.<br />\n\r<br />\nPHP Code:\r<br />\n($db.$i is a randomly-generated file name, incremented $loop times earlier in the code)<br />\n<pre><code>for ($i=1;$i&lt;$loop;$i++){\n    $runfile=&quot;wscript.exe D:\\\\htdocs\\\\Loadsheet\\\\output\\\\saveXLS.vbs \\&quot;D:\\\\htdocs\\\\Loadsheet\\\\output\\\\&quot;.$db.$i.&quot;.xls\\&quot;&quot;;\n    $wait = true;  // similar to start /w in DOS, set to false for no wait\n    $obj = new COM ( 'WScript.Shell' ); \n\n    if ( is_object ( $obj ) ) \n    { \n        $obj-&gt;Run ( 'cmd /C ' . $runfile, 0, $wait ); \n    } \n    else \n    { \n        echo 'can not create wshell object'; \n    } \n\n    $obj = null;\n    }</code></pre>\n\nsaveXLS.vbs:<br />\n<pre><code>Set args = Wscript.Arguments\nwit= args(0)\nDim SpreadSheet\nSpreadSheet = wit\n \nSet objExcel = CreateObject(&quot;Excel.Application&quot;) \nSet objWorkbook = objExcel.Workbooks.Open(Spreadsheet)  'open via passed parameter\n \nSet objRange = objworkbook.worksheets(1).columns(1)  ' this does nothing, but sets focus so re-save works\n \nobjworkbook.save \nobjexcel.quit \n</code></pre>\n\nIt's definitely not the method I want, but it does the trick for now.  Considering that this can generate 100+ XLS files per run, it's a huge timesaver from having to open &amp; re-save each one!\r<br />\n<br />\nIf anyone has any better suggestions, please let me know.... thanks!<br />\n",
    "PostedDate": "2014-05-15T13:02:37.993-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]