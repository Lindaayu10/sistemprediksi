[
  {
    "Id": "509651",
    "ThreadId": "231561",
    "Html": "<p>I had some script that was using PEAR's Excel package that was running into some problems with a lot of data in several worksheets.</p>\r\n<p>The temporary solution to this was to only allow the user to export 1 worksheet at a time (Which is working with up around 130000 rows across multiple worksheets- but bombs with another 100000) - and in the meantime I tried changing the code to PHPExcel to see if it could handle the large amount of data better.</p>\r\n<p>I'm using PHPExcel 1.7.4 (PHP 5.2.8)</p>\r\n<p>At the moment I seem to be having more problems with PHP Excel just to get 1 of the worksheets going - let alone multiple ones.</p>\r\n<p>The data is an export from a mysql database - the tale sizes I'm exporting vary from 40000 to 150000 rows.</p>\r\n<p>&nbsp;</p>\r\n<p>Below is the function of modified from the PEAR version</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>ini_set ( <span style=\"color:#a31515\">'memory_limit'</span>, <span style=\"color:#a31515\">'2500M'</span> );\r\n<span style=\"color:blue\">include_once</span> <span style=\"color:#a31515\">'ccma_bores/classes/PHPExcel.php'</span>;\r\n\r\n$excel= <span style=\"color:blue\">new</span> PHPExcel();\r\n\r\n$excel-&gt;getProperties()-&gt;setTitle(<span style=\"color:#a31515\">&quot;CCMA Bore Export &quot;</span>.date(<span style=\"color:#a31515\">&quot;d-m-Y H:i&quot;</span>));\r\n<br>$sheet_number= 1;<br>........\r\n\r\n\r\n<span style=\"color:blue\">function</span> build_worksheet($row_array,$sheet_name,$repeat_number=1,$column_names=<span style=\"color:#a31515\">&quot;&quot;</span>){\r\n\t\t<span style=\"color:blue\">global</span> $excel;\r\n\t\t<span style=\"color:blue\">global</span> $sheet_number;\r\n\t\t<span style=\"color:green\">//echo &quot;Sheet number: {$sheet_number}&lt;br&gt;&quot;;</span>\r\n\t\t\r\n\t\t$excel-&gt;createSheet($sheet_number);\r\n\t\t$excel-&gt;setActiveSheetIndex($sheet_number);\r\n\t\t<span style=\"color:green\">//echo &quot;Sheet name: {$sheet_name}&lt;br&gt;&quot;;</span>\r\n\t\t$excel-&gt;getActiveSheet()-&gt;setTitle(ucwords($sheet_name));\r\n\t\t$sheet_number++;\r\n\t\tset_time_limit(1000);\r\n\t\t<span style=\"color:blue\">if</span>(count($row_array)==0){\r\n\t\t\t$excel-&gt;getActiveSheet()-&gt;setCellValue(<span style=\"color:#a31515\">'A1'</span>, <span style=\"color:#a31515\">&quot;There is no data for this worksheet&quot;</span>);\r\n\t\t\t<span style=\"color:blue\">return</span>;\r\n\t\t}\r\n\t\t$row_number = 1;\r\n\t\t$x=0;\r\n\t\t$first_row = $row_array[0];\r\n\t\t<span style=\"color:blue\">if</span>(is_array($column_names)){\r\n\t\t\t\r\n\t\t\t<span style=\"color:green\">//Order by prefered order with correct labels </span>\r\n\t\t\t<span style=\"color:blue\">foreach</span> ($column_names <span style=\"color:blue\">as</span> $field_name=&gt;$column_name){\r\n\t\t\t\t$excel-&gt;getActiveSheet()-&gt;setCellValueByColumnAndRow($x,$row_number,$column_name);\r\n\r\n\t\t \t\t$x++;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\r\n\t\t}<span style=\"color:blue\">else</span>{\r\n\t\t\t<span style=\"color:blue\">foreach</span> ($first_row <span style=\"color:blue\">as</span> $field =&gt; $value){\r\n\t\t\t\t$excel-&gt;getActiveSheet()-&gt;setCellValueByColumnAndRow($x,$row_number,$field);\r\n\r\n\t \t\t\t$x++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t$row_number = 2;\r\n\t\t<span style=\"color:green\">//$test_array = array(array(&quot;row1&quot;,&quot;row2&quot;,&quot;row3&quot;),array(&quot;b1&quot;,&quot;b2&quot;,&quot;b3&quot;)); //Can get fromArray function to work with small arrays</span>\r\n\t\t<span style=\"color:green\">//$excel-&gt;getActiveSheet()-&gt;fromArray($row_array,&quot;&quot;,&quot;A2&quot;); //Cannot get fromArray function to work with large arrays</span>\r\n\t\t<span style=\"color:blue\">foreach</span> ($row_array <span style=\"color:blue\">as</span> $row){\r\n\t\t\t\t$x=0;\r\n\t\t\t\t$row_values = <span style=\"color:blue\">array</span>();\t\t\r\n\t\t\t\t<span style=\"color:blue\">if</span>(is_array($column_names)){\r\n\t\t\t\t\t<span style=\"color:green\">//Order by prefered order with correct labels</span>\r\n\t\t\t\t\t<span style=\"color:blue\">foreach</span> ($column_names <span style=\"color:blue\">as</span> $field_name=&gt;$column_name){\r\n\t\t\t\t\t\t$value = $row[$field_name];\r\n\t\t\t\t\t\t$row_values[$column_name] = $value; \r\n\t\t\t\t\t\t$excel-&gt;getActiveSheet()-&gt;setCellValueByColumnAndRow($x,$row_number,$value);\r\n\t\t\t\t\t\t\r\n\t\t\t \t\t\t$x++; \r\n\t\t\t\t\t}\r\n\t\t\t\t}<span style=\"color:blue\">else</span>{\r\n\t\t\t\t\t<span style=\"color:blue\">foreach</span> ($row <span style=\"color:blue\">as</span> $field=&gt;$value){\r\n\t\t\t\t\t\t$row_values[$field] = $value;\r\n\t\t\t\t\t\t$excel-&gt;getActiveSheet()-&gt;setCellValueByColumnAndRow($x,$row_number,$value);\t\r\n\t\t\t \t\t\t\r\n\t\t\t \t\t\t$x++; \r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t<span style=\"color:green\">//$excel-&gt;getActiveSheet()-&gt;fromArray($row_values,&quot;&quot;,&quot;A{$row_number}&quot;);//Cannot get fromArray function to work with large arrays</span>\r\n\t\t\t\t$row_number++;\r\n\t\t\t\t<span style=\"color:blue\">if</span>($row_number&gt;=10000){\r\n\t\t\t\t\t<span style=\"color:green\">//Testing limit before timeouts</span>\r\n\t\t\t\t\t<span style=\"color:blue\">return</span>; \r\n\t\t\t\t}\r\n\t\t\t\t<span style=\"color:green\">/*if($row_number==65536){ //Had to disable large worksheet splitting as program was timeing out\r\n\t\t\t\t\t$row_array = array_slice($row_array,$row_number-1,true);\r\n\t\t\t\t\t//Start a new worksheet if maximum row value reached\r\n\t\t\t\t\t\r\n\t\t\t\t\tbuild_workskeet($row_array,$sheet_name,$repeat_number+1,$column_names);\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn ;\r\n\t\t\t\t}*/</span>\r\n\t\t\t\t\r\n\t\t}\t\r\n\t\t\r\n\t}\r\n\r\n\r\n\r\n\r\n.........\r\nbuild_worksheet($bores,<span style=\"color:#a31515\">'bores'</span>,<span style=\"color:#a31515\">&quot;&quot;</span>,$BORE_COLUMN_NAMES);\r\n\r\n\theader(<span style=\"color:#a31515\">'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'</span>);\r\n\theader(<span style=\"color:#a31515\">'Content-Disposition: attachment;filename=&quot;bore-export-'</span>.date(<span style=\"color:#a31515\">'d-m-y'</span>).<span style=\"color:#a31515\">'.xls&quot;'</span>);\r\n\theader(<span style=\"color:#a31515\">'Cache-Control: max-age=0'</span>);\r\n\t\r\n\t$objWriter = PHPExcel_IOFactory::createWriter($excel, <span style=\"color:#a31515\">'Excel2007'</span>);\r\n\t$objWriter-&gt;save(<span style=\"color:#a31515\">'php://output'</span>);\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<pre><br></pre>\r\n<p>$row_array is basically just an associative array of mysql query rows.</p>\r\n<p>I've had to put some manual limits on the number of rows- I haven't been able to make it work successfully with more than 10000 rows - the setCell function starts taking too long. (It seems to get exponentially slower- if I go to 40000 it bombs without error after a long time)</p>\r\n<p>I've had no luck with using the fromArray() function - it seems to get no results when the array is large</p>\r\n<p>There is a function to split the worksheet when its greater than Excels max rows - but I've had to disable to this as it cant get near it,</p>\r\n<p>What can I do to tidy up memory and time for the setCell function to work with large tables?</p>\r\n<p>Are there any other ways to create large spreadsheets (eg: Compiling 1 workbook at a time and stitching them together in different scripts?)</p>",
    "PostedDate": "2010-10-19T15:56:17.407-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510968",
    "ThreadId": "231561",
    "Html": "\r\n<p>You'd certainly get better memory usage by building the worksheet one row at a time as you fetch the rows from your database; rather than loading all the database rows into an array and then building the worksheet from that, whichit means you have both the\r\n database array and the worksheet fully memory resident at the same time.</p>\r\n",
    "PostedDate": "2010-10-22T02:18:19.907-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512482",
    "ThreadId": "231561",
    "Html": "\r\n<p>Unfortunately &nbsp;thats not the problem - but I tried it for a test anyway and noticed no difference.</p>\r\n<p>&nbsp;</p>\r\n<p>Row 100 4.99020791053772 secs<br>\r\nRow 100 3.546891927719116 secs<br>\r\nRow 1000 9.283177137374878 secs<br>\r\nRow 5000 35.76950788497925 secs<br>\r\nRow 10000 68.98192405700684 secs<br>\r\nPeak memory usage: 712.5 MB</p>\r\n<p>Beyond that its bonbs without error - maybe its just browser timeouts- i'll try running it from the server</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-25T19:51:04.21-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512487",
    "ThreadId": "231561",
    "Html": "\r\n<p>Hmm - same results from server - the function just bombs without any PHP error whent theres more than about 15000 rows. (The use of the copied array adds very little overhead in the scheme of things)</p>\r\n<p>It seems to use a lot more memory than the PEAR Excel writer - so at the moment I cant even build 1 large worksheet- let &nbsp;alone the several worksheets I needed&nbsp;</p>\r\n<p>[26-Oct-2010 13:50:44] CCMA BORES Row 500 5.823396921157837 secs</p>\r\n<p>[26-Oct-2010 13:50:44] CCMA BORES Peak memory usage: 54 MB &nbsp;Export Saved Successfully</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>[26-Oct-2010 13:52:02] CCMA BORES Row 5000 34.06914901733398 secs</p>\r\n<p>[26-Oct-2010 13:52:02] CCMA BORES Peak memory usage: 365.75 MB&nbsp;Export Saved Successfully</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>[26-Oct-2010 13:54:52] CCMA BORES Row 15000 97.50964403152466 secs</p>\r\n<p>[26-Oct-2010 13:54:52] CCMA BORES Peak memory usage: 1073.25 MB&nbsp;Export Saved Successfully</p>\r\n<p>&nbsp;</p>\r\n<p><br>\r\n[26-Oct-2010 14:08:36] CCMA BORES Row 30000 195.9688181877136 secs</p>\r\n<p>[26-Oct-2010 14:08:36] CCMA BORES Peak memory usage: 2127.5 MB</p>\r\n<p>&nbsp;</p>\r\n<p>On those numbers -&nbsp;with 3gb ram in the system I cant build a worksheet with 45000 rows for the worksheet - let alone multiple worksheets.</p>\r\n<p><br>\r\n<br>\r\nIs there a more efficient way I can use apart from setCellValueByColumnAndRow?</p>\r\n<p>What is the largest worksheet size possible/been done before?</p>\r\n<p>Is there a way to build the spreadsheet part at a time so I can schedule 5000 rows at a time in different scripts?</p>\r\n<p>&nbsp;</p>\r\n<p>Example rows:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Bore ID\tParish\tParish No\tLongitude (GDA94)\tLatitude (GDA94)\tEasting (MGA)\tNorthing (MGA)\tMap zone\tElevation (m AHD)\tElevation (digitised)\tConstructed date\tConstructed depth\tAuthority\tAuthority Code\tBore type\tUse 1\tUse 2\tUse 3\tMonitoring Status\tMonitoring Frequency\tInitial SWL (m)\tInitial EC (mS/cm)\tInitial TDS (mg/L)\tDriller\tDrill rig\tDrilling Method\tBore licence no\tHeadworks / upstand\tHeadworks height (m)\tCollar\tSite description\tLand use\tData source\tOld Bore ID\tSite photo\tPhoto details\tSite access\tBore access\tLandholder name\tLandholder contact\tOther source\tComments\tLocal bore name\tLocation Accuracy\r\n100001\tWANGOOM\t3729\t142.48619\t-38.318\t629921.43\t5757856.42\t54\t\t\t1991-08-06 00:00:00\t42.67\tNot Known\t\tGroundwater\tDomestic\t\t\tN\t\t\t\t\t\t\tDown-Hole Hammer Percussion\t\t\t0\t\t\t\tGMS Mar10\t15135\t\t\t\t\t\t\t\tparish doesn't match, but located on boundary of correct parish.\t\t\r\n100002\tWANGOOM\t3729\t142.509182\t-38.356636\t631861.44\t5753536.41\t54\t\t\t1991-06-20 00:00:00\t48.5\tNot Known\t\tGroundwater\tDomestic\t\t\tN\t\t\t\t\t\t\tRotary Air\t\t\t0\t\t\t\tGMS Mar10\t15136\t\t\t\t\t\t\t\tParish matches, Bore Location may be OK.\t\t\r\n100003\tWANGOOM\t3729\t142.539971\t-38.356777\t634551.45\t5753476.41\t54\t\t\t1991-10-07 00:00:00\t54.86\tNot Known\t\tGroundwater\tDomestic and Stock\t\t\tN\t\t\t\t\t\t\tCable Tool, Percussion\t\t\t0\t\t\t\tGMS Mar10\t15137\t\t\t\t\t\t\t\tParish matches, Bore Location may be OK.\t\t\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Bore ID Parish Parish No Longitude (GDA94) Latitude (GDA94) Easting (MGA) Northing (MGA) Map zone Elevation (m AHD) Elevation (digitised) Constructed date Constructed depth Authority Authority Code Bore type Use 1 Use 2 Use 3 Monitoring Status Monitoring\r\n Frequency Initial SWL (m) Initial EC (mS/cm) Initial TDS (mg/L) Driller Drill rig Drilling Method Bore licence no Headworks / upstand Headworks height (m) Collar Site description Land use Data source Old Bore ID Site photo Photo details Site access Bore access\r\n Landholder name Landholder contact Other source Comments Local bore name Location Accuracy 100001 WANGOOM 3729 142.4862 -38.318 629921.4 5757856 54 &nbsp; &nbsp; 1991-08-06 00:00:00 42.67 Not Known Groundwater Domestic &nbsp; &nbsp; N &nbsp; &nbsp; &nbsp;\r\n &nbsp; &nbsp; &nbsp; Down-Hole Hammer Percussion 0 &nbsp; &nbsp; &nbsp; GMS Mar10 15135 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; parish doesn't match, but located on boundary of correct parish. 100002 WANGOOM 3729 142.5092 -38.3566 631861.4 5753536\r\n 54 &nbsp; &nbsp; 1991-06-20 00:00:00 48.5 Not Known Groundwater Domestic &nbsp; &nbsp; N &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Rotary Air &nbsp; 0 &nbsp; &nbsp; &nbsp; GMS Mar10 15136 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Parish matches, Bore\r\n Location may be OK.</p>\r\n",
    "PostedDate": "2010-10-25T20:23:00.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512557",
    "ThreadId": "231561",
    "Html": "\r\n<p>Hmm, a lot more is possible, with the right hardware :P</p>\r\n<p>Takes abobut 8 hours of querying....and a lot of memory....</p>\r\n<p>20101019 07:45:25 Query complete! (1.18 seconds, 554041 rows) <br>\r\n20101019 07:57:06 Query complete! (27.37 seconds, 6500 rows)<br>\r\n20101019 14:28:39 Report... took: 54279.99 seconds <br>\r\n20101019 14:28:39 Peak memory usage: 26489 MB</p>\r\n<p>&nbsp;</p>\r\n<p>However, I too would be very happy if we could trim the mem usage down. Atleast for xlsx a partial solution would be to have a streaming export. That would potentially save 50% memory usage (as the results are, I believe, copied to the export object).</p>\r\n",
    "PostedDate": "2010-10-26T00:57:28.903-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512576",
    "ThreadId": "231561",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>pfeely wrote:</strong><br>\r\n<p>Hmm - same results from server - the function just bombs without any PHP error whent theres more than about 15000 rows. (The use of the copied array adds very little overhead in the scheme of things)</p>\r\n<p>It seems to use a lot more memory than the PEAR Excel writer - so at the moment I cant even build 1 large worksheet- let &nbsp;alone the several worksheets I needed&nbsp;&nbsp;</p>\r\n</blockquote>\r\n<p>I must say I'm surprised that processing a row at a time as it's read from the database uses as much memory as building an array of data from the database before passing it to PHPExcel to process. That just seems intrinsically wrong... not least because\r\n PHP simply needs more memory to hold a large 2D array than it does a single row array.</p>\r\n<p>PHPExcel does use a lot more memory than PEAR, and it isn't as fast... it does a lot more than PEAR (reading and writing, multiple formats, rich text, conditional formatting, etc). We've been striving for over a year now to reduce the memory overhead, and\r\n to increase speed, and have made significant inroads in that time... but it is still slower and more memory-hungry than PEAR.</p>\r\n<p>&nbsp;</p>\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>pfeely wrote:</strong><br>\r\n<p>Is there a more efficient way I can use apart from setCellValueByColumnAndRow?&nbsp;</p>\r\n</blockquote>\r\n<p>$excel-&gt;getActiveSheet()-&gt;fromArray($row_array,NULL,'A1'); should work, but you've already tried that... don't know why it didn't work for you, although looking over the method, I can see how to boost its speed slightly.</p>\r\n<p>setCellValue() is fractionally faster than setCellValueByColumnAndRow(), but it's microseconds difference... one call to PHPExcel_Cell::stringFromColumnIndex() and a concatenation.</p>\r\n<p>Your problem seems to be memory rather than simply speed: to conserve memory, look to using cell caching; though there's a cost in speed. My rule of thumb is 1k/cell, doubled when you intend to write the workbook, plus between 10 and 25MB for the code itself.\r\n Add 60% to each figure if you're running 64-bit PHP. If you're using cell caching (particularly php://temp or diskISAM), you can reduce that 1k/cell to about 330bytes/cell... you can reduce it even further with APC, memcache or wincache, but that requires\r\n adequate memory allocated to your cache (about 1.2k/cell).</p>\r\n<p>If you're working with larger workbooks, then CLI is better than web interface to prevent timeouts.</p>\r\n<p>&nbsp;</p>\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>pfeely wrote:</strong><br>\r\n<p>What is the largest worksheet size possible/been done before?&nbsp;</p>\r\n</blockquote>\r\n<p>I know that both borft and myself are working with large workbooks: in my case, 64k rows/worksheet for 2-3 worksheets with 100&#43; columns; but both of us have the available memory to throw at PHP and the time to process the workbooks.</p>\r\n<p>&nbsp;</p>\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>pfeely wrote:</strong><br>\r\n<p>Is there a way to build the spreadsheet part at a time so I can schedule 5000 rows at a time in different scripts?</p>\r\n&nbsp;</blockquote>\r\n<p>Not without a complete rewrite of PHPExcel that totally changes the way that it works, and that significantly reduces the ability of the library to work with different file formats, or switching to a non-PHP solution... unless you're outputting to CSV (and\r\n in that case, I'd assume you'd use PHP's standard fputcsv().</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-26T01:44:05.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513009",
    "ThreadId": "231561",
    "Html": "\r\n<p>Thanks</p>\r\n<p>&nbsp;</p>\r\n<p>Basically the way we have our applications configured mysql query results return arrays (For ease of use - and&nbsp;preparation&nbsp;to switch over to a mysqlnd function ) - so thats the reason its the way it is - even though we could save a little bit of\r\n memory by using other methods it</p>\r\n<p>wouldnt change the end result.</p>\r\n<p>&nbsp;</p>\r\n<p>Our server isn't bad/slow - its just a production server with 100 websites on it - so I'm not real keen on turning the memory limit off and letting it run for 8 hours. (Even though it should just chug away and eat into the swap file)</p>\r\n<p>&nbsp;</p>\r\n<p>Anyway - thanks for your help &nbsp;- I might need to go back to a csv for this one.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-26T15:03:10.57-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]