[
  {
    "Id": "431586",
    "ThreadId": "209472",
    "Html": "<p>Hi there.</p>\r\n<p>I couldn't getCalculatedValue on a cell wich had a formula that was referencing cells by names.</p>\r\n<p>The question is: if ...</p>\r\n<p>A1 has the rangeName = operand1</p>\r\n<p>A2 has the rangeName = operand2</p>\r\n<p>and A3 is '=operand1+operand2</p>\r\n<p>then will the calculator return the calucalted value for that A3 cell?</p>\r\n<p>I couldn't.</p>\r\n<p>I think because the calculator doesn't read the correct value for a cell referenced by name instead of coordinates.</p>\r\n<p>&nbsp;</p>\r\n<p>So I am using this function for outputting debug info:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Green\">/*\r\n     * Dumps the cell value, calculated value and processing\r\n     * stack for a PHPExcel cell.\r\n     *\r\n     * @param PHPExcel_Worksheet $sheet\r\n     * @param string $cell   e.g. 'A1', 'C3', etc.\r\n     */</span>\r\n    <span style=\"color:Blue\">function</span> debugPHPExcelCell( $sheet, $cell )\r\n\t{\r\n        <span style=\"color:Green\">//$sheet = $objPHPExcel-&gt;getActiveSheet();</span>\r\n        PHPExcel_Calculation::getInstance()-&gt;writeDebugLog = true;\r\n\r\n        $cellValue = $sheet-&gt;getCell($cell)-&gt;getValue();\r\n        <span style=\"color:Blue\">echo</span> <span style=\"color:#A31515\">'&lt;b&gt;'</span>.$cell.<span style=\"color:#A31515\">' Value is &lt;/b&gt;'</span>.$cellValue.<span style=\"color:#A31515\">&quot;&lt;br /&gt;\\n&quot;</span>;\r\n\r\n        <span style=\"color:Blue\">echo</span> <span style=\"color:#A31515\">'&lt;b&gt;Parser Stack :-&lt;/b&gt;&lt;pre&gt;'</span>;\r\n        $tokens = PHPExcel_Calculation::getInstance()-&gt;parseFormula($cellValue);\r\n        print_r($tokens);\r\n        <span style=\"color:Blue\">echo</span> <span style=\"color:#A31515\">'&lt;/pre&gt;'</span>;\r\n\r\n        $cellValue = $sheet-&gt;getCell($cell)-&gt;getCalculatedValue();\r\n        <span style=\"color:Blue\">echo</span> <span style=\"color:#A31515\">'&lt;b&gt;'</span>.$cell.<span style=\"color:#A31515\">' Calculated Value is &lt;/b&gt;'</span>.$cellValue.<span style=\"color:#A31515\">&quot;&lt;br /&gt;\\n&quot;</span>;\r\n\r\n        <span style=\"color:Blue\">echo</span> <span style=\"color:#A31515\">'&lt;h3&gt;Evaluation Log:&lt;/h3&gt;&lt;pre&gt;'</span>;\r\n        print_r(PHPExcel_Calculation::getInstance()-&gt;debugLog);\r\n        <span style=\"color:Blue\">echo</span> <span style=\"color:#A31515\">'&lt;/pre&gt;'</span>;\r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>The script that reproduce the problem is like:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">require_once</span>( <span style=\"color:#A31515\">'Excel/PHPExcel.php'</span>) ;\r\n<span style=\"color:Blue\">require_once</span>( <span style=\"color:#A31515\">'Excel/PHPExcel/IOFactory.php'</span>) ;\r\n<span style=\"color:Blue\">require_once</span>( <span style=\"color:#A31515\">'Excel/PHPExcel/NamedRange.php'</span>) ;\r\n<span style=\"color:Blue\">require_once</span>( <span style=\"color:#A31515\">'Excel/PHPExcel/Calculation.php'</span>) ;\r\n\r\n\r\n<span style=\"color:Green\">// read the xls file input</span>\r\n$objPHPExcel = PHPExcel_IOFactory::load( <span style=\"color:#A31515\">&quot;sum_cell_name.xls&quot;</span> );\r\n<span style=\"color:Green\">// read the coordinates of the named cell</span>\r\n$namedRange1 = $objPHPExcel-&gt;getNamedRange( <span style=\"color:#A31515\">'operand1'</span> )  ;\r\n$range1 = $namedRange1-&gt;getRange() ;\r\n\r\n<span style=\"color:Green\">// read the coordinates of the named cell</span>\r\n$namedRange2 = $objPHPExcel-&gt;getNamedRange( <span style=\"color:#A31515\">'operand2'</span> )  ;\r\n$range2 = $namedRange2-&gt;getRange() ;\r\n\r\n<span style=\"color:Green\">// read the coordinates of the named cell: TOTAL</span>\r\n$namedRange3 = $objPHPExcel-&gt;getNamedRange( <span style=\"color:#A31515\">'total'</span> )  ;\r\n$range3 = $namedRange3-&gt;getRange() ;\r\n\r\n\r\n\r\n<span style=\"color:Green\">// retrieve the worksheet</span>\r\n$objPHPExcel-&gt;setActiveSheetIndex(0)  ;\r\n$worksheet = $objPHPExcel-&gt;getActiveSheet();\r\n\r\n<span style=\"color:Green\">// debug</span>\r\ndebugPHPExcelCell(    $worksheet , $range3 )   ;\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>The autput will be:</p>\r\n<p><strong>Parser Stack :-</strong></p>\r\n<pre>Array<br>(<br>    [0] =&gt; Array<br>        (<br>            [type] =&gt; Cell Reference<br>            [value] =&gt; operand1<br>            [reference] =&gt; OPERAND1<br>        )<br><br>    [1] =&gt; Array<br>        (<br>            [type] =&gt; Cell Reference<br>            [value] =&gt; operand2<br>            [reference] =&gt; OPERAND2<br>        )<br><br>    [2] =&gt; Array<br>        (<br>            [type] =&gt; Binary Operator<br>            [value] =&gt; +<br>            [reference] =&gt; <br>        )<br><br>)<br></pre>\r\n<p>And this is the output of the log:</p>\r\n<pre>    [0] =&gt; C6 -&gt; Evaluating Cell operand1 in current worksheet<br>    [1] =&gt; C6 -&gt; Evaluation Result for cell operand1 is a null value<br>    [2] =&gt; C6 -&gt; Evaluating Cell operand2 in current worksheet<br>    [3] =&gt; C6 -&gt; Evaluation Result for cell operand2 is a null value<br>    [4] =&gt; C6 -&gt; Evaluating  + <br>    [5] =&gt; C6 -&gt; Evaluation Result is an integer number with a value of 0<br><br><br><br>I am using PHPExcel v.1.7.1<br>php 5.3.2<br>apache 2.2.15<br>windows XP SP3<br></pre>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-04-15T11:02:13.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "431661",
    "ThreadId": "209472",
    "Html": "<p>You're using version 1.7.2 or below, and the calculation engine in those versions interprets a series of letters followed by a numeric (e.g. OPERAND1 or OPERAND2) as a standard cell address, column OPERAND, row 1 or 2. This was identified as an error, and has been fixed in the latest SVN code, available currently through the daily downloads, and that will be part of the 1.7.3 release.</p>\r\n<p>Alternatively, use a different name for your named range that doesn't fall foul of this error, such as OPERAND_1</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks for the detailed breakdown. What you did is exactly my first step when trying to identify a problem in the calculation engine, and it makes diagnosing problems a whole lot easier.</p>",
    "PostedDate": "2010-04-15T15:01:07.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "433643",
    "ThreadId": "209472",
    "Html": "<p>Really thanks a lot.</p>",
    "PostedDate": "2010-04-21T07:19:18.397-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]