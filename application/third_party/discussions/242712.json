[
  {
    "Id": "553057",
    "ThreadId": "242712",
    "Html": "\r\n<p>Hi everybody !!</p>\r\n<p>I have a huge file that I would like to read so I can fill my mysql database. I tried to use the PHPExcel library but I get an error when I want to load my file :</p>\r\n<p><strong>Fatal error</strong>: Allowed memory size of 1610612736 bytes exhausted (tried to allocate 22 bytes) in\r\n<strong>C:\\Wamp\\www\\Classes\\PHPExcel\\Worksheet.php</strong> on line <strong>964</strong></p>\r\n<p>I have already increase the value of the memory_limit in the php.ini file but it's still not enough. My Excel file is 55MB (5 109 719 cells). Do you have any idea how to solve this problem ? Thanks :)</p>\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"76\" height=\"17\">\r\n<col width=\"78\">\r\n<tbody>\r\n<tr height=\"15\">\r\n<td width=\"78\" height=\"15\" align=\"right\" style=\"height:11.25pt; width:59pt\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n",
    "PostedDate": "2011-01-21T01:19:32.597-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "553091",
    "ThreadId": "242712",
    "Html": "On 21/01/2011 09:19, kaptainchok wrote:\r\n<blockquote type=\"cite\">\r\n<p>I have a huge file that I would like to read so I can fill my mysql database. I tried to use the PHPExcel library but I get an error when I want to load my file :</p>\r\nI have already increase the value of the memory_limit in the php.ini file but it's still not enough. My Excel file is 55MB (5 109 719 cells). Do you have any idea how to solve this problem ? Thanks :)</blockquote>\r\nThere's plenty been written about the memory usage of PHPExcel here on the forum; so reading through some of those previous discussions might give you a few ideas. PHPExcel holds an &quot;in memory&quot; representation of a spreadsheet, and is susceptible to PHP memory\r\n limitations.<br>\r\n<br>\r\nThe &quot;rule of thumb&quot; that I've always used is an average of about 1k/cell, so your 5M cell workbook is going to require 5GB of memory. However, there are a number of ways that you can reduce that requirement. These can be combined, depending on exactly what\r\n information you need to access within your workbook, and what you want to do with it.<br>\r\n<br>\r\nIf you have multiple worksheets, but don't need to load all of them, then you can limit the worksheets that the Reader will load using the setLoadSheetsOnly() method.<br>\r\nTo load a single named worksheet:<br>\r\n<pre><span style=\"color:rgb(0,0,187)\">$inputFileType </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">'Excel5'</span><span style=\"color:rgb(0,119,0)\">; \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(0,0,187)\">$inputFileName </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">'./sampleData/example1.xls'</span><span style=\"color:rgb(0,119,0)\">; </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(0,0,187)\">$sheetname </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">'Data Sheet #2'</span><span style=\"color:rgb(0,119,0)\">; \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(255,128,0)\">/**  Create a new Reader of the type defined in $inputFileType  **/</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objReader </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">PHPExcel_IOFactory</span><span style=\"color:rgb(0,119,0)\">::</span><span style=\"color:rgb(0,0,187)\">createReader</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$inputFileType</span><span style=\"color:rgb(0,119,0)\">);</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(255,128,0)\">/**  Advise the Reader of which WorkSheets we want to load  **/ \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objReader</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">setLoadSheetsOnly</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$sheetname</span><span style=\"color:rgb(0,119,0)\">); \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(255,128,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\">/**  Load $inputFileName to a PHPExcel Object  **/</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objPHPExcel </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">$objReader</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">load</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$inputFileName</span><span style=\"color:rgb(0,119,0)\">);</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<span style=\"color:rgb(0,119,0)\"><br>\r\n<font color=\"#000000\">Or you can specify several worksheets with one call to </font>\r\n</span>setLoadSheetsOnly() by <span style=\"color:rgb(0,119,0)\"><font color=\"#000000\">passing an array of names:<br>\r\n<br>\r\n</font></span>\r\n<pre><span style=\"color:rgb(0,0,187)\">$inputFileType </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">'Excel5'</span><span style=\"color:rgb(0,119,0)\">; \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(0,0,187)\">$inputFileName </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">'./sampleData/example1.xls'</span><span style=\"color:rgb(0,119,0)\">; </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(0,0,187)\">$sheetnames </span><span style=\"color:rgb(0,119,0)\">= array(</span><span style=\"color:rgb(221,0,0)\">'Data Sheet #1'</span><span style=\"color:rgb(0,119,0)\">,</span><span style=\"color:rgb(221,0,0)\">'Data Sheet #3'</span><span style=\"color:rgb(0,119,0)\">); \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<span style=\"color:rgb(255,128,0)\">/** Create a new Reader of the type defined in $inputFileType **/</span>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objReader </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">PHPExcel_IOFactory</span><span style=\"color:rgb(0,119,0)\">::</span><span style=\"color:rgb(0,0,187)\">createReader</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$inputFileType</span><span style=\"color:rgb(0,119,0)\">);</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<span style=\"color:rgb(255,128,0)\">/** Advise the Reader of which WorkSheets we want to load **/\r\n</span>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objReader</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">setLoadSheetsOnly</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$sheetnames</span><span style=\"color:rgb(0,119,0)\">); \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(255,128,0)\">/**  Load $inputFileName to a PHPExcel Object  **/</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objPHPExcel </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">$objReader</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">load</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$inputFileName</span><span style=\"color:rgb(0,119,0)\">);</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<br>\r\n<br>\r\nIf you only need to access part of a worksheet, then you can define a Read Filter to identify just which cells you actually want to load:<br>\r\n<br>\r\n<pre><span style=\"color:rgb(0,0,187)\">$inputFileType </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">'Excel5'</span><span style=\"color:rgb(0,119,0)\">; \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(0,0,187)\">$inputFileName </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">'./sampleData/example1.xls'</span><span style=\"color:rgb(0,119,0)\">; </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(0,0,187)\">$sheetname </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">'Data Sheet #3'</span><span style=\"color:rgb(0,119,0)\">; \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(255,128,0)\">/**  Define a Read Filter class implementing PHPExcel_Reader_IReadFilter  */ \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,119,0)\">class </span><span style=\"color:rgb(0,0,187)\">MyReadFilter </span><span style=\"color:rgb(0,119,0)\">implements </span><span style=\"color:rgb(0,0,187)\">PHPExcel_Reader_IReadFilter </span></pre>\r\n<pre><span style=\"color:rgb(0,0,187)\"></span><span style=\"color:rgb(0,119,0)\">{ </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">    public function </span><span style=\"color:rgb(0,0,187)\">readCell</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$column</span><span style=\"color:rgb(0,119,0)\">, </span><span style=\"color:rgb(0,0,187)\">$row</span><span style=\"color:rgb(0,119,0)\">, </span><span style=\"color:rgb(0,0,187)\">$worksheetName </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">''</span><span style=\"color:rgb(0,119,0)\">) { </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">        </span><span style=\"color:rgb(255,128,0)\">//  Read rows 1 to 7 and columns A to E only \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\">        </span><span style=\"color:rgb(0,119,0)\">if (</span><span style=\"color:rgb(0,0,187)\">$row </span><span style=\"color:rgb(0,119,0)\">&gt;= </span><span style=\"color:rgb(0,0,187)\">1 </span><span style=\"color:rgb(0,119,0)\">&& </span><span style=\"color:rgb(0,0,187)\">$row </span><span style=\"color:rgb(0,119,0)\">&lt;= </span><span style=\"color:rgb(0,0,187)\">7</span><span style=\"color:rgb(0,119,0)\">) { </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">            if (</span><span style=\"color:rgb(0,0,187)\">in_array</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$column</span><span style=\"color:rgb(0,119,0)\">,</span><span style=\"color:rgb(0,0,187)\">range</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(221,0,0)\">'A'</span><span style=\"color:rgb(0,119,0)\">,</span><span style=\"color:rgb(221,0,0)\">'E'</span><span style=\"color:rgb(0,119,0)\">))) { \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">                return </span><span style=\"color:rgb(0,0,187)\">true</span><span style=\"color:rgb(0,119,0)\">; </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">            } </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">        } \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">        return </span><span style=\"color:rgb(0,0,187)\">false</span><span style=\"color:rgb(0,119,0)\">; </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">    } </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">} </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(255,128,0)\">/**  Create an Instance of our Read Filter  **/ \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$filterSubset </span><span style=\"color:rgb(0,119,0)\">= new </span><span style=\"color:rgb(0,0,187)\">MyReadFilter</span><span style=\"color:rgb(0,119,0)\">(); \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<span style=\"color:rgb(255,128,0)\">/** Create a new Reader of the type defined in $inputFileType **/</span>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objReader </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">PHPExcel_IOFactory</span><span style=\"color:rgb(0,119,0)\">::</span><span style=\"color:rgb(0,0,187)\">createReader</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$inputFileType</span><span style=\"color:rgb(0,119,0)\">);</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\">/**  Advise the Reader of which WorkSheets we want to load \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\">     It's more efficient to limit sheet loading in this manner rather than coding it into a Read Filter  **/ \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objReader</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">setLoadSheetsOnly</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$sheetname</span><span style=\"color:rgb(0,119,0)\">); \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">echo </span><span style=\"color:rgb(221,0,0)\">'Loading Sheet using filter<br>'</span><span style=\"color:rgb(0,119,0)\">; </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(255,128,0)\">/**  Tell the Reader that we want to use the Read Filter that we've Instantiated  **/ \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objReader</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">setReadFilter</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$filterSubset</span><span style=\"color:rgb(0,119,0)\">); \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(255,128,0)\">/**  Load only the rows and columns that match our filter from $inputFileName to a PHPExcel Object  **/</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objPHPExcel </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">$objReader</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">load</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$inputFileName</span><span style=\"color:rgb(0,119,0)\">);</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<br>\r\nUsing read filters, you can also read a workbook in &quot;chunks&quot;, so that only a single chunk is memory-resident at any one time:<br>\r\n<br>\r\n<pre><span style=\"color:rgb(0,0,187)\">$inputFileType </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">'Excel5'</span><span style=\"color:rgb(0,119,0)\">; \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(0,0,187)\">$inputFileName </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">'./sampleData/example2.xls'</span><span style=\"color:rgb(0,119,0)\">; </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(255,128,0)\">/**  Define a Read Filter class implementing PHPExcel_Reader_IReadFilter  */ \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,119,0)\">class </span><span style=\"color:rgb(0,0,187)\">chunkReadFilter </span><span style=\"color:rgb(0,119,0)\">implements </span><span style=\"color:rgb(0,0,187)\">PHPExcel_Reader_IReadFilter </span></pre>\r\n<pre><span style=\"color:rgb(0,0,187)\"></span><span style=\"color:rgb(0,119,0)\">{ </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">    private </span><span style=\"color:rgb(0,0,187)\">$_startRow </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">0</span><span style=\"color:rgb(0,119,0)\">; </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">    private </span><span style=\"color:rgb(0,0,187)\">$_endRow </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">0</span><span style=\"color:rgb(0,119,0)\">; </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">    </span><span style=\"color:rgb(255,128,0)\">/**  Set the list of rows that we want to read  */ \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\">    </span><span style=\"color:rgb(0,119,0)\">public function </span><span style=\"color:rgb(0,0,187)\">setRows</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$startRow</span><span style=\"color:rgb(0,119,0)\">, </span><span style=\"color:rgb(0,0,187)\">$chunkSize</span><span style=\"color:rgb(0,119,0)\">) { \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">        </span><span style=\"color:rgb(0,0,187)\">$this</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">_startRow    </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">$startRow</span><span style=\"color:rgb(0,119,0)\">; \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">        </span><span style=\"color:rgb(0,0,187)\">$this</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">_endRow      </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">$startRow </span><span style=\"color:rgb(0,119,0)\">&#43; </span><span style=\"color:rgb(0,0,187)\">$chunkSize</span><span style=\"color:rgb(0,119,0)\">; </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">    } \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">    public function </span><span style=\"color:rgb(0,0,187)\">readCell</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$column</span><span style=\"color:rgb(0,119,0)\">, </span><span style=\"color:rgb(0,0,187)\">$row</span><span style=\"color:rgb(0,119,0)\">, </span><span style=\"color:rgb(0,0,187)\">$worksheetName </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">''</span><span style=\"color:rgb(0,119,0)\">) { </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">        </span><span style=\"color:rgb(255,128,0)\">//  Only read the heading row, and the rows that are configured in $this-&gt;_startRow and $this-&gt;_endRow \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\">        </span><span style=\"color:rgb(0,119,0)\">if ((</span><span style=\"color:rgb(0,0,187)\">$row </span><span style=\"color:rgb(0,119,0)\">== </span><span style=\"color:rgb(0,0,187)\">1</span><span style=\"color:rgb(0,119,0)\">) || (</span><span style=\"color:rgb(0,0,187)\">$row </span><span style=\"color:rgb(0,119,0)\">&gt;= </span><span style=\"color:rgb(0,0,187)\">$this</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">_startRow </span><span style=\"color:rgb(0,119,0)\">&& </span><span style=\"color:rgb(0,0,187)\">$row </span><span style=\"color:rgb(0,119,0)\">&lt; </span><span style=\"color:rgb(0,0,187)\">$this</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">_endRow</span><span style=\"color:rgb(0,119,0)\">)) { \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">            return </span><span style=\"color:rgb(0,0,187)\">true</span><span style=\"color:rgb(0,119,0)\">; </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">        } </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">        return </span><span style=\"color:rgb(0,0,187)\">false</span><span style=\"color:rgb(0,119,0)\">; </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">    } \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">} </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\">/**  Create a new Reader of the type defined in $inputFileType  **/</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objReader </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">PHPExcel_IOFactory</span><span style=\"color:rgb(0,119,0)\">::</span><span style=\"color:rgb(0,0,187)\">createReader</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$inputFileType</span><span style=\"color:rgb(0,119,0)\">);</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\">/**  Define how many rows we want to read for each &quot;chunk&quot;  **/ \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$chunkSize </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">20</span><span style=\"color:rgb(0,119,0)\">; </span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(255,128,0)\">/**  Create a new Instance of our Read Filter  **/ \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$chunkFilter </span><span style=\"color:rgb(0,119,0)\">= new </span><span style=\"color:rgb(0,0,187)\">chunkReadFilter</span><span style=\"color:rgb(0,119,0)\">(); \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(255,128,0)\">/**  Tell the Reader that we want to use the Read Filter that we've Instantiated  **/ \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objReader</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">setReadFilter</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$chunkFilter</span><span style=\"color:rgb(0,119,0)\">); \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(255,128,0)\">/**  Loop to read our worksheet in &quot;chunk size&quot; blocks  **/ \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\">/**  $startRow is set to 2 initially because we always read the headings in row #1  **/</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,119,0)\">for (</span><span style=\"color:rgb(0,0,187)\">$startRow </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">2</span><span style=\"color:rgb(0,119,0)\">; </span><span style=\"color:rgb(0,0,187)\">$startRow </span><span style=\"color:rgb(0,119,0)\">&lt;= 65536</span><span style=\"color:rgb(0,119,0)\">; </span><span style=\"color:rgb(0,0,187)\">$startRow </span><span style=\"color:rgb(0,119,0)\">&#43;= </span><span style=\"color:rgb(0,0,187)\">$chunkSize</span><span style=\"color:rgb(0,119,0)\">) { \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">    </span><span style=\"color:rgb(255,128,0)\">/**  Tell the Read Filter, the limits on which rows we want to read this iteration  **/ \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\">    </span><span style=\"color:rgb(0,0,187)\">$chunkFilter</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">setRows</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$startRow</span><span style=\"color:rgb(0,119,0)\">,</span><span style=\"color:rgb(0,0,187)\">$chunkSize</span><span style=\"color:rgb(0,119,0)\">); \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">    </span><span style=\"color:rgb(255,128,0)\">/**  Load only the rows that match our filter from $inputFileName to a PHPExcel Object  **/ \r\n</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\">    </span><span style=\"color:rgb(0,0,187)\">$objPHPExcel </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">$objReader</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">load</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$inputFileName</span><span style=\"color:rgb(0,119,0)\">); \r\n</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">    </span><span style=\"color:rgb(255,128,0)\">//    Do some processing here \r\n\r\n</span><span style=\"color:rgb(0,119,0)\">    </span><span style=\"color:rgb(255,128,0)\">//    Free up some of the memory \r\n</span>\r\n    $objPHPExcel-&gt;disconnectWorksheets(); \r\n    unset($objPHPExcel); \r\n</pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\">}</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<br>\r\n<br>\r\nIf you don't need to load formatting information, but only the worksheet data, then the setReadDataOnly() method will tell the reader only to load cell values, ignoring any cell formatting:<br>\r\n<br>\r\n<pre><span style=\"color:rgb(0,0,187)\">$inputFileType </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">'Excel5'</span><span style=\"color:rgb(0,119,0)\">;</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(0,0,187)\">$inputFileName </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(221,0,0)\">'./sampleData/example1.xls'</span><span style=\"color:rgb(0,119,0)\">;</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<span style=\"color:rgb(255,128,0)\">/** Create a new Reader of the type defined in $inputFileType **/</span>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objReader </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">PHPExcel_IOFactory</span><span style=\"color:rgb(0,119,0)\">::</span><span style=\"color:rgb(0,0,187)\">createReader</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$inputFileType</span><span style=\"color:rgb(0,119,0)\">);</span></pre>\r\n<span style=\"color:rgb(255,128,0)\">/** Advise the Reader that we only want to load cell data, not formatting **/</span>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objReader</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">setReadDataOnly</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">true</span><span style=\"color:rgb(0,119,0)\">);</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span><span style=\"color:rgb(255,128,0)\">/**  Load $inputFileName to a PHPExcel Object  **/</span></pre>\r\n<pre><span style=\"color:rgb(255,128,0)\"></span><span style=\"color:rgb(0,0,187)\">$objPHPExcel </span><span style=\"color:rgb(0,119,0)\">= </span><span style=\"color:rgb(0,0,187)\">$objReader</span><span style=\"color:rgb(0,119,0)\">-&gt;</span><span style=\"color:rgb(0,0,187)\">load</span><span style=\"color:rgb(0,119,0)\">(</span><span style=\"color:rgb(0,0,187)\">$inputFileName</span><span style=\"color:rgb(0,119,0)\">);</span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<pre><span style=\"color:rgb(0,119,0)\"></span></pre>\r\n<span style=\"color:rgb(0,119,0)\"></span><br>\r\n<span style=\"color:rgb(0,119,0)\"><font color=\"#000000\"><br>\r\nUse cell caching. This is a method for reducing the PHP memory that is required for each cell, but at a cost in speed. It works by storing the cell objects in a compressed format, or outside of PHP's memory (eg. disk, APC, memcache)... but the more memory you\r\n save, the slower your scripts will execute. You can, however, reduce the memory required by each cell to about 300bytes, so your 5M cells would require about 1.4GB of PHP memory.<br>\r\n<br>\r\nCell caching is described in section 4.2.1 of the Developer Documentation<br>\r\n</font><br>\r\n<br>\r\n<br>\r\n</span>",
    "PostedDate": "2011-01-21T02:14:49.807-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "553095",
    "ThreadId": "242712",
    "Html": "\r\n<p>Note that the 1k/cell and 300 bytes/cell figure above are estimates, based on a 32-bit server. If you're running on a 64-bit server, this adds an overhead of about 60%.</p>\r\n<p>If you're writing large files, then double those figures.</p>\r\n",
    "PostedDate": "2011-01-21T02:23:57.747-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "553108",
    "ThreadId": "242712",
    "Html": "\r\n<p>I could imagine that a php process requiring over 5GB would be a problem no a 32bit system ;)</p>\r\n",
    "PostedDate": "2011-01-21T02:47:38.073-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "554131",
    "ThreadId": "242712",
    "Html": "\r\n<p>Thanks a lot for your answers !! I tried to implement some of the above solutions. Here is my code :</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>\r\nset_time_limit(0);\r\n\r\n$inputFileType = <span style=\"color:#a31515\">'Excel5'</span>;\r\n$inputFileName = <span style=\"color:#a31515\">'EUFRA_base_export.xls'</span>;\r\n$sheetname = <span style=\"color:#a31515\">'_UL'</span>; \r\n<span style=\"color:green\">//$sheetname = '_AgCentre'; </span>\r\n$chunkSize = 1; \r\n\r\n\r\n$objReader = PHPExcel_IOFactory::createReader($inputFileType);\r\n$chunkFilter = <span style=\"color:blue\">new</span> chunkReadFilter(); \r\n$objReader-&gt;setReadFilter($chunkFilter);\r\n$objReader-&gt;setReadDataOnly(true);\r\n$objReader-&gt;setLoadSheetsOnly($sheetname);\r\n<span style=\"color:blue\">echo</span> <span style=\"color:#a31515\">'start'</span>; \r\n<span style=\"color:blue\">for</span> ($startRow = 2; $startRow &lt;= 10; $startRow &#43;= $chunkSize) \r\n{ \r\n\t<span style=\"color:blue\">echo</span> $startRow;\r\n\t<span style=\"color:blue\">echo</span>(<span style=\"color:#a31515\">&quot;&lt;br&gt;&quot;</span>);\r\n\t$chunkFilter-&gt;setRows($startRow,$chunkSize);\r\n\t$objPHPExcel = $objReader-&gt;load($inputFileName);\r\n\t<span style=\"color:blue\">echo</span>(<span style=\"color:#a31515\">'B'</span>.$startRow);\r\n\t$value = $objPHPExcel-&gt;getActiveSheet()-&gt;getCell(<span style=\"color:#a31515\">'B'</span>.$startRow)-&gt;getValue();\r\n\t$objPHPExcel-&gt;disconnectWorksheets(); \r\n\t<span style=\"color:blue\">unset</span>($objPHPExcel);\r\n\t<span style=\"color:green\">//echo $startRow;</span>\r\n\t<span style=\"color:blue\">echo</span> $value;\r\n\t<span style=\"color:blue\">echo</span>(<span style=\"color:#a31515\">&quot;&lt;br&gt;&quot;</span>);\r\n}\r\n<span style=\"color:blue\">echo</span> <span style=\"color:#a31515\">'end'</span>;\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>This works fine... except for the time processing. I just access to 10 records to display them and it longed 5 minutes. Is my code well written? Is there a way to improve the speed of processing?</p>\r\n",
    "PostedDate": "2011-01-23T19:31:17.113-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "554244",
    "ThreadId": "242712",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>kaptainchok wrote:</strong><br>\r\n<p>Thanks a lot for your answers !! I tried to implement some of the above solutions.&nbsp;</p>\r\n<p>&nbsp;This works fine... except for the time processing. I just access to 10 records to display them and it longed 5 minutes. Is my code well written? Is there a way to improve the speed of processing?</p>\r\n</blockquote>\r\n<p>&nbsp;I have to agree that it seems excessively slow, and I can't explain why... even my little netbook should process 10 records from a 5M cell worksheet lot faster than that. However, I wouldn't use a chunksize of 1, but would set the value to as&nbsp;high\r\n as I could without exceeding memory limits. For every &quot;chunk&quot; that's loaded, you're still reading the entire file; so you're reading and parsing 55MB every iteration of the chunk loop.... that will take time. You should try to minimize the number of iterations...\r\n read &quot;chunks&quot; of 100 rows at a time, or 500 rows at a time, as many as you can handle in memory.</p>\r\n<p>If you remove the lines</p>\r\n<p>&nbsp;&nbsp; $objPHPExcel-&gt;disconnectWorksheets(); <br>\r\n<span style=\"color:blue\">&nbsp;&nbsp; unset</span>($objPHPExcel);</p>\r\n<p>you will get a degree of memory leakage, but it will also process the loop faster.</p>\r\n",
    "PostedDate": "2011-01-24T01:50:57.147-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "554799",
    "ThreadId": "242712",
    "Html": "\r\n<p>It seems that in my case (very huge file), it should be better to use another tool... I will try with VBA :(&nbsp; Anyway thanks for your help and congrats for the work you have done !!</p>\r\n",
    "PostedDate": "2011-01-24T21:16:08.44-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "807957",
    "ThreadId": "242712",
    "Html": "<blockquote style=\"border: solid .1em #ccc; font-style: italic; margin: .25em 1em 0 1em; padding: 0 .25em 0 .25em;\"><strong>MarkBaker wrote:</strong> <br /><br />For every \"chunk\" that's loaded, you're still reading the entire file; so you're reading and parsing 55MB every iteration of the chunk loop.... that will take time. You should try to minimize the number of iterations...  read \"chunks\" of 100 rows at a time, or 500 rows at a time, as many as you can handle in memory.</blockquote>\r\n<p>As far as I understand, each time it parses the whole file to know where to read the needed rows. So it creates a certain map of the file.</p>\r\n<p>So why should it create the map of the file each time? Coudn't it be cached? So it gets creates the cache only at the first pass, and then either uses the cache (if exists or passed to the method), or generates the new one. There can be an option to use the cache (and possibly a link to the cache file) or to generate the new one.</p>\r\n<p>Can this be implemented?</p>\r\n<p>Thanks.</p>",
    "PostedDate": "2012-03-09T00:55:00.593-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "807974",
    "ThreadId": "242712",
    "Html": "<p>For each \"chunk\" it simply instantiates a new PHPExcel object, reads through the (entire) Excel file, and tests each cell read from the file against the read filter to determine whether to store it or discard it. If the choice is \"discard\" then no memory is used within the PHPExcel object for that cell, only in the reader. It doesn't create any \"map\" during this process.</p>\n<p>First point to note is that readFilter is designed simply to allow reading of part of a worksheet rather than the entirety of that worksheet... it doesn't create any map, because that is not a part of its purpose which is simply to identify whether a cell should be read or not. Reading a file in chunks is simply a way of taking advantage of the existence of this filtering feature to process a large file in several stages rather than all in one go. The filter doesn't even know it's being used in a loop.</p>\n<p>If you were to create such a map, it would require a substantial amount of memory.... almost exactly the amount of memory required as though you'd actually read in every cell... so there would be no real benefit, and a lot of drawbacks.</p>",
    "PostedDate": "2012-03-09T01:25:13.86-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "807990",
    "ThreadId": "242712",
    "Html": "<p>Look what I want.</p>\r\n<p>I want to read line, process it with my some tasks, read next line and so on.</p>\r\n<p>This is how I work with a huge CSV. I have a class and here is the logic:<br />1. I read line by line and check if the time passed is not close to the  time limit. So when reading a line I don't use much memory. I never handle more then a line in the memory.<br />2. If I'm close to the time limit, then I save the current file position  to a class variable, store my class to a file (json encoded) and rerun  my web-page with some parameters in QUERY, like \"continue\". <br />3. When my web-page page is loaded, it reads the QUERY and and if there  is a key to continue, reads the stored class, decodes it (remember it  knows the file position stored in the class) and reads the next line.</p>\r\n<p>Time is not important in my case. Memory limit is anyway important, but only for one step.</p>\r\n<p>Even with not important time you note above that chunksize=1 it <strong>extremly</strong> slow. I'm afraid of the work \"extremly\".</p>\r\n<p>You suggest \"However, I wouldn't use a chunksize of 1, but would set the value to as&nbsp;high as I  could without exceeding memory limits\". This can be a way, but demands some extra logic on determining the optimal chunksize. But the xml is a non-uniform and some rows can be small, others can be larger. One row is anyway within the limits, but a number of&nbsp; rows - depends.</p>\r\n<p>Any suggestion?</p>\r\n<p>Thanks.</p>",
    "PostedDate": "2012-03-09T02:07:06.983-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "808170",
    "ThreadId": "242712",
    "Html": "<p>I am aware of a wrapper class that uses PHPExcel, whos epurpose is to read files line by line. I've not used it, and don't have the link to hand.... I'll try and track it down later.</p>",
    "PostedDate": "2012-03-09T09:48:06.19-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841577",
    "ThreadId": "242712",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I used above code, it is working fine with .xls file. But I am facing an issue with .xlsx file. I need to get the total number of rows of sheet but I am unable to get it with .xlsx file. It ways return 1 total rows. When I removed chunkfilter code then it\r\n returns correct total rows. Following is code.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>$ext = strtolower(array_pop(explode(<span style=\"color:#a31515\">&quot;.&quot;</span>, $xlsFile)));\n\t\n$objLib = ($ext == <span style=\"color:#a31515\">&quot;xls&quot;</span>) ? <span style=\"color:#a31515\">'Excel5'</span> : <span style=\"color:#a31515\">'Excel2007'</span>;\n\t\n<span style=\"color:green\">// Cell caching to reduce memory usage.</span>\n$cacheMethod = PHPExcel_CachedObjectStorageFactory:: cache_to_phpTemp;\n$cacheSettings = <span style=\"color:blue\">array</span>( <span style=\"color:#a31515\">' memoryCacheSize '</span> =&gt; <span style=\"color:#a31515\">'8MB'</span>);\nPHPExcel_Settings::setCacheStorageMethod($cacheMethod, $cacheSettings);\n\t\n$objReader = PHPExcel_IOFactory::createReader($objLib);\n<span style=\"color:blue\">if</span> (!$objReader-&gt;canRead($xlsFile)) {\n\t<span style=\"color:blue\">return</span> false;\n}\n\t\n<span style=\"color:green\">// Load only first sheet.</span>\n$sheets = $objReader-&gt;listWorksheetNames($xlsFile);\n$objReader-&gt;setLoadSheetsOnly( <span style=\"color:blue\">array</span>($sheets[0]) );\n\t\n<span style=\"color:green\">/**  Create a new Instance of our Read Filter  **/</span> \n$chunkFilter = <span style=\"color:blue\">new</span> chunkReadFilter(); \n\t\n<span style=\"color:green\">/**  Tell the Reader that we want to use the Read Filter that we've Instantiated  **/</span> \n<span style=\"color:green\">// WHEN I COMMENTED FOLLOWING LINE THEN IT RETURNS CORRECT TOTAL ROWS.</span>\n$objReader-&gt;setReadFilter($chunkFilter);\n\n$chunkSize = 100;\n\n$chunkFilter-&gt;setRows(1, $chunkSize);\n$objPHPExcel = $objReader-&gt;load($xlsFile);\n$objPHPExcel-&gt;setActiveSheetIndex(0);\n$objSheet = $objPHPExcel-&gt;getActiveSheet();\n\n<span style=\"color:green\">// get total rows</span>\n$totalRows = $objSheet-&gt;getHighestRow();\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Can you please help me on this matter? <br>\r\n<br>\r\nI also check by increasing or decreasing chunk size but i always got 1 total rows in case of .xlsx file. Please again note that there is no issue with .xls file. I also checked by setting read only data ($objReader-&gt;setReadDataOnly(true);)&nbsp; but no difference.</p>\r\n<p>Awaiting your reply.</p>\r\n<p>Thanks.</p>\r\n",
    "PostedDate": "2012-05-28T03:26:11.323-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841800",
    "ThreadId": "242712",
    "Html": "<p>If you're setting a read filter, the highest row returned by getHighestRow() will normally be the highest row identified by that read filter.</p>\r\n<p>You can get the value of the highest row before actually reading the file by using the Reader's listWorksheetInfo() method</p>",
    "PostedDate": "2012-05-28T13:38:29.497-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841879",
    "ThreadId": "242712",
    "Html": "<p>Thanks. It works. But in this way we need to load file two times. First without read filter &amp; second time with read filter. Isn't take extra time to load file two times? If we have big file then it will take long time.</p>",
    "PostedDate": "2012-05-28T22:50:03.533-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841891",
    "ThreadId": "242712",
    "Html": "<p>Why do you need to load twice? If you need to load the entire file a first time without the read filter, why reload a second time?</p>",
    "PostedDate": "2012-05-28T23:28:32.483-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841931",
    "ThreadId": "242712",
    "Html": "<p>Because I need to read file with read filter otherwise out of memory error may occur against large files. Thanks.</p>",
    "PostedDate": "2012-05-29T01:29:09.583-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841996",
    "ThreadId": "242712",
    "Html": "<p>But you say you're already loading the entire file once already, before you reread it using the read filter.... I'm clearly missing something in what you're trying to do because I can't see why you should need to load it twice... once without the read filter (\"First without read filter\")&nbsp;the second time with (\"second time with read filter\")?</p>\r\n<p>I'm kinda stupid, so please explain... If you've already loaded the file once, why reload it?</p>",
    "PostedDate": "2012-05-29T04:29:28.967-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "842060",
    "ThreadId": "242712",
    "Html": "\r\n<p>Hi MarkBaker,</p>\r\n<p>Thanks for your kind help. I understand, there is no need to reload the file. Thanks.</p>\r\n<p>Actually I am facing &quot;out of memory&quot; issue on writing when I process large file. I have a file of near about 4MB having 55308 rows &amp; 16 columns. I am processing this file on 64 bit Windows Server 2008 with 8GB RAM. I assigned memory limit up to 6GB for\r\n PHP script.<br>\r\n<br>\r\nFollowing is flow of the program.</p>\r\n<p><strong>Step 1: Verify Header Columns &amp; Reset Styles</strong><br>\r\nIn this step, program verify the header row &amp; reset background colors and borders of all cells. First program verifies the columns heading, if required column headings are missing on the sheet then program automatically adds these new columns on appropriate\r\n columns indexed &amp; reset the styles. Then program saves this file.</p>\r\n<p>When I process above file of 4MB, I got the following error. <br>\r\n<br>\r\nFatal error: Out of memory (allocated 1431568384) (tried to allocate 58 bytes) in C:\\WAMP\\www\\PHPExcel-1.7.7\\Classes\\PHPExcel\\Worksheet.php on line 1161</p>\r\n<p>Please check following image to see system memory status before processing of this file.</p>\r\n<p>http://s7.postimage.org/jbkhppqvv/Before.png</p>\r\n<p>Following image is taken when file is in-process &amp; this is peak memory status.</p>\r\n<p>http://s17.postimage.org/f5cyw7rf3/In_process.png</p>\r\n<p>As you can notices, there are lot of free memory available but program still generate out of memory error.</p>\r\n<p>Following is sample code.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>$xlsFile = <span style=\"color:#a31515\">&quot;test.xls&quot;</span>;\n$ext = strtolower(array_pop(explode(<span style=\"color:#a31515\">&quot;.&quot;</span>, $xlsFile)));\n\n$objLib = ($ext == <span style=\"color:#a31515\">&quot;xls&quot;</span>) ? <span style=\"color:#a31515\">'Excel5'</span> : <span style=\"color:#a31515\">'Excel2007'</span>;\n\n$objReader = PHPExcel_IOFactory::createReader($objLib);\n<span style=\"color:blue\">if</span> (!$objReader-&gt;canRead($xlsFile)) {\n\t<span style=\"color:blue\">return</span> false;\n}\n\n<span style=\"color:green\">// Load only first sheet.</span>\n$sheets = $objReader-&gt;listWorksheetNames($xlsFile);\n$objReader-&gt;setLoadSheetsOnly( <span style=\"color:blue\">array</span>($sheets[0]) );\n\n$objPHPExcel = $objReader-&gt;load($xlsFile);\n$objPHPExcel-&gt;setActiveSheetIndex(0);\n$objSheet = $objPHPExcel-&gt;getActiveSheet();\n\n$total_rows = $objSheet-&gt;getHighestRow();\n$total_cols = PHPExcel_Cell::columnIndexFromString($objSheet-&gt;getHighestColumn());\n\n<span style=\"color:green\">// reset background color and borders of all cells</span>\n$row_range = <span style=\"color:#a31515\">&quot;A2:&quot;</span> . PHPExcel_Cell::stringFromColumnIndex($total_cols) . $total_rows;\n$objSheet-&gt;getStyle($row_range)-&gt;getFill()-&gt;setFillType(PHPExcel_Style_Fill::FILL_NONE);\n$objSheet-&gt;getStyle($row_range)-&gt;getBorders()-&gt;getAllBorders()-&gt;setBorderStyle(PHPExcel_Style_Border::BORDER_NONE);\n\n<span style=\"color:green\">// Call custom function to read row.</span>\n$arrRow = readRow($objSheet, 1, $total_cols);\n\n<span style=\"color:green\">// Style</span>\n$stl_green = <span style=\"color:blue\">array</span>(\n\t\t\t\t<span style=\"color:#a31515\">'fill'</span> =&gt; <span style=\"color:blue\">array</span>(\n\t\t\t\t\t\t\t<span style=\"color:#a31515\">'type'</span>\t=&gt; PHPExcel_Style_Fill::FILL_SOLID,\n\t\t\t\t\t\t\t<span style=\"color:#a31515\">'startcolor'</span> =&gt; <span style=\"color:blue\">array</span>(<span style=\"color:#a31515\">'rgb'</span> =&gt; <span style=\"color:#a31515\">'99FFCC'</span>),\n\t\t\t\t\t\t\t<span style=\"color:#a31515\">'endcolor'</span> =&gt; <span style=\"color:blue\">array</span>(<span style=\"color:#a31515\">'rgb'</span> =&gt; <span style=\"color:#a31515\">'99FFCC'</span>),\n\t\t\t\t\t\t),\n\t\t\t);\n\n<span style=\"color:green\">// Check missing required columns &amp; add new cols if not exist</span>\n$arrReqCols = <span style=\"color:blue\">array</span>(<span style=\"color:#a31515\">&quot;Req Col 1&quot;</span>, <span style=\"color:#a31515\">&quot;Req Col 2&quot;</span>, <span style=\"color:#a31515\">&quot;Req Col 3&quot;</span>, <span style=\"color:#a31515\">&quot;Req Col 4&quot;</span>);\n$newFlag = false;\n$missingFlag = false;\n<span style=\"color:blue\">foreach</span> ($arrReqCols <span style=\"color:blue\">as</span> $key =&gt; $value) {\n\t<span style=\"color:blue\">if</span> (!in_array($value, $arrRow)){\n\t\t$objSheet-&gt;insertNewColumnBeforeByIndex(0);\n\t\t$objSheet-&gt;setCellValueByColumnAndRow(0, 1, $value);\n\t\t$objSheet-&gt;getStyle(<span style=\"color:#a31515\">&quot;A1:A$total_rows&quot;</span>)-&gt;applyFromArray($stl_green);\n\t\t$objSheet-&gt;getColumnDimension(PHPExcel_Cell::stringFromColumnIndex(0))-&gt;setAutoSize(true);\n\t\t$total_cols&#43;&#43;;\n\t\t$newFlag = true;\n\t\t$missingFlag = true;\n\t}\n}\n\n<span style=\"color:green\">// Add some new cols if not exist</span>\n$arrNewCols = <span style=\"color:blue\">array</span>(<span style=\"color:#a31515\">&quot;Test Col 1&quot;</span>, <span style=\"color:#a31515\">&quot;Test Col 2&quot;</span>);\n<span style=\"color:blue\">foreach</span> ($arrNewCols <span style=\"color:blue\">as</span> $key =&gt; $value) {\n\t<span style=\"color:blue\">if</span> (!in_array($value, $arrRow)){\n\t\t$objSheet-&gt;insertNewColumnBeforeByIndex(0);\n\t\t$objSheet-&gt;setCellValueByColumnAndRow(0, 1, $value);\n\t\t$objSheet-&gt;getStyle(<span style=\"color:#a31515\">&quot;A1:A$total_rows&quot;</span>)-&gt;applyFromArray($stl_green);\n\t\t$objSheet-&gt;getColumnDimension(PHPExcel_Cell::stringFromColumnIndex(0))-&gt;setAutoSize(true);\n\t\t$total_cols&#43;&#43;;\n\t\t$newFlag = true;\n\t}\n}\t\n\n<span style=\"color:blue\">if</span> ($newFlag) {\n\t<span style=\"color:green\">// Save File</span>\n\t$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, $objLib);\t\t\n\t$objSheet-&gt;unfreezePane();\n\t$objWriter-&gt;save($xlsFile);\n}\n\n<span style=\"color:blue\">if</span>($missingFlag){\n\t<span style=\"color:green\">//let the user download the file</span>\n\t<span style=\"color:blue\">echo</span> <span style=\"color:#a31515\">&quot;&lt;span class='error'&gt;Please download &lt;a href='{$xlsFile}' target='_blank'&gt;this file&lt;/a&gt; with missing columns added to it.&lt;/span&gt;&quot;</span>;\n\t\n}<span style=\"color:blue\">else</span>{\n\t<span style=\"color:green\">// Perform Step 2</span>\n}\n</pre>\r\n</div>\r\n<p><br>\r\n<span style=\"color:#ff0000\">Can you please let me know how I can process this file with above code?</span><br>\r\n<br>\r\n<strong>Step 2: Reading Data.</strong><br>\r\nIn this step, program reload the saved file &amp; read all the data &amp; store into database. Memory issue resolved from here by using above technique.</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Step 3: Export Sheet</strong><br>\r\nIn this step, program performs some calculations &amp; update data on database. To export this calculated data into new sheet, program takes long time on writing &amp; at the end out of memory error generated.&nbsp;</p>\r\n<p><span style=\"color:#ff0000\">Please let me know how to resolve this issue. Is there any way we write data into multiple files &amp; at the end merge these files into one file?</span></p>\r\n<p>Awaiting your response.</p>\r\n<p>Many Thanks.</p>\r\n",
    "PostedDate": "2012-05-29T06:51:08.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "842244",
    "ThreadId": "242712",
    "Html": "<p>&gt;&gt; I assigned memory limit up to 6GB for PHP script.<br />&gt;&gt; Fatal error: Out of memory (allocated 1431568384) (tried to allocate 58 bytes) in C:\\WAMP\\www\\PHPExcel-1.7.7\\Classes\\PHPExcel\\Worksheet.php on line 1161</p>\r\n<p>1,431,568,384 doesn't equate to a limit of 6GB PHP memory limit, it's about 1.33GB - double check how much memory PHP is really set to use.</p>\r\n<p>If you're running 32-bit PHP, you have an upper limit of 4GB, irrespective of the 64-bit Operating System. My \"rule of thumb\" is about 1k/cell on 32-bit PHP, 1.6k/cell on 64-bit PHP.</p>\r\n<p>Rather than saving the file then reloading and doing the additional processing, simply loop through the worksheet a second time doing your database update, and only save the file and present it to the user at the very end of the script once all processing has been finished.</p>\r\n<p>Consider using cell caching to save memory.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-05-29T12:57:50.927-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "842550",
    "ThreadId": "242712",
    "Html": "<p>1. Yes, I have rechecked memory limit is 6GB. I donot know why it stops on 1.33GB. Is it restricted on PHPExcel library?</p>\r\n<p>2. If 1.6k/cell then this file should be processed within 1.36GB.</p>\r\n<p>3. Actually after storing data into database, there are lot of operations performed on this data &amp; lot of reports &amp; analysis generated from this data. User has also ability to perform many operations. So due to large number of operations, I needed to store into database. Program also populate many other data from this data. So on exporting step, program export this data on different ways depends on the user's selection. 55308 rows may increase upto 3 times. That's why data stored on the database &amp; program creates new excel file on export. The file is exported with formatting, every cell or every row may contains different styles. <br />This all functionality is working fine with small file. The only issue occurred with large file on writing.</p>\r\n<p>4. I used cell caching &amp; I got following error.</p>\r\n<p><strong>Fatal error</strong>:  Call to a member function getCellCacheController() on a non-object in C<strong>:\\WAMP\\www\\PHPExcel-1.7.7\\Classes\\PHPExcel\\Cell.php</strong> on line <strong>108</strong></p>\r\n<p>This error occurred when we reset background color and borders of all cells<strong></strong>. If I commented this code then it worked fine.</p>\r\n<p>I also analyzed that reset background color &amp; borders take more resources. When I commented this code &amp; enable cell caching then I were able to process this file but it took long time. But reset background color &amp; borders functionality is also necessary. So I need to process this file with this functionality. Please let me know further about this. Thanks.</p>\r\n<p><span style=\"color: #000000;\">5. Is there any way we write data into multiple files &amp; at the end merge these files into one file?</span></p>\r\n<p>Awaiting your response.</p>\r\n<p>Thanks,</p>",
    "PostedDate": "2012-05-30T07:03:52.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "842785",
    "ThreadId": "242712",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>sohailisonline wrote:</strong><br />\r\n<p>1. Yes, I have rechecked memory limit is 6GB. I donot know why it stops on 1.33GB. Is it restricted on PHPExcel library?</p>\r\n<br /></blockquote>\r\n<p>PHPExcel does nothing to restrict the size of files that it can process, other then applying restrictions of columns and rows as per Excel itself within the writers. The only memory limitations and execution time limitations are those imposed by PHP itself.</p>\r\n<p>And I'm still confused by the figures in your error message.</p>\r\n<p>&nbsp;</p>\r\n<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>sohailisonline wrote:</strong><br />\r\n<p>2. If 1.6k/cell then this file should be processed within 1.36GB.</p>\r\n</blockquote>\r\n<p>&nbsp;</p>\r\n<p>This is a rule of thumb for maintaining the workbook in memory. Using a writer almost doubles that, but still well within your 6GB.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\">\r\n<p>4. I used cell caching &amp; I got following error.</p>\r\n<p><strong>Fatal error</strong>: Call to a member function getCellCacheController() on a non-object in C<strong>:\\WAMP\\www\\PHPExcel-1.7.7\\Classes\\PHPExcel\\Cell.php</strong> on line <strong>108</strong></p>\r\n<p>This error occurred when we reset background color and borders of all cells<strong>&nbsp;</strong>. If I commented this code then it worked fine.</p>\r\n<p>I also analyzed that reset background color &amp; borders take more resources. When I commented this code &amp; enable cell caching then I were able to process this file but it took long time. But reset background color &amp; borders functionality is also necessary. So I need to process this file with this functionality. Please let me know further about this. Thanks.</p>\r\n</blockquote>\r\n<p>Styling does take more resources.</p>\r\n<p>Can you provide more details of the cell caching you're using. If there's problems with one or other of the caching mechanisms, it would be useful to know which one, otherwise I have to check 3000 lines of code for potential errors rather than a couple of hundred.</p>\r\n<p>&nbsp;</p>\r\n<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>sohailisonline wrote:</strong><br />\r\n<p><span style=\"color: #000000;\">5. Is there any way we write data into multiple files &amp; at the end merge these files into one file?</span></p>\r\n</blockquote>\r\n<p>&nbsp;You can create multiple files, but you'd still need to merge them, and that would use all the memory required for the fully merged PHPExcel object, as well as for (at least) the last file you loaded, so it would take even more memory.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-05-30T13:18:25.88-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "842913",
    "ThreadId": "242712",
    "Html": "\r\n<p>I just added following cell caching code before the above sample code.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// Cell caching to reduce memory usage.</span>\n$cacheMethod = PHPExcel_CachedObjectStorageFactory:: cache_to_phpTemp;\n$cacheSettings = <span style=\"color:blue\">array</span>( <span style=\"color:#a31515\">' memoryCacheSize '</span> =&gt; <span style=\"color:#a31515\">'8MB'</span>);\nPHPExcel_Settings::setCacheStorageMethod($cacheMethod, $cacheSettings);\n</pre>\r\n</div>\r\n<p>If I commented following code then it works fine else it generates fatal error (Call to a member function getCellCacheController() on a non-object).</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// reset background color and borders of all cells</span>\n$row_range = <span style=\"color:#a31515\">&quot;A2:&quot;</span> . PHPExcel_Cell::stringFromColumnIndex($total_cols) . $total_rows;\n$objSheet-&gt;getStyle($row_range)-&gt;getFill()-&gt;setFillType(PHPExcel_Style_Fill::FILL_NONE);\n$objSheet-&gt;getStyle($row_range)-&gt;getBorders()-&gt;getAllBorders()-&gt;setBorderStyle(PHPExcel_Style_Border::BORDER_NONE);\n</pre>\r\n</div>\r\nMany Thanks.\r\n<p></p>\r\n",
    "PostedDate": "2012-05-30T22:47:17.68-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "843786",
    "ThreadId": "242712",
    "Html": "<p>Hi MarkBaker,</p>\r\n<p>Did you able to find the solution of above issue?</p>\r\n<p>Awaiting your response.</p>\r\n<p>Thanks.</p>",
    "PostedDate": "2012-06-01T22:53:38.677-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "843832",
    "ThreadId": "242712",
    "Html": "\r\n<p>Hi MarkBaker,</p>\r\n<p>I just found that above issue occurred when we provide last row in range to reset the background color &amp; borders. For example if we have total 50 rows in the sheet &amp; we provide range like &quot;A1:AB50&quot; then above cache error would occur. If we provide\r\n range one row less like &quot;A1:AB51&quot; then it would work fine.</p>\r\n<p>So I have edited above code as following &amp; issue resolved.</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">for</span>($i = 0; $i &lt; 1; $i&#43;&#43;){\n\t<span style=\"color:blue\">if</span>($i == 0){\n\t\t$row_range = <span style=\"color:#a31515\">&quot;A2:&quot;</span> . PHPExcel_Cell::stringFromColumnIndex($total_cols) . ($total_rows - 1);\n\t}<span style=\"color:blue\">else</span>{\n\t\t$row_range = <span style=\"color:#a31515\">&quot;A&quot;</span>.$total_rows.<span style=\"color:#a31515\">&quot;:&quot;</span> . PHPExcel_Cell::stringFromColumnIndex($total_cols) . $total_rows;\n\t}\n\t$objSheet-&gt;getStyle($row_range)-&gt;getFill()-&gt;setFillType(PHPExcel_Style_Fill::FILL_NONE);\n\t$objSheet-&gt;getStyle($row_range)-&gt;getBorders()-&gt;getAllBorders()-&gt;setBorderStyle(PHPExcel_Style_Border::BORDER_NONE);\n}\n\n</pre>\r\n</div>\r\nI think, this is a bug &amp; should be fixed on the library.\r\n<p></p>\r\n<p>Thanks,</p>\r\n",
    "PostedDate": "2012-06-02T03:24:08.057-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "852865",
    "ThreadId": "242712",
    "Html": "<p>Hi MarkBaker,</p>\r\n<p>I am facing an issue with .xlsx file. I have another large .xlsx file of 13MB, having 50,000 rows &amp; 60 columns. Memory limit is 7GB. When I process this file with above code then I got following warning message. After this, program unable to read cell values. It always return empty cell value.</p>\r\n<p><span style=\"color: #000080;\">Warning: simplexml_load_string(): Memory allocation failed : growing buffer in PHPExcel-1.7.7\\Classes\\PHPExcel\\Reader\\Excel2007.php on line 760 </span></p>\r\n<p>Then I convert this file in .xls format &amp; process again, then it worked fine.</p>\r\n<p>Can you please let me know what is the issue with .xlsx format while there was lot of free memory available?</p>\r\n<p>Thanks,</p>",
    "PostedDate": "2012-06-23T04:34:04.42-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "852907",
    "ThreadId": "242712",
    "Html": "<p>The problem with the SimpleXML Parser used by PHPExcel's readers (for the XML based formats such as .xlsx files) is that it loads the entire file into memory for parsing, though I'm surprised that 7GB of memory can't handle the file. I assume you're using a 64-bit version of PHP (otherwise you're limited to 4GB), and this is about 60% more greedy in memory usage than 32-bit PHP.</p>\r\n<p>The roadmap for this year includes plans to switch to using a pull parser (XMLReader) which doesn't load the entire file into memory, only those elements that are explicitly requested, as and when they are needed, and the elements are removed from memory when no longer being accessed.</p>",
    "PostedDate": "2012-06-23T11:09:13.34-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "855650",
    "ThreadId": "242712",
    "Html": "\r\n<p>I've been doing some experimentation with SimpleXML and XMLReader, including testing different methods of extracting XML directly from zip files to pass to the XML parser.</p>\r\n<p>Testing the following techniques:</p>\r\n<p><strong>getFromName() read string to simpleXML</strong></p>\r\n<p>(This is the method currently used)</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre>$z1 = <span style=\"color:blue\">new</span> ZipArchive;\r\n<span style=\"color:blue\">if</span> ($z1-&gt;open($testWorkBook)) {\r\n    $xmlSheet = simplexml_load_string($z1-&gt;getFromName($testFileStream));\r\n}\r\n</pre>\r\n</div>\r\n<p><strong>getStream() and stream_get_contents() read string to simpleXML</strong></p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre>$z2 = <span style=\"color:blue\">new</span> ZipArchive();\r\n<span style=\"color:blue\">if</span> ($z2-&gt;open($testWorkBook)) {\r\n    $fp = $z2-&gt;getStream($testFileStream);\r\n    <span style=\"color:blue\">if</span>(!$fp) {\r\n        <span style=\"color:blue\">echo</span> <span style=\"color:#a31515\">&quot;failed to retrieve test stream from zip file&lt;br /&gt;&quot;</span>;\r\n    } <span style=\"color:blue\">else</span> {\r\n        $xmlSheet = simplexml_load_string(stream_get_contents($fp));\r\n        <span style=\"color:blue\">fclose</span>($fp);\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p><strong>getStream() and fread() read string to simpleXML</strong></p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre>$z3 = <span style=\"color:blue\">new</span> ZipArchive();\r\n<span style=\"color:blue\">if</span> ($z3-&gt;open($testWorkBook)) {\r\n    $fp = $z3-&gt;getStream($testFileStream);\r\n    <span style=\"color:blue\">if</span>(!$fp) {\r\n        <span style=\"color:blue\">die</span>(<span style=\"color:#a31515\">&quot;failed to retrieve test stream from zip file&quot;</span>);\r\n    } <span style=\"color:blue\">else</span> {\r\n        <span style=\"color:blue\">while</span> (!feof($fp)) {\r\n            $contents .= fread($fp,8192);\r\n        }\r\n        <span style=\"color:blue\">fclose</span>($fp);\r\n        $xmlSheet = simplexml_load_string($contents);\r\n        <span style=\"color:blue\">unset</span>($contents);\r\n    }\r\n} <span style=\"color:blue\">else</span> {\r\n    <span style=\"color:blue\">die</span>(<span style=\"color:#a31515\">'Unable to open zipped file'</span>);\r\n}\r\n</pre>\r\n</div>\r\n<p><strong>getFromName() read string to XMLReader</strong></p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre>$z4 = <span style=\"color:blue\">new</span> ZipArchive;\r\n$x4 = <span style=\"color:blue\">new</span> XMLReader();\r\n<span style=\"color:blue\">if</span> ($z4-&gt;open($testWorkBook)) {\r\n    $result = $x4-&gt;xml($z4-&gt;getFromName($testFileStream));\r\n} <span style=\"color:blue\">else</span> {\r\n    <span style=\"color:blue\">die</span>(<span style=\"color:#a31515\">'Unable to open zipped file'</span>);\r\n}\r\n</pre>\r\n</div>\r\n<p><strong>getStream() and stream_get_contents() read string to XMLReader</strong></p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre>$z5 = <span style=\"color:blue\">new</span> ZipArchive();\r\n$x5 = <span style=\"color:blue\">new</span> XMLReader();\r\n<span style=\"color:blue\">if</span> ($z5-&gt;open($testWorkBook)) {\r\n    $fp = $z5-&gt;getStream($testFileStream);\r\n    <span style=\"color:blue\">if</span>(!$fp) {\r\n        <span style=\"color:blue\">die</span>(<span style=\"color:#a31515\">&quot;failed to retrieve test stream from zip file&quot;</span>);\r\n    } <span style=\"color:blue\">else</span> {\r\n        $result = $x5-&gt;xml(stream_get_contents($fp));\r\n        <span style=\"color:blue\">fclose</span>($fp);\r\n    }\r\n} <span style=\"color:blue\">else</span> {\r\n    <span style=\"color:blue\">die</span>(<span style=\"color:#a31515\">'Unable to open zipped file'</span>);\r\n}\r\n</pre>\r\n</div>\r\n<p><strong>getStream() and fread() read string to XMLReader</strong></p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre>$z6 = <span style=\"color:blue\">new</span> ZipArchive();\r\n$contents = <span style=\"color:#a31515\">''</span>;\r\n$x6 = <span style=\"color:blue\">new</span> XMLReader();\r\n<span style=\"color:blue\">if</span> ($z6-&gt;open($testWorkBook)) {\r\n    $fp = $z6-&gt;getStream($testFileStream);\r\n    <span style=\"color:blue\">if</span>(!$fp) {\r\n        <span style=\"color:blue\">die</span>(<span style=\"color:#a31515\">&quot;failed to retrieve test stream from zip file&quot;</span>);\r\n    } <span style=\"color:blue\">else</span> {\r\n        <span style=\"color:blue\">while</span> (!feof($fp)) {\r\n            $contents .= fread($fp,8192);\r\n        }\r\n        <span style=\"color:blue\">fclose</span>($fp);\r\n        $result = $x6-&gt;xml($contents);\r\n    }\r\n    <span style=\"color:blue\">unset</span>($contents);\r\n} <span style=\"color:blue\">else</span> {\r\n    <span style=\"color:blue\">die</span>(<span style=\"color:#a31515\">'Unable to open zipped file'</span>);\r\n}\r\n</pre>\r\n</div>\r\n<p><strong>open() zip stream directly using XMLReader</strong></p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre>$x7 = <span style=\"color:blue\">new</span> XMLReader();\r\n<span style=\"color:blue\">if</span> (!($result = $x7-&gt;open(<span style=\"color:#a31515\">'zip://'</span>.dirname(<span style=\"color:blue\">__FILE__</span>).<span style=\"color:#a31515\">'/'</span>.$testWorkBook.<span style=\"color:#a31515\">'#'</span>.$testFileStream))) {\r\n    <span style=\"color:blue\">die</span>(<span style=\"color:#a31515\">'Unable to open zipped stream'</span>);\r\n}\r\n</pre>\r\n</div>\r\n<p>Then I have two different parsing methods, one using SimpleXML as at present, the second using XMLReader. Working with a simple worksheet&nbsp; of 4096x16. For the reader techniques, I get the following results:</p>\r\n<p>&nbsp;</p>\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"726\">\r\n<colgroup span=\"1\"><col span=\"1\" width=\"266\"><col span=\"1\" width=\"83\"><col span=\"1\" width=\"88\"><col span=\"1\" width=\"72\"><col span=\"1\" width=\"89\"><col span=\"2\" width=\"64\"></colgroup>\r\n<tbody>\r\n<tr height=\"64\">\r\n<td width=\"266\" height=\"64\">&nbsp;</td>\r\n<td width=\"83\"><strong>Data Extract and Load Time (s)</strong></td>\r\n<td width=\"88\"><strong>Memory after Extract and Load</strong></td>\r\n<td width=\"72\"><strong>Memory after Parse</strong></td>\r\n<td width=\"89\"><strong>Peak Memory Usage</strong></td>\r\n<td width=\"64\"><strong>&nbsp;</strong></td>\r\n<td width=\"64\"><strong>Total Time (s)</strong></td>\r\n</tr>\r\n<tr height=\"24\">\r\n<td width=\"266\" height=\"24\"><strong>getFromName() read string to simpleXML</strong></td>\r\n<td width=\"83\" align=\"right\">0.5349</td>\r\n<td width=\"88\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 524,288</td>\r\n<td width=\"72\">1,048,576</td>\r\n<td width=\"89\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4,980,736</td>\r\n<td width=\"64\">&nbsp;</td>\r\n<td width=\"64\" align=\"right\">0.8330</td>\r\n</tr>\r\n<tr height=\"38\">\r\n<td width=\"266\" height=\"38\"><strong>getStream() and stream_get_contents() read string to simpleXML</strong></td>\r\n<td width=\"83\" align=\"right\">0.5874</td>\r\n<td width=\"88\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 524,288</td>\r\n<td width=\"72\">1,048,576</td>\r\n<td width=\"89\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4,980,736</td>\r\n<td width=\"64\">&nbsp;</td>\r\n<td width=\"64\" align=\"right\">0.8855</td>\r\n</tr>\r\n<tr height=\"38\">\r\n<td width=\"266\" height=\"38\"><strong>getStream() and fread() read string to simpleXML</strong></td>\r\n<td width=\"83\" align=\"right\">0.5888</td>\r\n<td width=\"88\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 524,288</td>\r\n<td width=\"72\">1,048,576</td>\r\n<td width=\"89\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4,980,736</td>\r\n<td width=\"64\">&nbsp;</td>\r\n<td width=\"64\" align=\"right\">0.8869</td>\r\n</tr>\r\n<tr height=\"23\">\r\n<td width=\"266\" height=\"23\"><strong>getFromName() read string to XMLReader</strong></td>\r\n<td width=\"83\" align=\"right\">0.0348</td>\r\n<td width=\"88\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 524,288</td>\r\n<td width=\"72\">&nbsp;&nbsp;&nbsp;&nbsp; 524,288</td>\r\n<td width=\"89\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4,980,736</td>\r\n<td width=\"64\">&nbsp;</td>\r\n<td width=\"64\" align=\"right\">1.3534</td>\r\n</tr>\r\n<tr height=\"38\">\r\n<td width=\"266\" height=\"38\"><strong>getStream() and stream_get_contents() read string to XMLReader</strong></td>\r\n<td width=\"83\" align=\"right\">0.0711</td>\r\n<td width=\"88\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 524,288</td>\r\n<td width=\"72\">&nbsp;&nbsp;&nbsp;&nbsp; 524,288</td>\r\n<td width=\"89\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4,980,736</td>\r\n<td width=\"64\">&nbsp;</td>\r\n<td width=\"64\" align=\"right\">1.3896</td>\r\n</tr>\r\n<tr height=\"38\">\r\n<td width=\"266\" height=\"38\"><strong>getStream() and fread() read string to XMLReader</strong></td>\r\n<td width=\"83\" align=\"right\">0.0824</td>\r\n<td width=\"88\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 524,288</td>\r\n<td width=\"72\">&nbsp;&nbsp;&nbsp;&nbsp; 524,288</td>\r\n<td width=\"89\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4,980,736</td>\r\n<td width=\"64\">&nbsp;</td>\r\n<td width=\"64\" align=\"right\">1.4009</td>\r\n</tr>\r\n<tr height=\"38\">\r\n<td width=\"266\" height=\"38\"><strong>open() zip stream directly using XMLReader</strong></td>\r\n<td width=\"83\" align=\"right\">0.0009</td>\r\n<td width=\"88\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 524,288</td>\r\n<td width=\"72\">&nbsp;&nbsp;&nbsp;&nbsp; 524,288</td>\r\n<td width=\"89\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 524,288</td>\r\n<td width=\"64\">&nbsp;</td>\r\n<td width=\"64\" align=\"right\">1.3194</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>Clearly streaming the xml directly from the zip file to XMLReader is incredibly fast, and eliminates all the memory overheads of the extraction, or of SimpleXML. Parsing using XMLReader is slower than SimpleXML; but overall well worth the effort for the\r\n memory savings, but at a performance cost. It's the old trade-off... I'd expected XMLReader to be slower than SimpleXML, but not quite as slow as that.</p>\r\n<p>I'm looking at a possible hybrid method using XMLReader to locate the nodes and then SimpleXML to parse them, which may or may not improve the XMLReader method speed... initial experiments suggest that it's even slower than straight XMLReader.</p>\r\n<p>The real drawback: it adds more complexity to the code, and it's a significant effort to convert the code to use these methods. This isn't something that can be done for the next release, but I will target at least the Excel2007 (.xlsx) Reader for the 1.7.9\r\n release, with the other zipped-xml readers before the end of the year. Rather than a simple replacement for the existing readers, I'll try to make it configurable, offering the choice of SimpleXML or XMLReader.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-06-29T14:05:55.3-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "870516",
    "ThreadId": "242712",
    "Html": "<p>Mark,</p>\r\n<p>PHPExcel plays an important role in an open source framework I'm working on. (thedatatank.com, https://github.com/iRail/The-DataTank)</p>\r\n<p>A streaming feature would be of great use for us.</p>\r\n<p>I don't know the xlsx format internally but would it be possible to get a list of available sheets and named ranges before you start reading.</p>\r\n<p>And then define a sheet, named range or cell range and start streamreading the xlsx file based on that information?</p>\r\n<p>Would this also be possible on the old xls format?</p>\r\n<p>Currently we only use PHPExcel to read excel files but we need to include the full library in our project. Would it be possible to disconnect the Reader part as a seperate library or download?</p>\r\n<p>Thanks,</p>\r\n<p>Lieven Janssen</p>",
    "PostedDate": "2012-07-16T19:49:50.14-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "870572",
    "ThreadId": "242712",
    "Html": "<p>It already is possible to get the list of worksheets without loading the entire file using the listWorksheetNames() or listWorksheetInfo() methods of the Readers. listWorksheetNames() returns just an array of the actual worksheet names, while listWorksheetInfo() returns the size of each worksheet as well. It is also possible to define a sheet (or sheets) to load rather than to load all worksheets using the Reader's setLoadSheetsOnly() method, and to specify a range of cells (rather than all cells) to read using a Read Filter. These options are already available for all Readers (xlsx, xls, ods, csv, gnumeric, etc.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-07-16T23:47:28.233-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "870585",
    "ThreadId": "242712",
    "Html": "<p>Woow thanks for the prompt reply!</p>\r\n<p>Is it&nbsp; possible to get the named ranges as well without loading the entire file?</p>\r\n<p>Is the file streaming functionality still foreseen to be implemented in version 1.7.9?</p>",
    "PostedDate": "2012-07-17T00:07:50.693-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "870913",
    "ThreadId": "242712",
    "Html": "<p>The listWorksheetNames()&nbsp;and listWorksheetInfo() methods don't return anything more than I've indicated; and while named ranges would be possible, it's probably not a requirement that a majority of users would consider necessary (especially as it would slow down those methods). The main benefit would be that you could configure a read filter based on the value of the named range, so I can add it to the TODO list, but it won't be a high priority.</p>\r\n<p>Streaming is still likely to be version 1.7.9 (probably somewhere around November/December). Because it's&nbsp; trade-off between speed/memory, I need to work out how to make it configurable so that people who want speed and aren't too worried about memory can still use the simpleXML Readers, while those who need the memory and are less worried about speed can use the XMLReader-based Reader... without giving myself too much duplication to maintain between two versions of the Readers.</p>\r\n<p>I'm also starting work on some changes to the cell definition to handle array formulae, which entails deprecating some cell methods, so that will be staged across several releases (culminating in a complete rewrite of the calculation engine) which may be the one thing that delays the XMLReader alternative to SimpleXML - especially as I'll need to modify every single reader/writer that needs to support array formulae to handle this... I want to get that change complete before I branch the XML-based readers into SimpleXML/XMLReader variants. If my timing is right, both those changes will be in 1.7.9, but it might push November into December.</p>",
    "PostedDate": "2012-07-17T10:02:08.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "986723",
    "ThreadId": "242712",
    "Html": "\r\n<p>Some initial details of using XMLReader with file streaming based on its implementation for the listWorksheetNames() and&nbsp;listWorksheetInfo() methods.</p>\r\n<table border=\"1\" cellspacing=\"4\" cellpadding=\"4\">\r\n<tbody>\r\n<tr>\r\n<th>&nbsp;</th>\r\n<th colspan=\"6\"><strong>Version 1.7.8</strong></th>\r\n<th colspan=\"6\"><strong>Current Development Code</strong></th>\r\n</tr>\r\n<tr>\r\n<th>&nbsp;</th>\r\n<th colspan=\"3\"><strong>listWorksheetNames()</strong></th>\r\n<th colspan=\"3\"><strong>listWorksheetInfo()</strong></th>\r\n<th colspan=\"3\"><strong>listWorksheetNames()</strong></th>\r\n<th colspan=\"3\"><strong>listWorksheetInfo()</strong></th>\r\n</tr>\r\n<tr>\r\n<th>Format</th>\r\n<th>Time (s)</th>\r\n<th>Memory after call (MB)</th>\r\n<th>Peak memory usage (MB)</th>\r\n<th>Time (s)</th>\r\n<th>Memory after call (MB)</th>\r\n<th>Peak memory usage (MB)</th>\r\n<th>Time (s)</th>\r\n<th>Memory after call (MB)</th>\r\n<th>Peak memory usage (MB)</th>\r\n<th>Time (s)</th>\r\n<th>Memory after call (MB)</th>\r\n<th>Peak memory usage (MB)</th>\r\n</tr>\r\n<tr>\r\n<td><strong>Excel 2007 .xlsx</strong></td>\r\n<td align=\"right\">0.0114</td>\r\n<td align=\"right\">1.25</td>\r\n<td align=\"right\">1.25</td>\r\n<td align=\"right\">4.1998</td>\r\n<td align=\"right\">2.50</td>\r\n<td align=\"right\">8.75</td>\r\n<td align=\"right\">0.0113</td>\r\n<td align=\"right\">1.25</td>\r\n<td align=\"right\">1.25</td>\r\n<td align=\"right\">3.2238</td>\r\n<td align=\"right\">1.25</td>\r\n<td align=\"right\">1.25</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Open/Libre Office .ods</strong></td>\r\n<td align=\"right\">0.1404</td>\r\n<td align=\"right\">0.50</td>\r\n<td align=\"right\">5.75</td>\r\n<td align=\"right\">0.5296</td>\r\n<td align=\"right\">0.50</td>\r\n<td align=\"right\">5.75</td>\r\n<td align=\"right\">0.1194</td>\r\n<td align=\"right\">0.50</td>\r\n<td align=\"right\">0.50</td>\r\n<td align=\"right\">0.2543</td>\r\n<td align=\"right\">0.50</td>\r\n<td align=\"right\">0.50</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Gnumeric</strong></td>\r\n<td align=\"right\">3.4176</td>\r\n<td align=\"right\">1.00</td>\r\n<td align=\"right\">38.75</td>\r\n<td align=\"right\">5.2841</td>\r\n<td align=\"right\">1.00</td>\r\n<td align=\"right\">38.75</td>\r\n<td align=\"right\">0.0077</td>\r\n<td align=\"right\">0.75</td>\r\n<td align=\"right\">0.75</td>\r\n<td align=\"right\">3.1676</td>\r\n<td align=\"right\">0.75</td>\r\n<td align=\"right\">0.75</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>Testing was done against a relatively small spreadsheet, comprising 2 worksheets, each with 16370 rows by 9 columns.</p>\r\n<p>While the main load() code won't be as performant as these methods, I hope that the peak memory savings avoiding loading the file itself into memory will be every bit as good.</p>\r\n<p>I'm still hoping that I can get at least the Excel2007 Reader converted to working with this method in time for the 1.7.9 release.</p>\r\n",
    "PostedDate": "2013-01-14T14:11:52.253-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "986885",
    "ThreadId": "242712",
    "Html": "15.01.13 00:12, MarkBaker написав(ла):<br>\r\n&gt; From: MarkBaker<br>\r\n&gt;<br>\r\n&gt; Some initial details of using XMLReader with file streaming based on its<br>\r\n&gt; implementation for the listWorksheetNames() and listWorksheetInfo() methods.<br>\r\n&gt;<br>\r\n&gt; Version 1.7.8 Current Development Code<br>\r\n&gt; listWorksheetNames() listWorksheetInfo() listWorksheetNames()<br>\r\n&gt; listWorksheetInfo()<br>\r\n&gt; Format Time (s) Memory after call (MB) Peak memory usage (MB) Time<br>\r\n&gt; (s) Memory after call (MB) Peak memory usage (MB) Time (s) Memory<br>\r\n&gt; after call (MB) Peak memory usage (MB) Time (s) Memory after call<br>\r\n&gt; (MB) Peak memory usage (MB)<br>\r\n&gt; *Excel 2007 .xlsx* 0.0114 1.25 1.25 4.1998 2.50 8.75 0.0113<br>\r\n&gt; 1.25 1.25 3.2238 1.25 1.25<br>\r\n&gt; *Open/Libre Office .ods* 0.1404 0.50 5.75 0.5296 0.50 5.75<br>\r\n&gt; 0.1194 0.50 0.50 0.2543 0.50 0.50<br>\r\n&gt; *Gnumeric* 3.4176 1.00 38.75 5.2841 1.00 38.75 0.0077 0.75<br>\r\n&gt; 0.75 3.1676 0.75 0.75<br>\r\n&gt;<br>\r\n&gt; Testing was done against a relatively small spreadsheet, comprising 2<br>\r\n&gt; worksheets, each with 16370 rows by 9 columns.<br>\r\n&gt;<br>\r\n&gt; While the main load() code won't be as performant as these methods, I<br>\r\n&gt; hope that the peak memory savings avoiding loading the file itself into<br>\r\n&gt; memory will be every bit as good.<br>\r\n&gt;<br>\r\n&gt; I'm still hoping that I can get at least the Excel2007 Reader converted<br>\r\n&gt; to working with this method in time for the 1.7.9 release.<br>\r\n&gt;<br>\r\n&gt; Read the full discussion online<br>\r\n&gt; &lt;http://phpexcel.codeplex.com/discussions/242712#post986723&gt;.<br>\r\n&gt;<br>\r\n&gt; To add a post to this discussion, reply to this email<br>\r\n&gt; ([email removed]<br>\r\n&gt; &lt;mailto:[email removed]?subject=[PHPExcel:242712]&gt;)<br>\r\n&gt;<br>\r\n&gt; To start a new discussion for this project, email<br>\r\n&gt; [email removed] &lt;mailto:[email removed]&gt;<br>\r\n&gt;<br>\r\n&gt; You are receiving this email because you subscribed to this discussion<br>\r\n&gt; on CodePlex. You can unsubscribe<br>\r\n&gt; &lt;https://phpexcel.codeplex.com/discussions/242712/unsubscribe/&gt; on<br>\r\n&gt; CodePlex.com.<br>\r\n&gt;<br>\r\n&gt; Please note: Images and attachments will be removed from emails. Any<br>\r\n&gt; posts to this discussion will also be available online at CodePlex.com<br>\r\n&gt;<br>\r\n<br>\r\nReally cool! Thanks!",
    "PostedDate": "2013-01-15T00:48:54.53-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1350524",
    "ThreadId": "242712",
    "Html": "Hi all, \r<br />\n<br />\nI got the same issue (Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 115 bytes)) when reading Excel file. I have tried some solutions like increasing memory or using cache but all of them cannot solve this issue. Please help!!!\r<br />\n<br />\nThank you!<br />\n",
    "PostedDate": "2015-02-10T01:09:40.057-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]