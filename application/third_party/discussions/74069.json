[
  {
    "Id": "253350",
    "ThreadId": "74069",
    "Html": "<p>When making a call using getCalculatedValue(), I am experiencing different results when accessing the same spreadsheet saved in Excel 5 and 2007 formats. Excel5 format returns the calculated value but 2007 returns #VALUE!</p>\r\n<p>The spreadsheet is from a third party and the formulas are quite extensive so without wanting to post an example just yet I am wondering if there is any way to debug the ouput of how the calculation is made in the php libraries so I can pinpoint the problem?</p>\r\n<p>Many thanks in advance</p>",
    "PostedDate": "2009-11-04T09:05:18.8-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "253373",
    "ThreadId": "74069",
    "Html": "<p>No need to reply. Found some useful code elsewhere in another discussion.</p>\r\n<p>Great product BTW!</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Green\">/******** START DEBUG ********/</span>\r\n\r\n$sheet = $objPHPExcel-&gt;getActiveSheet();\r\n\r\n$cell = <span style=\"color:#A31515\">'D18'</span>;\r\n$cellValue = $sheet-&gt;getCell($cell)-&gt;getValue();\r\n<span style=\"color:Blue\">echo</span> <span style=\"color:#A31515\">'&lt;b&gt;'</span>.$cell.<span style=\"color:#A31515\">' Value is &lt;/b&gt;'</span>.$cellValue.<span style=\"color:#A31515\">&quot;&lt;br /&gt;\\n&quot;</span>;\r\n\r\n<span style=\"color:Blue\">echo</span> <span style=\"color:#A31515\">'&lt;b&gt;Parser Stack :-&lt;/b&gt;&lt;pre&gt;'</span>;\r\n$tokens = PHPExcel_Calculation::getInstance()-&gt;parseFormula($cellValue);\r\nprint_r($tokens);\r\n<span style=\"color:Blue\">echo</span> <span style=\"color:#A31515\">'&lt;/pre&gt;'</span>;\r\n$cellValue = $sheet-&gt;getCell($cell)-&gt;getCalculatedValue();\r\n<span style=\"color:Blue\">echo</span> <span style=\"color:#A31515\">'&lt;b&gt;'</span>.$cell.<span style=\"color:#A31515\">' Calculated Value is &lt;/b&gt;'</span>.$cellValue.<span style=\"color:#A31515\">&quot;&lt;br /&gt;\\n&quot;</span>;\r\n\r\n<span style=\"color:Blue\">echo</span> <span style=\"color:#A31515\">'&lt;h3&gt;Evaluation Log:&lt;/h3&gt;&lt;pre&gt;'</span>;\r\nprint_r(PHPExcel_Calculation::getInstance()-&gt;debugLog);\r\n<span style=\"color:Blue\">echo</span> <span style=\"color:#A31515\">'&lt;/pre&gt;'</span>;\r\n\r\n<span style=\"color:Green\">/******** END DEBUG ********/</span>\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-11-04T09:45:26.353-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "253515",
    "ThreadId": "74069",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>calsoftware wrote:</strong><br>\r\n<p>When making a call using getCalculatedValue(), I am experiencing different results when accessing the same spreadsheet saved in Excel 5 and 2007 formats. Excel5 format returns the calculated value but 2007 returns #VALUE!</p>\r\n</blockquote>\r\n<p>It sounds like a bug. If you can provide some example that shows the problem please let us know.</p>",
    "PostedDate": "2009-11-04T15:40:27.417-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254148",
    "ThreadId": "74069",
    "Html": "<p>I don't know if the following words are related to this topic or not, but, please, try to check it.</p>\r\n<p>Script is following:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>&lt;?php\r\n<span style=\"color:Blue\">require_once</span> <span style=\"color:#A31515\">'Classes/PHPExcel.php'</span>;\r\n<span style=\"color:Blue\">require_once</span> <span style=\"color:#A31515\">'Classes/PHPExcel/Cell.php'</span>;\r\n<span style=\"color:Blue\">require_once</span> <span style=\"color:#A31515\">'Classes/PHPExcel/Writer/Excel5.php'</span>;\r\n\r\n  $xls = <span style=\"color:Blue\">new</span> PHPExcel();\r\n  $sheet = $xls-&gt;getActiveSheet();\r\n  $sheet-&gt;getCell(<span style=\"color:#A31515\">'A1'</span>)-&gt;setValue(2);\r\n  $sheet-&gt;getCell(<span style=\"color:#A31515\">'A2'</span>)-&gt;setValue(3);\r\n  $sheet-&gt;getCell(<span style=\"color:#A31515\">'B1'</span>)-&gt;setValue(4);\r\n  $sheet-&gt;getCell(<span style=\"color:#A31515\">'B2'</span>)-&gt;setValue(5);\r\n  $sheet-&gt;getCell(<span style=\"color:#A31515\">'C1'</span>)-&gt;setValue(<span style=\"color:#A31515\">'=SUMPRODUCT(A1:A2;B1:B2)'</span>);\r\n  \r\n  $xlsWriter = <span style=\"color:Blue\">new</span> PHPExcel_Writer_Excel5($xls);\r\n  $fn = tempnam( <span style=\"color:#A31515\">''</span>, <span style=\"color:#A31515\">'test'</span> );\r\n  <span style=\"color:Blue\">if</span>( $fn != false )\r\n    $xlsWriter-&gt;save( $fn );\r\n?&gt;\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Execute this script and then try to open XLS file, created by script, with different versions of Excel (or similar soft).</p>\r\n<p>My results:</p>\r\n<p>1) when I open this file with OpenOffice 3.0 for Linux - all is OK (cell C1 contains 23 - = 2 * 4 + 3 * 5 - as expected)</p>\r\n<p>2) when I open file with OpenOffice 2.4 for Winidows - all is OK</p>\r\n<p>3) when I open file with MS Excel 2007 - cell C1 contains error message '#VALUE!'. But formula in that cell is correct. And when I click on &quot;error&quot; sign near that cell, then select &quot;correct formula&quot; menu item, then press &quot;Enter&quot; without any changes - after that cell C1 contains 23.</p>",
    "PostedDate": "2009-11-06T01:13:25.577-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254169",
    "ThreadId": "74069",
    "Html": "<p>Couple of points to note.</p>\r\n<p>Please use the comma (,) rather than semi-colon (;) for separating function arguments. At present, the internal calculation engine only recognises commas</p>\r\n<p>Secondly, SUMPRODUCT() isn't yet implemented in the calculation engine, so the result of this formula cannot be calculated internally by PHPExcel. When writing an Excel2007 file, both formula and the result of that calculation are written to the xlsx file, calculated using the internal calculation engine.<br>Because SUMPRODUCT() isn't yet implemented, it will return a&nbsp;#Not Yet Implemented PHPExcel error, and it is that result which will be written to the xlsx file.&nbsp;This value is not recognised as an error by Excel, so it will treat it as #Value!, hence what you see in the workbook when you open it in Excel. Excel can, of course, recalculate because SUMPRODUCT() is a recognised function there, hence your observations when using &quot;correct formula&quot;. Open Office automatically recalculates all formulae when you open a document there, so you don't see the #Value! result, but the actual correct result for the formula.,</p>",
    "PostedDate": "2009-11-06T02:05:37.137-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254175",
    "ThreadId": "74069",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>MarkBaker wrote:</strong><br>\r\n<p>Couple of points to note.</p>\r\n<p>Please use the comma (,) rather than semi-colon (;) for separating function arguments. At present, the internal calculation engine only recognises commas</p>\r\n</blockquote>\r\n<p>That is not a way - function SUMPRODUCT <span style=\"text-decoration:underline\"><strong><em>requires</em></strong></span> semi-colon as argument separator. Change it to comma - and you will get an error message immediately. (Tested in OpenOffice 3 for Linux).</p>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>MarkBaker wrote:</strong><br>\r\n<p>Secondly, SUMPRODUCT() isn't yet implemented in the calculation engine, so the result of this formula cannot be calculated internally by PHPExcel. When writing an Excel2007 file, both formula and the result of that calculation are written to the xlsx file, calculated using the internal calculation engine.</p>\r\n</blockquote>\r\n<p>That is bad news for me. But look to my code: I save file as Excel5 &quot;.xls&quot;, not as Excel2007 &quot;.xlsx&quot;. What about it?</p>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>MarkBaker wrote:</strong><br> Because SUMPRODUCT() isn't yet implemented, it will return a&nbsp;#Not Yet Implemented PHPExcel error, and it is that result which will be written to the xlsx file.&nbsp;This value is not recognised as an error by Excel, so it will treat it as #Value!, hence what you see in the workbook when you open it in Excel. Excel can, of course, recalculate because SUMPRODUCT() is a recognised function there, hence your observations when using &quot;correct formula&quot;. Open Office automatically recalculates all formulae when you open a document there, so you don't see the #Value! result, but the actual correct result for the formula.,</blockquote>\r\n<p>:-( So when can I expect implementation of SUMPRODUCT in PHPExcel?</p>",
    "PostedDate": "2009-11-06T02:28:00.317-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254199",
    "ThreadId": "74069",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>GRIG wrote:</strong><br>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>MarkBaker wrote:</strong><br>\r\n<p>Couple of points to note.</p>\r\n<p>Please use the comma (,) rather than semi-colon (;) for separating function arguments. At present, the internal calculation engine only recognises commas</p>\r\n</blockquote>\r\n<p>That is not a way - function SUMPRODUCT <span style=\"text-decoration:underline\"><strong><em>requires</em></strong></span> semi-colon as argument separator. Change it to comma - and you will get an error message immediately. (Tested in OpenOffice 3 for Linux).</p>\r\n</blockquote>\r\n<p>Open Office uses a sem-colon separator for function arguments. Excel uses a comma (by default in the US/English versions, I can't comment on other language versions). PHPExcel has always used the comma. This doesn't only apply to SUMPRODUCT() but to all functions that accept more than one argument.</p>\r\n<p>When opening an Excel (xls or xlsx) workbook in Open Office, OO Calc should handle any conversion between , and ;</p>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>GRIG wrote:</strong><br>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>MarkBaker wrote:</strong><br>\r\n<p>Secondly, SUMPRODUCT() isn't yet implemented in the calculation engine, so the result of this formula cannot be calculated internally by PHPExcel. When writing an Excel2007 file, both formula and the result of that calculation are written to the xlsx file, calculated using the internal calculation engine.</p>\r\n</blockquote>\r\n<p>That is bad news for me. But look to my code: I save file as Excel5 &quot;.xls&quot;, not as Excel2007 &quot;.xlsx&quot;. What about it?</p>\r\n</blockquote>\r\n<p>No comment at the moment. Without doing some additional testing using both Excel 95/2003 and Excel 2007, I can't answer that. Possibly it's a problem in the writer code.</p>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>GRIG wrote:</strong><br>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>MarkBaker wrote:</strong><br>Because SUMPRODUCT() isn't yet implemented, it will return a&nbsp;#Not Yet Implemented PHPExcel error, and it is that result which will be written to the xlsx file.&nbsp;This value is not recognised as an error by Excel, so it will treat it as #Value!, hence what you see in the workbook when you open it in Excel. Excel can, of course, recalculate because SUMPRODUCT() is a recognised function there, hence your observations when using &quot;correct formula&quot;. Open Office automatically recalculates all formulae when you open a document there, so you don't see the #Value! result, but the actual correct result for the formula.,</blockquote>\r\n<p>:-( So when can I expect implementation of SUMPRODUCT in PHPExcel?</p>\r\n</blockquote>\r\n<p>Already added in SVN, should be available in the <a href=\"http://phpexcel.codeplex.com/SourceControl/ListDownloadableCommits.aspx\">latest downloads</a> tomorrow</p>",
    "PostedDate": "2009-11-06T04:07:26.39-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254220",
    "ThreadId": "74069",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>MarkBaker wrote:</strong><br>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>GRIG wrote:</strong><br>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>MarkBaker wrote:</strong><br>\r\n<p>Couple of points to note.</p>\r\n<p>Please use the comma (,) rather than semi-colon (;) for separating function arguments. At present, the internal calculation engine only recognises commas</p>\r\n</blockquote>\r\n<p>That is not a way - function SUMPRODUCT <span style=\"text-decoration:underline\"><strong><em>requires</em></strong></span> semi-colon as argument separator. Change it to comma - and you will get an error message immediately. (Tested in OpenOffice 3 for Linux).</p>\r\n</blockquote>\r\n<p>Open Office uses a sem-colon separator for function arguments. Excel uses a comma (by default in the US/English versions, I can't comment on other language versions). PHPExcel has always used the comma. This doesn't only apply to SUMPRODUCT() but to all functions that accept more than one argument.</p>\r\n</blockquote>\r\n<p>MS Excel 2007 (Russian version) requires semi-colon. Comma is error. (Just tested)</p>\r\n<p>But may be there is some handling by MSExcel here. Function names are &quot;translated&quot; into russian as listed in documentation - so argument separator also can be translated.</p>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>MarkBaker wrote:</strong><br>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>GRIG wrote:</strong><br>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>MarkBaker wrote:</strong><br>Because SUMPRODUCT() isn't yet implemented, it will return a&nbsp;#Not Yet Implemented PHPExcel error, and it is that result which will be written to the xlsx file.&nbsp;This value is not recognised as an error by Excel, so it will treat it as #Value!, hence what you see in the workbook when you open it in Excel. Excel can, of course, recalculate because SUMPRODUCT() is a recognised function there, hence your observations when using &quot;correct formula&quot;. Open Office automatically recalculates all formulae when you open a document there, so you don't see the #Value! result, but the actual correct result for the formula.,</blockquote>\r\n<p>:-( So when can I expect implementation of SUMPRODUCT in PHPExcel?</p>\r\n</blockquote>\r\n<p>Already added in SVN, should be available in the <a href=\"http://phpexcel.codeplex.com/SourceControl/ListDownloadableCommits.aspx\">latest downloads</a> tomorrow</p>\r\n</blockquote>\r\n<p>Well, I shall wait a little :-)</p>",
    "PostedDate": "2009-11-06T05:02:39.697-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254225",
    "ThreadId": "74069",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>GRIG wrote:</strong><br>\r\n<p>MS Excel 2007 (Russian version) requires semi-colon. Comma is error. (Just tested)</p>\r\n<p>But may be there is some handling by MSExcel here. Function names are &quot;translated&quot; into russian as listed in documentation - so argument separator also can be translated.</p>\r\n</blockquote>\r\n<p>That's quite possible.... I know some languages use characters other than the comma; but Excel should handle any conversion itself, so if you were to send me a workbook with Russian function names and ; separator, I'd expect my English version of Excel to translate it for me.</p>\r\n<p>At present, I can only guarantee that PHPExcel works correctly with English function names and the comma separator for arguments. I do have a list of Excel function names in the following languages:</p>\r\n<table border=0>\r\n<tbody>\r\n<tr valign=top>\r\n<td>\r\n<ul>\r\n<li>Czech</li>\r\n<li>Danish</li>\r\n<li>Dutch</li>\r\n<li>Finnish</li>\r\n<li>French</li>\r\n</ul>\r\n</td>\r\n<td valign=top>\r\n<ul>\r\n<li>German</li>\r\n<li>Hungarian</li>\r\n<li>Italian</li>\r\n<li>Norwegian</li>\r\n</ul>\r\n</td>\r\n<td valign=top>\r\n<ul>\r\n<li>Polish</li>\r\n<li>Portuguese</li>\r\n<li>Spanish</li>\r\n<li>Swedish</li>\r\n</ul>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>and (at some point in the future) I will try to implement that list so formulae can be written using the appropriate language... quite how I'm going to do this, I don't yet know, and it's near the bottom of my &quot;to do&quot; list.</p>",
    "PostedDate": "2009-11-06T05:21:16.273-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254388",
    "ThreadId": "74069",
    "Html": "<p>Also note that even if you are using some non-English version MS Office Excel, when you save the workbook the formula is always written in English inside the file.</p>\r\n<p>Example using Danish version of MS Office Excel 2007:</p>\r\n<p><a href=\"http://img29.imageshack.us/img29/4629/ss20091106232859.png\"><img src=\"http://img29.imageshack.us/img29/4629/ss20091106232859.th.png\" border=0 alt=\"\"></a></p>\r\n<p>Unzip the xlsx file and you will notice that the formula is written in English.</p>\r\n<p><a href=\"http://img682.imageshack.us/img682/2512/ss20091106233442.png\"><img src=\"http://img682.imageshack.us/img682/2512/ss20091106233442.th.png\" border=0 alt=\"\"></a></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-11-06T14:42:47.693-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254962",
    "ThreadId": "74069",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>MarkBaker wrote:</strong><br>\r\n<p>At present, I can only guarantee that PHPExcel works correctly with English function names and the comma separator for arguments. I do have a list of Excel function names in the following languages:</p>\r\n.......\r\n<p>and (at some point in the future) I will try to implement that list so formulae can be written using the appropriate language... quite how I'm going to do this, I don't yet know, and it's near the bottom of my &quot;to do&quot; list.</p>\r\n</blockquote>\r\n<p>This seems to be simple in implementation. In file PHPExcel/Calculation.php you have a list of all excel functions in array $_PHPExcelFunctions. And function name is used as key in that array. I think you need just 1 another array (with name some like $_PHPExcelNLSFunctions). Keys of this array are function names, used in localised Excel version, values are correspondent english names. For example (Russian version):</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>$_PHPExcelNLSFunctions = <span style=\"color:Blue\">array</span> (\r\n  <span style=\"color:#A31515\">'СУММ'</span> =&gt; <span style=\"color:#A31515\">'SUM'</span>,\r\n  <span style=\"color:#A31515\">'СУММПРОИЗВ'</span> =&gt; <span style=\"color:#A31515\">'SUMPRODUCT'</span>,\r\n  ....\r\n);\r\n\r\n</pre>\r\n</div>\r\nThen when you do formula parsing you will search function name not in $_PHPExcelFunctions, but in $_PHPExcelNLSFunctions, &quot;translate&quot; it into english using this array, then use english function name to search in $_PHPExcelFunctions and do all the rest as before.</p>\r\n<p>Correct $_PHPExcelNLSFunctions array can be loaded from file by user command (or function call).</p>\r\n<p>Default $_PHPExcelNLSFunctions array content is for english function names. Using this will make parsing process independent of selected language.</p>\r\n<p>This idea can be expanded to multi-NLS support in simple way - just do $_PHPExcelNLSFunctions as array of arrays. And then use syntax like\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>$englishFunctionName = $_PHPExcelMultiNLSFunctions[<span style=\"color:#A31515\">$usedLanguage</span>][<span style=\"color:#A31515\">$NLSFunctionName</span>];</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-11-09T01:29:30.883-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254986",
    "ThreadId": "74069",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>GRIG wrote:</strong><br>\r\n<p>This seems to be simple in implementation. In file PHPExcel/Calculation.php you have a list of all excel functions in array $_PHPExcelFunctions. And function name is used as key in that array. I think you need just 1 another array (with name some like $_PHPExcelNLSFunctions). Keys of this array are function names, used in localised Excel version, values are correspondent english names. For example (Russian version):</p>\r\n</blockquote>\r\n<p>Simple&nbsp;enough in principle, and not too different&nbsp;from what I was thinking of using... autoloading a cross-reference array of function names for the appropriate language; but if we can automatically determine the language used&nbsp;when reading the file rather than forcing the coder to identify the language, it would be better.&nbsp;And I'm still not sure of the best method to use when writing a file.</p>",
    "PostedDate": "2009-11-09T03:30:14.48-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254988",
    "ThreadId": "74069",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>koyama wrote:</strong><br>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>calsoftware wrote:</strong><br>\r\n<p>When making a call using getCalculatedValue(), I am experiencing different results when accessing the same spreadsheet saved in Excel 5 and 2007 formats. Excel5 format returns the calculated value but 2007 returns #VALUE!</p>\r\n</blockquote>\r\n<p>It sounds like a bug. If you can provide some example that shows the problem please let us know.</p>\r\n</blockquote>\r\n<p>Unfortunately, due to NDA I'm unable to send the actual spreadsheet that is causing the issue and because of the complicated nature of the calculations and the fact that there are so many going on, for the time being I am happy to workaround the issue.</p>\r\n<p>FYI, I found that the problem was summing multiple cells using the + operator instead of using the SUM() function e.g. &quot;=AB19+AB32+AB45+AB48+AB47+AB49+AB50+AB51+AB52+AB56&quot;. When one of the values in the cells was empty, #VALUE! was returned.</p>\r\n<p>I was able to workaround this by manually formatting the cell in question to be numeric with a value of 0 (Zero).</p>\r\n<p>Thanks for the fast response and keep up the good work on a great product.</p>",
    "PostedDate": "2009-11-09T03:51:04.683-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "255007",
    "ThreadId": "74069",
    "Html": "<p><em>&gt;&gt; When one of the values in the cells was empty, #VALUE! was returned.</em></p>\r\n<p>What version of PHPExcel are you using? I think this may be fixed in PHPExcel 1.7.1. See this bug:</p>\r\n<p><a href=\"http://phpexcel.codeplex.com/WorkItem/View.aspx?WorkItemId=10799\">http://phpexcel.codeplex.com/WorkItem/View.aspx?WorkItemId=10799</a></p>",
    "PostedDate": "2009-11-09T04:19:56.58-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "255015",
    "ThreadId": "74069",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>MarkBaker wrote:</strong><br>\r\n<p>Simple&nbsp;enough in principle, and not too different&nbsp;from what I was thinking of using... autoloading a cross-reference array of function names for the appropriate language; but if we can automatically determine the language used&nbsp;when reading the file rather than forcing the coder to identify the language, it would be better.&nbsp;And I'm still not sure of the best method to use when writing a file.</p>\r\n</blockquote>\r\n<p>This seems to be impossible. Look some up at 2 pictures made by Koyama: excel application uses Danish language, but function name is stored in English in file. That means you cannot use function names to detect language. So the only data you can use to detect language are string constants in cells. That seems to be very unreliable basement of detection. It is possible to make XLS file without any string constant, but with functions.</p>\r\n<p>Then, this seems to be not necessary. Just because of the same reason - function names are stored in English. So using of localized function names is just for PHP coder, not for XLS user.</p>",
    "PostedDate": "2009-11-09T04:36:14.803-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "255020",
    "ThreadId": "74069",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>calsoftware wrote:</strong>\r\n<p>FYI, I found that the problem was summing multiple cells using the + operator instead of using the SUM() function e.g. &quot;=AB19+AB32+AB45+AB48+AB47+AB49+AB50+AB51+AB52+AB56&quot;. When one of the values in the cells was empty, #VALUE! was returned.</p>\r\n</blockquote>\r\n<p>AFAIK, when excel functions like SUM() work on cell ranges, they ignore empty cells and work only on non-empty cells. Your formula contains direct references to each cell - so empty cells cannot be ignored. Try to use formula &quot;=SUM(AB19,AB32,AB45,AB48,AB47,AB49,AB50,AB51,AB52,AB56)&quot; instead - may be this is a solution.</p>",
    "PostedDate": "2009-11-09T04:42:19.197-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]