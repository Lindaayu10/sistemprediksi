[
  {
    "Id": "815122",
    "ThreadId": "349916",
    "Html": "\r\n<p>I have a 25M xls file (22000 rows &amp; 44 columns) that I am trying to convert into csv.&nbsp; Just doing a simple read of the file is using in excess of 492M of memory and my server automatically kills the script.</p>\r\n<p>First I attempted using the &quot;chunk&quot; method and I do not know if I set it up correctly or not but it seemed pretty useless.&nbsp; I went as low as 25 rows for the chunk and the script was still being killed.</p>\r\n<p>So since I only need 6 columns from the file, I thought I would try the code for specific rows and columns.&nbsp; The only problem with this is the 6 columns I need are C, D, I, J, K, T.&nbsp; As you can see, the columns are not consecutive.&nbsp; Is it\r\n possible to retrieve columns that are not consecutive?</p>\r\n<p>If I get this far, I am still going to need to save memory somewhere because if I just try the range('I','K'), it is still resource intensive and killing the script.</p>\r\n<p>If someone could help with the various columns and get the chunk method working correctly, I would greatly appreciate it.</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>\t<span style=\"color:blue\">require_once</span> <span style=\"color:#a31515\">'/Classes/PHPExcel.php'</span>;\r\n\t\r\n\tfn_echo(<span style=\"color:#a31515\">'Create new PHPExcel object..&lt;br /&gt;'</span>);\r\n\t$objPHPExcel = <span style=\"color:blue\">new</span> PHPExcel();\r\n\r\n\tfn_echo(<span style=\"color:#a31515\">'Load temp.xls file..&lt;br /&gt;'</span>);\r\n\t$inputFileName = <span style=\"color:#a31515\">'/temp.xls'</span>;\r\n\t$inputFileType = PHPExcel_IOFactory::identify($inputFileName);\r\n\t$sheetname = <span style=\"color:#a31515\">'gsprods'</span>;\r\n\t\r\n\t<span style=\"color:blue\">class</span> MyReadFilter <span style=\"color:blue\">implements</span> PHPExcel_Reader_IReadFilter\r\n\t{\r\n\t\t<span style=\"color:blue\">private</span> $_startRow = 0;\r\n\t\t<span style=\"color:blue\">private</span> $_endRow   = 0;\r\n\t\t<span style=\"color:blue\">private</span> $_columns  = <span style=\"color:blue\">array</span>();\r\n\t\t\r\n\t\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> __construct($startRow, $endRow, $columns) {\r\n\t\t\t$this-&gt;_startRow = $startRow;\r\n\t\t\t$this-&gt;_endRow   = $endRow;\r\n\t\t\t$this-&gt;_columns  = $columns;\r\n\t\t}\r\n\t\t\r\n\t\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">function</span> readCell($column, $row, $worksheetName = <span style=\"color:#a31515\">''</span>) {\r\n\t\t\t<span style=\"color:blue\">if</span> ($row &gt;= $this-&gt;_startRow &amp;&amp; $row &lt;= $this-&gt;_endRow) {\r\n\t\t\t\t<span style=\"color:blue\">if</span> (in_array($column,$this-&gt;_columns)) {\r\n\t\t\t\t\t<span style=\"color:blue\">return</span> true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t<span style=\"color:blue\">return</span> false;\r\n\t\t}\r\n\t}\r\n\t\t\r\n\t$filterSubset = <span style=\"color:blue\">new</span> MyReadFilter(1,22000,range(<span style=\"color:#a31515\">'I'</span>,<span style=\"color:#a31515\">'K'</span>));\r\n\t$objReader = PHPExcel_IOFactory::createReader($inputFileType);\r\n\t$objReader-&gt;setReadFilter($filterSubset);\r\n\t$objReader-&gt;setReadDataOnly(true);\r\n\t$objPHPExcel = $objReader-&gt;load($inputFileName);\r\n\r\n\tfn_echo(<span style=\"color:#a31515\">'Write to CSV format..&lt;br /&gt;'</span>);\r\n\t$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, <span style=\"color:#a31515\">'CSV'</span>);\r\n\t$objWriter-&gt;save(str_replace(<span style=\"color:#a31515\">'.php'</span>, <span style=\"color:#a31515\">'.csv'</span>, DIR_COMPILED . <span style=\"color:#a31515\">'gsprods.csv'</span>));\r\n</pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2012-03-24T21:39:01.043-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "815645",
    "ThreadId": "349916",
    "Html": "<p>Here is how I implemented the ReadFilter so that I can pass it an array of just the Column Letters I want read. Not sure if this applicable to what you want though. The following will read just the columns specified and will read 2000 rows at a time until  row 22000 is reached. The full code example is <a href=\"http://phpexcel.codeplex.com/discussions/259971\"> here</a> but it involves some customized code of the readers. My full code example also has a routine for determining the chunk size based on the systems available memory which can be tweaked as needed.</p>\n<p>$ReadFilter = new ReadFilter();<br /> $SpreadsheetReaderObj-&gt;setReadFilter($ReadFilter);<br /> $ReadFilter-&gt;setColumns(array('C', 'D', 'I', 'J', 'K', 'T'));<br /> $ReadFilter-&gt;setEndRow(22000);<br /> $ReadFilter-&gt;setChunkSize(2000);</p>\n<p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// This class overrides the default reader in order to ignore extraneous data.</span>\n<span style=\"color: green;\">//</span>\n<span style=\"color: blue;\">class</span> ReadFilter <span style=\"color: blue;\">implements</span> PHPExcel_Reader_IReadFilter\n{\n  <span style=\"color: blue;\">private</span> $_worksheetName;\n  <span style=\"color: blue;\">private</span> $_startRow;\n  <span style=\"color: blue;\">private</span> $_endRow;\n  <span style=\"color: blue;\">private</span> $_columns;\n  <span style=\"color: blue;\">private</span> $_isChunkRead;\n  <span style=\"color: blue;\">private</span> $_chunkStartRow;\n  <span style=\"color: blue;\">private</span> $_chunkSize;\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> __construct() {\n    $this-&gt;_worksheetName = <span style=\"color: #a31515;\">'Worksheet'</span>;\n    $this-&gt;_startRow      = 0;\n    $this-&gt;_endRow        = 65530;\n    $this-&gt;_columns       = $this-&gt;getColumnRange(<span style=\"color: #a31515;\">'A'</span>,<span style=\"color: #a31515;\">'XFD'</span>);\n    $this-&gt;_isChunkRead   = false;\n    $this-&gt;_chunkStartRow = 1;\n    $this-&gt;_chunkSize     = 1000; <span style=\"color: green;\">// Number of rows read in each chunk</span>\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setWorksheetName($worksheetName) {\n    $this-&gt;_worksheetName = (!<span style=\"color: blue;\">empty</span>($worksheetName)) ? $worksheetName : <span style=\"color: #a31515;\">'Worksheet'</span>;\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setStartRow($startRow) {\n    <span style=\"color: blue;\">if</span>(($startRow &gt;= 0) &amp;&amp; ($startRow &lt;= $this-&gt;_endRow)) {\n      $this-&gt;_startRow = $startRow;\n    }\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setEndRow($endRow) {\n    <span style=\"color: blue;\">if</span>($endRow &gt;= $this-&gt;_startRow)\n    {\n      $this-&gt;_endRow = $endRow;\n    }\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setColumns($columns) {\n    $this-&gt;_columns = (is_array($columns)) ? $columns  : $this-&gt;getColumnRange(<span style=\"color: #a31515;\">'A'</span>,<span style=\"color: #a31515;\">'XFD'</span>);\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setChunkRead() {\n    $this-&gt;_isChunkRead = true;\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setChunkSize($chunkSize = null) {\n    <span style=\"color: blue;\">if</span>(!is_null($chunkSize)) {\n      $this-&gt;_chunkSize = $chunkSize;\n    }\n\n    $this-&gt;_isChunkRead = true;\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setChunkStartRow($chunkStartRow = null) {\n    <span style=\"color: blue;\">if</span>(!is_null($chunkStartRow)) {\n      $this-&gt;_chunkStartRow = $chunkStartRow;\n    }\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> unsetChunkRead() {\n    $this-&gt;_isChunkRead = false;\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> readCell($column, $row, $worksheetName = <span style=\"color: #a31515;\">''</span>) {\n    <span style=\"color: blue;\">if</span>((!<span style=\"color: blue;\">empty</span>($worksheetName)) &amp;&amp; ($worksheetName != $this-&gt;_worksheetName)) {\n      <span style=\"color: blue;\">return</span> false;\n    }\n\n    <span style=\"color: blue;\">if</span>($this-&gt;_isChunkRead) {\n      <span style=\"color: green;\">//  Read rows in chunks and only the columns specified</span>\n      <span style=\"color: blue;\">if</span>(($row &gt;= $this-&gt;_chunkStartRow) &amp;&amp; ($row &lt; ($this-&gt;_chunkStartRow + $this-&gt;_chunkSize)) &amp;&amp; ($row &lt;= $this-&gt;_endRow)) {\n        <span style=\"color: blue;\">if</span>(in_array($column, $this-&gt;_columns)) {\n          <span style=\"color: blue;\">return</span> true;\n        }\n      }\n    } <span style=\"color: blue;\">else</span> {\n      <span style=\"color: green;\">//  Read all rows but only the columns specified</span>\n      <span style=\"color: blue;\">if</span>($row &gt;= $this-&gt;_startRow &amp;&amp; $row &lt;= $this-&gt;_endRow) {\n        <span style=\"color: blue;\">if</span>(in_array($column, $this-&gt;_columns)) {\n          <span style=\"color: blue;\">return</span> true;\n        }\n      }\n    }\n\n    <span style=\"color: blue;\">return</span> false;\n  }\n\n  <span style=\"color: green;\">//</span>\n  <span style=\"color: green;\">// Returns array of column letters between ColumnLetter1 and ColumnLetter2 inclusively</span>\n  <span style=\"color: green;\">//</span>\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> getColumnRange($ColumnLetter1, $ColumnLetter2)\n  {\n    <span style=\"color: blue;\">static</span> $ColumnsReference = <span style=\"color: #a31515;\">''</span>;\n\n    <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">empty</span>($ColumnsReference)) {\n      $ColumnsReference = $this-&gt;initializeColumnsReference(3);\n    }\n\n    $ColumnRange = <span style=\"color: blue;\">array</span>();\n\n    $Length1 = strlen($ColumnLetter1);\n    $Length2 = strlen($ColumnLetter2);\n\n    $Pos1 = strpos($ColumnsReference, <span style=\"color: #a31515;\">\"|{$ColumnLetter1}|\"</span>);\n    $Pos2 = strpos($ColumnsReference, <span style=\"color: #a31515;\">\"|{$ColumnLetter2}|\"</span>);\n\n    <span style=\"color: blue;\">if</span> ($Pos2 &gt;= $Pos1) {\n      $StartPos = $Pos1 + 1;\n      $EndPos = $Pos2 + $Length2;\n\n      $Length = $EndPos - $StartPos + 1;\n\n      $RangeStr = substr($ColumnsReference, $StartPos, $Length);\n\n      $ColumnRange = explode(<span style=\"color: #a31515;\">'|'</span>, $RangeStr);\n    }\n\n    <span style=\"color: blue;\">return</span> $ColumnRange;\n  }\n\n  <span style=\"color: green;\">//</span>\n  <span style=\"color: green;\">// Generate string that contains column letters for future reference.</span>\n  <span style=\"color: green;\">// initializeColumnsReference(1) = \"|A|B|C|...|X|Y|Z|\"</span>\n  <span style=\"color: green;\">// initializeColumnsReference(2) = \"|A|B|C|...|ZX|ZY|ZZ|\"</span>\n  <span style=\"color: green;\">// initializeColumnsReference(3) = \"|A|B|C|...|ZZX|ZZY|ZZZ|\"</span>\n  <span style=\"color: green;\">//</span>\n  <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">function</span> initializeColumnsReference($Width = 1)\n  {\n    $ColumnsStr = <span style=\"color: #a31515;\">''</span>;\n    $ColumnLetter = <span style=\"color: #a31515;\">''</span>;\n    $LastColumnLetter = str_repeat(<span style=\"color: #a31515;\">'Z'</span>, $Width);\n    $Tier = <span style=\"color: #a31515;\">''</span>;\n\n    <span style=\"color: blue;\">do</span> {\n      <span style=\"color: blue;\">for</span> ($ChrVal = 65; $ChrVal &lt;= 90; $ChrVal++) {\n        $ColumnLetter = $Tier . chr($ChrVal);\n        $ColumnsStr .= <span style=\"color: #a31515;\">\"|{$ColumnLetter}\"</span>;\n      }\n\n      <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">empty</span>($Tier)) {\n        $Tier = <span style=\"color: #a31515;\">'A'</span>;\n      } <span style=\"color: blue;\">else</span> {\n        $IsEndTier = false;\n        $IsFirst = true;\n        $ZCount = 0;\n        $NewTier = <span style=\"color: #a31515;\">''</span>;\n\n        <span style=\"color: blue;\">foreach</span> (array_reverse(str_split($Tier)) <span style=\"color: blue;\">as</span> $TierChr) {\n          <span style=\"color: blue;\">if</span> (($TierChr == <span style=\"color: #a31515;\">'Z'</span>) &amp;&amp; ($IsEndTier || $IsFirst)) {\n            $NewTierChr = <span style=\"color: #a31515;\">'A'</span>;\n          } <span style=\"color: blue;\">elseif</span> ($IsEndTier || $IsFirst) {\n            $NewTierChr = chr(ord($TierChr) + 1);\n          } <span style=\"color: blue;\">else</span> {\n            $NewTierChr = $TierChr;\n          }\n\n          $IsEndTier = ($TierChr == <span style=\"color: #a31515;\">'Z'</span>) ? true : false;\n          $ZCount += ($TierChr == <span style=\"color: #a31515;\">'Z'</span>) ? 1 : 0;\n\n          $NewTier = <span style=\"color: #a31515;\">\"{$NewTierChr}{$NewTier}\"</span>;\n          $IsFirst = false;\n        }\n\n        $Tier = $NewTier;\n        $Tier .= ($ZCount == strlen($Tier)) ?  <span style=\"color: #a31515;\">'A'</span> : <span style=\"color: #a31515;\">''</span>;\n      }\n    } <span style=\"color: blue;\">while</span> ($ColumnLetter != $LastColumnLetter);\n\n    $ColumnsStr .= <span style=\"color: #a31515;\">\"|\"</span>;\n\n    <span style=\"color: blue;\">return</span> $ColumnsStr;\n  }\n}\n</pre>\n</div>\n</p>\n<p>- Christopher Mullins</p>",
    "PostedDate": "2012-03-26T08:58:25.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "816108",
    "ThreadId": "349916",
    "Html": "<p>Hello <span class=\"UserProfileLink\">schir1964,</span></p>\n<p><span class=\"UserProfileLink\">Thanks for the response.&nbsp; I had a chance to implement your code however, I am getting an \"</span>Parse error: syntax error, unexpected T_PUBLIC\" for:</p>\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> getColumnRange($ColumnLetter1, $ColumnLetter2)</pre>\n<p>Does it need to be added to the function list?</p>",
    "PostedDate": "2012-03-27T07:35:14.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "816290",
    "ThreadId": "349916",
    "Html": "<p>Oops. Sorry about that. If you move these last two functions inside the class, you should be fine.</p>\n<p>The original example code had those two functions inside of a example read spreadsheet class that implemented the filter. But it should still work fine if you move the last two functions inside of the ReadFilter class.</p>\n<p>I've change my post above to correct this for you.</p>\n<p>- Christopher Mullins</p>",
    "PostedDate": "2012-03-27T16:18:45.813-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "816837",
    "ThreadId": "349916",
    "Html": "<p>Chris,</p>\r\n<p>Thanks again for the reply.&nbsp; However, your code seems a little overkill for what I need and plus I keep getting a blank page when using it.</p>\r\n<p>I have rewritten my code and successfully been able to pull just the columns I need and I also know I can read 500 rows without the server memory skyrocketing and killing the script.&nbsp; However, I am still having trouble adding the chunk method into my code.&nbsp; This is what I have and the script is still being killed even if I set the chunkSize at 250.</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>\t<span style=\"color: blue;\">class</span> MyReadFilter <span style=\"color: blue;\">implements</span> PHPExcel_Reader_IReadFilter\r\n\t{\r\n\t\t<span style=\"color: blue;\">private</span> $_startRow = 1;\r\n\t\t<span style=\"color: blue;\">private</span> $_endRow   = 22000;\r\n\t\t<span style=\"color: blue;\">private</span> $_columns  = <span style=\"color: blue;\">array</span>(<span style=\"color: #a31515;\">'C'</span>, <span style=\"color: #a31515;\">'D'</span>, <span style=\"color: #a31515;\">'I'</span>, <span style=\"color: #a31515;\">'J'</span>, <span style=\"color: #a31515;\">'K'</span>, <span style=\"color: #a31515;\">'T'</span>);\r\n\r\n\t\t<span style=\"color: green;\">/**  Get the list of rows and columns to read  */</span>\r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> __construct($startRow, $endRow, $columns) {\r\n\t\t\t$this-&gt;_startRow = $startRow;\r\n\t\t\t$this-&gt;_endRow   = $endRow;\r\n\t\t\t$this-&gt;_columns  = $columns;\r\n\t\t}\r\n\r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setRows($startRow, $chunkSize) {\r\n\t\t\t$this-&gt;_startRow = $startRow;\r\n\t\t\t$this-&gt;_endRow   = $startRow + $chunkSize;\r\n\t\t}\r\n\r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> readCell($column, $row, $worksheetName = <span style=\"color: #a31515;\">''</span>) {\r\n\t\t\t<span style=\"color: green;\">//  Only read the rows and columns that were configured</span>\r\n\t\t\t<span style=\"color: blue;\">if</span> (($row == 1) || ($row &gt;= $this-&gt;_startRow &amp;&amp; $row &lt; $this-&gt;_endRow)) {\r\n\t\t\t\t<span style=\"color: blue;\">if</span> (in_array($column,$this-&gt;_columns)) {\r\n\t\t\t\t\t<span style=\"color: blue;\">return</span> true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t<span style=\"color: blue;\">return</span> false;\r\n\t\t}\r\n\t}\r\n\r\n\t$filterSubset = <span style=\"color: blue;\">new</span> MyReadFilter(1,22000,<span style=\"color: blue;\">array</span>(<span style=\"color: #a31515;\">'C'</span>, <span style=\"color: #a31515;\">'D'</span>, <span style=\"color: #a31515;\">'I'</span>, <span style=\"color: #a31515;\">'J'</span>, <span style=\"color: #a31515;\">'K'</span>, <span style=\"color: #a31515;\">'T'</span>));\r\n\t$chunkSize = 250;\r\n\t<span style=\"color: blue;\">for</span> ($startRow = 2; $startRow &lt;= 65536; $startRow += $chunkSize) {\r\n\t\t$filterSubset-&gt;setRows($startRow,$chunkSize);\r\n\t\t$objReader = PHPExcel_IOFactory::createReader($inputFileType);\r\n\t\t$objReader-&gt;setReadFilter($filterSubset);\r\n\t\t$objReader-&gt;setReadDataOnly(true);\r\n\t\t$objPHPExcel = $objReader-&gt;load($inputFileName);\r\n\t}\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2012-03-28T15:19:18.59-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "817301",
    "ThreadId": "349916",
    "Html": "<p>You are creating your reader inside the loop.</p>\n<p>Try this:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre>$filterSubset = <span style=\"color: blue;\">new</span> MyReadFilter(1, 22000, <span style=\"color: blue;\">array</span>(<span style=\"color: #a31515;\">'C'</span>, <span style=\"color: #a31515;\">'D'</span>, <span style=\"color: #a31515;\">'I'</span>, <span style=\"color: #a31515;\">'J'</span>, <span style=\"color: #a31515;\">'K'</span>, <span style=\"color: #a31515;\">'T'</span>));\n\n$chunkSize = 250;\n\n$objReader = PHPExcel_IOFactory::createReader($inputFileType);\n$objReader-&gt;setReadFilter($filterSubset);\n$objReader-&gt;setReadDataOnly(false);\n\n<span style=\"color: blue;\">for</span> ($startRow = 2; $startRow &lt;= 65536; $startRow += $chunkSize) {\n  $filterSubset-&gt;setRows($startRow, $chunkSize);\n  $objPHPExcel = $objReader-&gt;load($inputFileName); <span style=\"color: green;\">// Rows are now accessible after this command.</span>\n\n  <span style=\"color: green;\">/*\n      Read cell data code goes here\n  */</span>\n}\n</pre>\n</div>",
    "PostedDate": "2012-03-29T10:53:02.217-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "817704",
    "ThreadId": "349916",
    "Html": "<p>Thanks again for your help Chris.&nbsp; However, I just cannot get the chunk to work no matter what.</p>\n<p>Just to recap for anyone browsing this, the following code will take an xls file and read only columns C, D, I, J, K, T and write it into a csv file.&nbsp; The only drawback (on my server anyway) is that is takes too much memory to read the entire file and the  most I could read is 500 rows without the server killing the script.&nbsp; If anyone else can take this code and add the chunk method and make it work, then my hat is off to you.</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">require_once</span> <span style=\"color: #a31515;\">'/Classes/PHPExcel.php'</span>;\n\t\nfn_echo(<span style=\"color: #a31515;\">'Create new PHPExcel object..&lt;br /&gt;'</span>);\n$objPHPExcel = <span style=\"color: blue;\">new</span> PHPExcel();\n\nfn_echo(<span style=\"color: #a31515;\">'Load temp.xls file..&lt;br /&gt;'</span>);\n$inputFileName = <span style=\"color: #a31515;\">'temp.xls'</span>;\n$inputFileType = PHPExcel_IOFactory::identify($inputFileName);\n\t\n<span style=\"color: blue;\">class</span> MyReadFilter <span style=\"color: blue;\">implements</span> PHPExcel_Reader_IReadFilter\n{\n\t<span style=\"color: blue;\">private</span> $_startRow = 1;\n\t<span style=\"color: blue;\">private</span> $_endRow   = 500;\n\t<span style=\"color: blue;\">private</span> $_columns  = <span style=\"color: blue;\">array</span>(<span style=\"color: #a31515;\">'C'</span>, <span style=\"color: #a31515;\">'D'</span>, <span style=\"color: #a31515;\">'I'</span>, <span style=\"color: #a31515;\">'J'</span>, <span style=\"color: #a31515;\">'K'</span>, <span style=\"color: #a31515;\">'T'</span>);\n\n\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> __construct($startRow, $endRow, $columns) {\n\t\t$this-&gt;_startRow = $startRow;\n\t\t$this-&gt;_endRow   = $endRow;\n\t\t$this-&gt;_columns  = $columns;\n\t}\n\n\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> readCell($column, $row, $worksheetName = <span style=\"color: #a31515;\">''</span>) {\n\t\t<span style=\"color: green;\">//  Only read the rows and columns that were configured</span>\n\t\t<span style=\"color: blue;\">if</span> ($row &gt;= $this-&gt;_startRow &amp;&amp; $row &lt;= $this-&gt;_endRow) {\n\t\t\t<span style=\"color: blue;\">if</span> (in_array($column,$this-&gt;_columns)) {\n\t\t\t\t<span style=\"color: blue;\">return</span> true;\n\t\t\t}\n\t\t}\n\t\t<span style=\"color: blue;\">return</span> false;\n\t}\n}\n\n$filterSubset = <span style=\"color: blue;\">new</span> MyReadFilter(1,500,<span style=\"color: blue;\">array</span>(<span style=\"color: #a31515;\">'C'</span>, <span style=\"color: #a31515;\">'D'</span>, <span style=\"color: #a31515;\">'I'</span>, <span style=\"color: #a31515;\">'J'</span>, <span style=\"color: #a31515;\">'K'</span>, <span style=\"color: #a31515;\">'T'</span>));\n$objReader = PHPExcel_IOFactory::createReader($inputFileType);\n$objReader-&gt;setReadFilter($filterSubset);\n$objReader-&gt;setReadDataOnly(true);\n$objPHPExcel = $objReader-&gt;load($inputFileName);\n\t\nfn_echo(<span style=\"color: #a31515;\">'Write to CSV format..&lt;br /&gt;'</span>);\n$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, <span style=\"color: #a31515;\">'CSV'</span>);\n$objWriter-&gt;save(str_replace(<span style=\"color: #a31515;\">'.php'</span>, <span style=\"color: #a31515;\">'.csv'</span>, _FILE_<span style=\"color: #a31515;\">&nbsp;</span>));\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>Sample output:</p>\n<p>&nbsp;</p>\n<pre>\"\",\"\",\"MfgNo\",\"Quantity\",\"\",\"\",\"\",\"\",\"Price\",\"MAP\",\"MSRP\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"MfgAbbv\"\n\"\",\"\",\"12841\",\"0\",\"\",\"\",\"\",\"\",\"372.22\",\"400\",\"440\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"AIMP\"\n\"\",\"\",\"81200\",\"4\",\"\",\"\",\"\",\"\",\"6.12\",\"0\",\"12.95\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"DT\"\n\"\",\"\",\"MPO II\",\"0\",\"\",\"\",\"\",\"\",\"844.6799999999999\",\"1069\",\"1125\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"EOTE\"\n\"\",\"\",\"2125KV\",\"2\",\"\",\"\",\"\",\"\",\"57.35\",\"0\",\"130\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"COLU\"\n\"\",\"\",\"75204BK\",\"6\",\"\",\"\",\"\",\"\",\"119.05\",\"0\",\"199.99\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"BLAC\"\n\"\",\"\",\"68000\",\"13\",\"\",\"\",\"\",\"\",\"199\",\"299.99\",\"374.99\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"LEUP\"\n\"\",\"\",\"12172\",\"12\",\"\",\"\",\"\",\"\",\"674.4\",\"774\",\"860\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"AIMP\"\n\"\",\"\",\"66740\",\"3\",\"\",\"\",\"\",\"\",\"976\",\"1239.99\",\"1549.99\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"LEUP\"\n\"\",\"\",\"59275\",\"5\",\"\",\"\",\"\",\"\",\"691\",\"799.99\",\"1039.99\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"LEUP\"\n\"\",\"\",\"59265\",\"1\",\"\",\"\",\"\",\"\",\"579\",\"699.99\",\"874.99\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"LEUP\"\n\"\",\"\",\"TA31RCO-M4CP\",\"0\",\"\",\"\",\"\",\"\",\"1234\",\"1398.25\",\"1645\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"TRIJ\"\n\"\",\"\",\"67870\",\"1\",\"\",\"\",\"\",\"\",\"875\",\"1049.99\",\"1314.99\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"LEUP\"\n\"\",\"\",\"66610\",\"2\",\"\",\"\",\"\",\"\",\"810\",\"1049.99\",\"1314.99\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"LEUP\"\n\"\",\"\",\"TA01\",\"1\",\"\",\"\",\"\",\"\",\"868\",\"983.45\",\"1157\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"TRIJ\"\n\"\",\"\",\"66600\",\"3\",\"\",\"\",\"\",\"\",\"754\",\"969.99\",\"1214.99\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"LEUP\"</pre>",
    "PostedDate": "2012-03-30T05:45:45.337-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "817835",
    "ThreadId": "349916",
    "Html": "<p>How much memory does your system have?</p>\r\n<p>- Christopher Mullins</p>",
    "PostedDate": "2012-03-30T09:48:46.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "817917",
    "ThreadId": "349916",
    "Html": "<p>I'm not sure but it really doesn't matter.&nbsp; The server is set up to kill a script which exceeds a certain limit.&nbsp;&nbsp; I am guessing that limit is somewhere around 512M since logs show the script using as much as 492M.</p>",
    "PostedDate": "2012-03-30T12:38:27.737-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "854935",
    "ThreadId": "349916",
    "Html": "<p>Hi,</p>\r\n<p>If you solved your problem, it can be helpful to me also.</p>\r\n<p>I have a 55Mb XLS file to load and the loading fails due to memory limit.</p>\r\n<p>I try to implement filtering but I have the feeling that it does even walk through the readCell method (writting debug information does'nt work or just returning false does'nt change the behaviour of my script)</p>\r\n<p>&nbsp;</p>\r\n<p>Regards,</p>\r\n<p>&nbsp;</p>\r\n<p>Olivier</p>",
    "PostedDate": "2012-06-28T05:00:39.51-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "855079",
    "ThreadId": "349916",
    "Html": "<p>@ogerault; If you are willing to risk sending me your file, I can run it through my configuration to see if I can reproduce the issue and offer a solution.</p>\r\n<p>&nbsp;</p>\r\n<p>- Christopher Mullins</p>",
    "PostedDate": "2012-06-28T09:07:13.773-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "858297",
    "ThreadId": "349916",
    "Html": "<p>Hello</p>\r\n<p><a class=\"UserProfileLink\" href=\"http://www.codeplex.com/site/users/view/TexasTrophy\">TexasTrophy</a>&nbsp;thanks for your code. I worked with that and come along following solution current project. I copy chunk of code from their. So you will get an idea.&nbsp;</p>\r\n<p>Some of the variable have not declared here(that values come from other forms ) but it will work fine if u define all&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>$dail_code= array();</p>\r\n<p>$destination= array();</p>\r\n<p>$rate=array();</p>\r\n<p>$e_date=array();</p>\r\n<p>class MyReadFilter implements PHPExcel_Reader_IReadFilter //come from IReadfilter.php<span> </span></p>\r\n<p><span>&nbsp;</span>{&nbsp;</p>\r\n<p>private $_columns &nbsp;= array('A', 'B', 'C', 'D');<span> </span><span> </span>public function __construct($s_row, $e_row, $columns)<span> </span>{&nbsp;</p>\r\n<p><span> </span>$this-&gt;_startRow = $s_row;&nbsp;<span> </span>$this-&gt;_endRow &nbsp; = $e_row;&nbsp;<span> </span>$this-&gt;_columns &nbsp;= $columns;&nbsp;</p>\r\n<p><span> </span>}&nbsp;<br /><span> </span>public function readCell($column, $row, $worksheetName = '')&nbsp;<span> </span>{</p>\r\n<p>if ($row &gt;= $this-&gt;_startRow &amp;&amp; $row &lt;= $this-&gt;_endRow)&nbsp; {&nbsp;</p>\r\n<p>if (in_array($column,$this-&gt;_columns))&nbsp;</p>\r\n<p>{&nbsp;<span> </span>return true;&nbsp;}&nbsp;</p>\r\n<p><span> </span>}&nbsp;<span> </span></p>\r\n<p>return false;</p>\r\n<p>&nbsp;<span> </span>}&nbsp;<br /><span> </span><span> </span>}// filter class end &nbsp;</p>\r\n<p>$filterSubset = new MyReadFilter($begin,$finish,array($_POST['dal_col'],$_POST['des_col'], $_POST['dat_col'],$_POST['rat_col']));</p>\r\n<p>$objReader = PHPExcel_IOFactory::createReader($inputFileType);</p>\r\n<p>$objPHPExcel = new PHPExcel();</p>\r\n<p>$objReader-&gt;setReadFilter($filterSubset);&nbsp;<br />$objPHPExcel = $objReader-&gt;load($target_path);</p>\r\n<p>$objWorksheet = $objPHPExcel-&gt;setActiveSheetIndex($_POST['sheet_dail']);</p>\r\n<p>foreach($objWorksheet-&gt;getRowIterator() as $row)&nbsp;<span> </span>{<span> </span> &nbsp;</p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;<span> </span>$cellIterator = $row-&gt;getCellIterator();<span> </span></p>\r\n<p>$cellIterator-&gt;setIterateOnlyExistingCells(true);</p>\r\n<p><span>&nbsp;</span>$track=1;<span> </span> &nbsp; foreach ($cellIterator as $cell)<span> </span>{<span> </span> &nbsp; $d=$cell-&gt;getCalculatedValue(); &nbsp;<br /><span> </span> &nbsp;if($track==1)&nbsp;<span> </span> &nbsp;{<span> </span> &nbsp;<span> </span>&nbsp;<span> </span> &nbsp;<span> </span>&nbsp;&nbsp;$dail_code[]=$d;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;elseif($track==2)&nbsp;  &nbsp;{  &nbsp;  &nbsp;$destination[]=$d;  &nbsp;  &nbsp;}</p>\r\n<p>&nbsp; &nbsp; elseif($track==3)&nbsp;  &nbsp;{   &nbsp; &nbsp;$rate[]=$d;  &nbsp;}</p>\r\n<p>&nbsp; &nbsp;elseif($track==4)&nbsp;  &nbsp;{   &nbsp; $e_date[]=$d;  &nbsp;  &nbsp;}  &nbsp;   &nbsp;</p>\r\n<p>&nbsp;$track++;</p>\r\n<p>&nbsp; &nbsp;}<span> </span> &nbsp;$v=$v+1;<br /><span>&nbsp;</span>}<span> </span></p>\r\n<p>&nbsp;for($j=0;$j&lt;count($rate);$j++)<span> </span> {<span> </span></p>\r\n<p>echo \" \".$dail_code[$j]. \" \".$destination[$j]. \" \".$rate[$j].\" \".$e_date[$j];<span> </span>&nbsp;</p>\r\n<p><span> </span> }</p>\r\n<p>Sincerely</p>\r\n<p>Arenna</p>",
    "PostedDate": "2012-07-06T04:49:05.843-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]