[
  {
    "Id": "828272",
    "ThreadId": "353489",
    "Html": "<p>I have been attempting to use the well documented technique for reading a spreadsheet in chunks and I am having a time of it.&nbsp; Clearly, I am missing something important in how to successfully implement this technique.&nbsp; Basically, what I want to do is</p>\n<ol>\n<li>Open the spreadsheet and load a chunk </li>\n<li>Read a chunk </li>\n<li>Process each row in the chunk by auditing specific cells in the chunk.&nbsp; As required, apply conditionals and insert notes </li>\n<li>At the end of each chunk processing:   \n<ul>\n<li>Save the spreadsheet file, </li>\n<li>disconnect the worksheets, </li>\n<li>unset $objPHPExcel after processing all the rows in the chunk </li>\n</ul>\n</li>\n<li>go back to 1 and repeat until done. </li>\n</ol>\n<p>Here is the code starting with the well documented for loop:&nbsp;</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">for</span> ($startRow = 2; $startRow &lt;= $highestRow; $startRow += $chunkSize) {    \n<span style=\"color: green;\">// SET CHUNK READER</span>\n    $chunkFilter-&gt;setRows($startRow,$chunkSize);<span style=\"color: green;\">/**  Tell the Read Filter the limits on which rows we want to read this iteration  **/</span>     \n    $objPHPExcel = $objReader-&gt;load($theDIRandFileName);<span style=\"color: green;\">/**  Load only the rows that match the chunkfilter  **/</span> \n<span style=\"color: blue;\">    echo</span> <span style=\"color: #a31515;\">'&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;reading chunk starting at row '</span>.$startRow.<span style=\"color: #a31515;\">'&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;'</span>;\n<span style=\"color: green;\">// For a specific $chunkSize of rows, initially starting in row 2, read each of the returned rows in the chunk and audit\t</span><span style=\"color: green;\">&nbsp;</span>\n    <span style=\"color: blue;\">foreach</span> ($objPHPExcel-&gt;getActiveSheet()-&gt;getRowIterator() <span style=\"color: blue;\">as</span> $aRow) { <span style=\"color: #00ff00;\"><span style=\"color: #008000;\">// I assume this is bounded by the chunkSize</span>\n\t<span style=\"color: #000000;\">$row = $aRow-&gt;getRowIndex(); </span></span>\n\t<span style=\"color: green;\">/* Audit the Business Name column*/</span>\n\t$getThis = <span style=\"color: #a31515;\">'B'</span>.$row;\n\t$thiscell = $objPHPExcel-&gt;getActiveSheet()-&gt;getCell($getThis)-&gt;getValue();\t\n\t<span style=\"color: blue;\">if</span>($thiscell == <span style=\"color: #a31515;\">''</span> || $thiscell == <span style=\"color: #a31515;\">' '</span>) {  <span style=\"color: green;\"></span>\n\t        $errCount += 1;                   <span style=\"color: green;\"></span>\n\t\t$rowFlag[$row] = false;          <span style=\"color: green;\"></span><span style=\"color: green;\">\t\t</span>\n\t\t$objPHPExcel-&gt;getActiveSheet()-&gt;getComment($getThis)-&gt;setAuthor($noteAuthor);\n\t\t$objPHPExcel-&gt;getActiveSheet()-&gt;getComment($getThis)-&gt;setWidth(<span style=\"color: #a31515;\">'200'</span>);\n\t\t$objPHPExcel-&gt;getActiveSheet()-&gt;getComment($getThis)-&gt;setHeight(<span style=\"color: #a31515;\">'150'</span>);\n\t\t$objCommentRichText = $objPHPExcel-&gt;getActiveSheet()-&gt;getComment($getThis)-&gt;getText()-&gt;createTextRun($noteAuthor);\n\t\t$objCommentRichText-&gt;getFont()-&gt;setBold(true);\n\t\t$objPHPExcel-&gt;getActiveSheet()-&gt;getComment($getThis)-&gt;getText()-&gt;createTextRun(<span style=\"color: #a31515;\">\"\\r\\n\"</span>);\n\t\t$objPHPExcel-&gt;getActiveSheet()-&gt;getComment($getThis)-&gt;getText()-&gt;createTextRun(<span style=\"color: #a31515;\">'Business Name cannot be blank.  Make sure the Quickbooks Business Name field on the Customer Additional Info tab has been selected.'</span>);\t\n\t\t<span style=\"color: green;\">// Now apply corresponding conditional to format the cell.  </span>\n\t\t$conditionalStyles = $objPHPExcel-&gt;getActiveSheet()-&gt;getStyle($getThis)-&gt;getConditionalStyles();\n\t\tarray_push($conditionalStyles, $objConditional5);\n\t\t$objPHPExcel-&gt;getActiveSheet()-&gt;getStyle($getThis)-&gt;setConditionalStyles($conditionalStyles);\n\t} <span style=\"color: #008000;\">// end of audit Business Name</span>\n\n\t<span style=\"color: green;\">/* lots more columns here.  They are all generally like the \"B\" column, above. */</span>\n\n\t<span style=\"color: blue;\">echo</span> <span style=\"color: #a31515;\">'inside foreach. chunkSize=['</span>.$chunkSize.<span style=\"color: #a31515;\">'] Row=['</span>.$row.<span style=\"color: #a31515;\">'] startrow=['</span>.$startRow.<span style=\"color: #a31515;\">'] and Business Name=['</span>.$thiscell.<span style=\"color: #a31515;\">']&lt;br&gt;'</span>;\t\n\n    } <span style=\"color: green;\">// End of for-loop for a specific chunk of rows</span>\n    <span style=\"color: blue;\">echo</span> <span style=\"color: #a31515;\">'End of Chunk. &lt;br&gt;'</span>; // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; This echo never fires.  Never gets out of the foreach loop.\t\n    $objWriter-&gt;save(str_replace(<span style=\"color: #a31515;\">'.php'</span>, <span style=\"color: #a31515;\">'.xls'</span>, $theDIRandFileName));  <span style=\"color: green;\">// write as a simple Excel file, not latest version</span>\n    $objPHPExcel-&gt;disconnectWorksheets(); \n    <span style=\"color: blue;\">unset</span>($objPHPExcel);\n} <span style=\"color: green;\">// End of Chunk Loop</span>.  \n\n</pre>\n</div>\n<p>My initial problem with the above is that the <strong>foreach </strong>loop is not bounded by the chunk size and goes forth and processes all the rows in the spreadsheet until it runs out of memory (evidence: the 'End of Chunk' never displays).&nbsp; Its like the chunksize makes no difference to the processing of the foreach loop.</p>\n<p>I have looked at this until my eyes went cross-eyed.&nbsp; Can't see it.&nbsp; What am I doing wrong?</p>",
    "PostedDate": "2012-04-25T02:35:06.85-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "829477",
    "ThreadId": "353489",
    "Html": "<p>Here's a sample of how I do this:</p>\n<p>Notice that I break out of the loop when the $RowId is greater than the $ChunkSize.</p>\n<p>I think this is the solution you are looking for.</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">for</span> ($StartRow = 1; $StartRow &lt;= $WorksheetInfo[<span style=\"color: #a31515;\">'totalRows'</span>]; $StartRow += $ChunkSize) {\n\n  $ReadFilter-&gt;setStartRow($StartRow);\n\n  $SpreadsheetObj = $SpreadsheetReaderObj-&gt;load($FileName);\n  $SpreadsheetObj-&gt;setActiveSheetIndex($WorksheetIndex);\n\n  $WorksheetObj = $SpreadsheetObj-&gt;getActiveSheet();\n\n  <span style=\"color: blue;\">foreach</span> ($WorksheetObj-&gt;getRowIterator() <span style=\"color: blue;\">as</span> $RowObj) {\n\n    $RowId = $RowObj-&gt;getRowIndex();\n\n    <span style=\"color: blue;\">if</span> ($RowId &gt; $ChunkSize) {\n      <span style=\"color: blue;\">break</span>;\n    }\n\n    $SheetRowId = $StartRow + $RowId - 1;\n\n    <span style=\"color: blue;\">if</span> ($SheetRowId &gt; $WorksheetInfo[<span style=\"color: #a31515;\">'totalRows'</span>]) {\n      <span style=\"color: blue;\">break</span>;\n    }\n\n    $RecordId = <span style=\"color: #a31515;\">\"{$WorksheetId}-{$SheetRowId}\"</span>;\n\n    $this-&gt;data[<span style=\"color: #a31515;\">\"{$RecordId}\"</span>] = <span style=\"color: blue;\">array</span>(); <span style=\"color: green;\">// array() represents column data.</span>\n  }\n}\n</pre>\n</div>",
    "PostedDate": "2012-04-27T11:01:58.6-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "829661",
    "ThreadId": "353489",
    "Html": "<p>Thanks for the code!</p>\n<p>But my ultimate problem was (is) <strong>memory</strong>.&nbsp; (bleh) This is what drove me to using the technique that Mark Baker has documented a bizzillion places, like this : http://phpexcel.codeplex.com/discussions/242712.&nbsp; Read a chunk, then process that  chunk, then free memory and go back to read chunks...</p>\n<p>In my quest for a solution I tried something like what you documented but had various problems.&nbsp; I actually have the chunk reader working now (code below), but now have a STINKY resultant problem:&nbsp; dealing with interim saves of the initially read file:&nbsp;  double-blehhhh.&nbsp;</p>\n<p>The code, below loops just fine and reads all the rows in the spreadsheet.&nbsp; (evidence is the echo statements display what is expected).</p>\n<p>My problem is (a) I need to save the applied conditionals and cell notes to the cells, and (b) it needs to be saved onto the server so when the used downloads the spreadsheet they have oodles of information that they can use to update the source data.&nbsp;</p>\n<p>My solution for the moment is after each chunk unset($objPHPExcel) and then immediately execute--</p>\n<p>&nbsp;&nbsp;&nbsp; $objPHPExcel &nbsp;&nbsp;&nbsp; = new PHPExcel();<br /> &nbsp;&nbsp;&nbsp; $inputFileType &nbsp;&nbsp; = PHPExcel_IOFactory::identify($theDIRandFileName);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br /> &nbsp;&nbsp;&nbsp; $objReader &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; = PHPExcel_IOFactory::createReader($inputFileType);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>to reestablish the read environment.&nbsp; Seems to do that OK, but here is the deal:</p>\n<p style=\"padding-left: 30px;\">Once completely done and all the annotated spreadsheet cells with colors and notes has been performed and saved to the server directory filename and directory (the cleverly named variable '$theDIRandFileName' in the code, below)  the saved file completely blank spreadsheet.&nbsp; Ohhh POOH.</p>\n<p style=\"padding-left: 30px;\">By the way:&nbsp; the annotations based upon conditionals and the application of cell notes works fine in the non-chunk-but-runs-out-of-memory-version.</p>\n<p><strong>Addendum 1 (30 April, 20 2012): I now seem to be in a catch 22</strong>.</p>\n<p>My ultimate goal is to read the spreadsheet, audit it, and then write the audited spreadsheet with colored cells indicating classes of problems and inserted cell notes explaining what the problem is(are).&nbsp; That part is working fine.&nbsp; Its just the memory problem.</p>\n<ul>\n<li><strong>If I read in chunks</strong>, then before moving onto the next chunk of cells I need to save the revised cell contents.&nbsp; But I can't do this because the chunk filter only makes available the rows specified for the chunk.</li>\n<li><strong>If I just do start-to-finish read/audit/apply conditionals</strong> to the spreadsheet rows in a for loop I run out of memory before I get to the last row.</li>\n<li><strong>If I use discISAM caching</strong>, it appears to work, memory wise, and I can read/audit/apply conditionals in one for loop (no chunks), <strong><span style=\"text-decoration: underline;\">BUT</span></strong> when I go to save the spreadsheet with all this neat stuff I get:</li>\n</ul>\n<p style=\"padding-left: 60px;\"><strong>Fatal error</strong>:  Allowed memory size of 18874368 bytes exhausted (tried to allocate 238592 bytes) in <strong>... /functions/utilities/PHPExcel/Shared/XMLWriter.php</strong> on line <strong>100</strong></p>\n<p style=\"padding-left: 60px;\">Basic and standard write at the end of the for loop:<strong><br /></strong></p>\n<div style=\"color: black; background-color: white;\">\n<pre style=\"padding-left: 60px;\">$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, <span style=\"color: #a31515;\">'Excel2007'</span>);<span style=\"color: green;\"><br /></span>$objWriter-&gt;save(str_replace(<span style=\"color: #a31515;\">'.php'</span>, <span style=\"color: #a31515;\">'.xlsx'</span>, $theDIRandFileName)); <span style=\"color: green;\">&nbsp;</span>\n</pre>\n</div>\n<p><strong> </strong></p>\n<div style=\"color: black; background-color: white;\"><strong> </strong></div>\n<p><strong> <br /></strong></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; left: -10000px; top: 490px; width: 1px; height: 1px; overflow: hidden;\">\n<pre><span style=\"color: green;\">// Determine the file type of the spreadsheet</span></pre>\n</div>",
    "PostedDate": "2012-04-28T06:14:01.713-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "830292",
    "ThreadId": "353489",
    "Html": "<p>Well I can't help you with the writer portion of the issue. Fortunately my projects only have to deal with reading in the data of various spreadsheet files.</p>\n<p>However, concerning the memory issue, I would read in all the data into a database table (a temporary one since you would need to create the structure based on the spreadsheet), and then close down the reader and then read back the data into the writer. Not sure  if that would help all that much, but that's all I can offer at this point.</p>\n<p>- Christopher Mullins</p>",
    "PostedDate": "2012-04-30T10:27:09.277-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]