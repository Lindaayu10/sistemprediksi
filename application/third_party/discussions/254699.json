[
  {
    "Id": "600558",
    "ThreadId": "254699",
    "Html": "\r\n<p>Listing of /tmp dir when script running:<br>\r\nlistinve@listinventory.com [/tmp]# ls&nbsp; -s -t P*.*<br>\r\n378730 PHPExcel.185814daf21facff063.26741214.cache<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; 0 PHPExcel.187544daf22ad31b524.80122883.cache<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; 0 PHPExcel.187544daf22d39c83b5.55911410.cache<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; 0 PHPExcel.187544daf22ab769029.92446900.cache<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; 0 PHPExcel.185814daf222a8d59f9.86390666.cache<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; 0 PHPExcel.185814daf221e33bc22.62313752.cache<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; 0 PHPExcel.185814daf21f9add224.16743158.cache<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\nlisting of /tmp dir after script finished execution:&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\nlistinve@listinventory.com [/tmp]# ls&nbsp; -s -t P*.*<br>\r\n0 PHPExcel.187544daf22ad31b524.80122883.cache&nbsp; <br>\r\n0 PHPExcel.187544daf22ab769029.92446900.cache<br>\r\n0 PHPExcel.187544daf22d39c83b5.55911410.cache<br>\r\n<br>\r\n<br>\r\nlisting of /tmp dir 5 min after script finishing<br>\r\nwith no other scripts running:<br>\r\nlistinve@listinventory.com [/tmp]# ls&nbsp; -s -t P*.*<br>\r\n0 PHPExcel.187544daf22ad31b524.80122883.cache&nbsp; <br>\r\n0 PHPExcel.187544daf22ab769029.92446900.cache<br>\r\n0 PHPExcel.187544daf22d39c83b5.55911410.cache</p>\r\n<p>Is there a way to tell what created each particular cache file and, if so, why it is not being removed after script execution?<br>\r\nAlso, when an exception occurs, like out of memory, why are the cache files not removed?<br>\r\nThis can cause havoc with mySQL and other things running on a system that depend on the /tmp directory space.</p>\r\n",
    "PostedDate": "2011-04-20T11:23:13.597-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "600573",
    "ThreadId": "254699",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>Mrbaseball34 wrote:</strong><br />\n<p>Is there a way to tell what created each particular cache file?</p>\n</blockquote>\n<p>Not without modifying the cache coding to actually report on this. Each worksheet instance of each workbook generates a unique ID whenever a script executes. This value is used as part of the filename, which is maintained internally (privately) in the cache controller.</p>\n<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>Mrbaseball34 wrote:</strong><br />\n<p>why it is not being removed after script execution?</p>\n</blockquote>\n<p>I have absolutely no idea whatsoever. The destructor code:</p>\n<div style=\"background-color: white; color: black;\">\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> __destruct() {\r\n   <span style=\"color: blue;\">if</span> (!is_null($this-&gt;_fileHandle)) {\r\n      <span style=\"color: blue;\">fclose</span>($this-&gt;_fileHandle);\r\n      unlink($this-&gt;_fileName);\r\n   }\r\n   $this-&gt;_fileHandle = null;\r\n} <span style=\"color: green;\">// function __destruct()</span>\r\n</pre>\n</div>\n<p>should <em>always </em>execute when the worksheets are unset, either by user code, or by PHP itself when the script terminates normally.&nbsp;</p>\n<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>Mrbaseball34 wrote:</strong><br />\n<p>Also, when an exception occurs, like out of memory, why are the cache files not removed?</p>\n</blockquote>\n<p>&nbsp;If a script terminates with an out of memory exception, then the code simply terminates execution, and destructors will not fire. There is no way of trapping for this within PHP itself: out of memory is a <strong>fatal </strong>error condition that terminates the script without allowing <em>any </em>shutdown code to run. In this case, PHP doesn't appear to execute destructor code, and has no way of deleting the cache files.</p>\n<p>&nbsp;</p>",
    "PostedDate": "2011-04-20T11:48:32.987-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "600592",
    "ThreadId": "254699",
    "Html": "<p>Well, I have proof that it doesn't <em>always</em> happen. The script executes and terminates</p>\n<p>this is called at the end of the script:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre>$objPHPExcel-&gt;disconnectWorksheets();\n<span style=\"color: blue;\">unset</span>($objPHPExcel);\n\n</pre>\n</div>\n<p>Or should I unset the worksheet objects, too?</p>\n<p>If I'm calling getActiveSheet(), why is there more than one cache file if the cache files are per worksheet?</p>\n<p>Is there a way to load only the first sheet and ignore the others?</p>\n<p>I still don't understand the chunk methodology that I read about in some other posts, could you explain it?</p>",
    "PostedDate": "2011-04-20T12:10:12.72-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "600641",
    "ThreadId": "254699",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>Mrbaseball34 wrote:</strong><br />\n<p>Well, I have proof that it doesn't <em>always</em> happen. The script executes and terminates</p>\n</blockquote>\n<p>OK! you have proof that it can happen, but that doesn't help identify the cause of the problem, or provide a solution. I've explained how PHP is supposed to work, firing the destructor for each worksheet object as it is flushed from memory, which should delete the cache file; and I've confirmed that an out of memory error will leave residual files, and explained why that is. I can't think of any other circumstances that will leave residual files on normal termination of PHP code.</p>\n<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>Mrbaseball34 wrote:</strong><br />\n<div style=\"background-color: white; color: black;\">\n<pre>$objPHPExcel-&gt;disconnectWorksheets();\r\n<span style=\"color: blue;\">unset</span>($objPHPExcel);\r\n</pre>\n<p>Or should I unset the worksheet objects, too?</p>\n</div>\n</blockquote>\n<p>Because the PHPExcel object contains references to each child worksheet, and each worksheet object contains a reference to the parent PHPExcel object, PHPExcel has cyclic references. Because of these cyclic references, using a straight unset() on either will not actually unset these objects... it's something that PHP has real problems with. The latest versions of PHP 5.3 do provide a mechanism to handle unsetting in this circumstance; but that is not available in PHP 5.2, so we provide the disconnectWorksheets() method to break the cyclic reference so that unsetting the workbook will unset it correctly, and unset all its worksheets as well (which should trigger the worksheet destructor to delete the cache files. On normal script termination, this should be unnecessary, as PHP should be able to do this itself, despite the cyclic references.</p>\n<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>Mrbaseball34 wrote:</strong><br />\n<p>If I'm calling getActiveSheet(), why is there more than one cache file if the cache files are per worksheet?</p>\n</blockquote>\n<p>&nbsp;getActiveSheet() simply identifies the sheet that you are currently working with. Unless you tell PHPExcel only to load selected worksheets, it will read <strong>all </strong>worksheets in the workbook, and each of those worksheets will have&nbsp;its own&nbsp;cache file. Using getActiveSheet() is simply identifying which of those worksheets you want to manipulate. It selects the currently active worksheet, and it's collection of cells.</p>\n<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>Mrbaseball34 wrote:</strong><br />\n<p>Is there a way to load only the first sheet and ignore the others?</p>\n</blockquote>\n<p>You can load a selected subset of worksheets by name, as described in section 4.2 of the User Documentation entitled \"<span style=\"font-size: 10pt;\" lang=\"EN-US\">Reading Only Named WorkSheets from a File</span>\". If you don't know the names of the worksheets, you can retrieve a list of these without reading the entire workbook as described in section 4.3 of the User Documentation entitled \"<span style=\"font-size: 10pt;\" lang=\"EN-US\">Reading the List of Worksheets from the Spreadsheet</span>\". To read the first worksheet, even without knowing its name:</p>\n<p><code><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">$inputFileType&nbsp;</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">=&nbsp;</span><span style=\"color: #dd0000; font-size: 10pt;\" lang=\"NL\">'Excel5'</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">;</span></code><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\"><br /></span><code><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">$inputFileName&nbsp;</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">=&nbsp;</span><span style=\"color: #dd0000; font-size: 10pt;\" lang=\"NL\">'./sampleData/example1.xls'</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">;</span></code><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\"><br /><br /></span><code><span style=\"color: #ff8000; font-size: 10pt;\" lang=\"NL\">/**&nbsp;&nbsp;Create&nbsp;a&nbsp;new&nbsp;Reader&nbsp;of&nbsp;the&nbsp;type&nbsp;defined&nbsp;in&nbsp;$inputFileType&nbsp;&nbsp;**/</span></code><span style=\"color: #ff8000; font-size: 10pt;\" lang=\"NL\"><br /></span><code><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">$objReader&nbsp;</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">=&nbsp;</span><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">PHPExcel_IOFactory</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">::</span><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">createReader</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">(</span><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">$inputFileType</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">);</span></code><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\"><br /></span><code><span style=\"color: #ff8000; font-size: 10pt;\" lang=\"NL\">/**&nbsp;&nbsp;Read the list of Worksheet Names from the Workbook file&nbsp;&nbsp;**/</span></code><span style=\"color: #ff8000; font-size: 10pt;\" lang=\"NL\"><br /></span><code><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">$worksheetNames&nbsp;</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">=&nbsp;</span><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">$objReader</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">-&gt;</span><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">listWorksheetNames</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">(</span><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">$inputFileName</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">);</span></code></p>\n<p><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\"><code><span style=\"color: #ff8000; font-size: 10pt;\" lang=\"NL\">/**&nbsp;&nbsp;Advise&nbsp;the&nbsp;Reader&nbsp;of&nbsp;which&nbsp;WorkSheets&nbsp;we&nbsp;want&nbsp;to&nbsp;load&nbsp;&nbsp;**/ </span></code><span style=\"color: #ff8000; font-size: 10pt;\" lang=\"NL\"><br /></span><code><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">$objReader</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">-&gt;</span><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">setLoadSheetsOnly</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">(</span><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\"><code><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">$worksheetNames[0]</span></code></span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">); </span></code><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\"><br /></span><code><span style=\"color: #ff8000; font-size: 10pt;\" lang=\"NL\">/**&nbsp;&nbsp;Load&nbsp;$inputFileName&nbsp;to&nbsp;a&nbsp;PHPExcel&nbsp;Object&nbsp;&nbsp;**/ </span></code><span style=\"color: #ff8000; font-size: 10pt;\" lang=\"NL\"><br /><code><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">$objPHPExcel&nbsp;</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">=&nbsp;</span><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">$objReader</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">-&gt;</span><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">load</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">(</span><span style=\"color: #0000bb; font-size: 10pt;\" lang=\"NL\">$inputFileName</span><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\">); </span></code><span style=\"color: #007700; font-size: 10pt;\" lang=\"NL\"><br /><br /></span></span></span></p>\n<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>Mrbaseball34 wrote:</strong><br />\n<p>I still don't understand the chunk methodology that I read about in some other posts, could you explain it?</p>\n</blockquote>\n<p>Chunking works by using a Read Filter to tell the Reader which cells to actually read. The loader will then read only those cells which match the readCell() rule defined in the Read Filter, ignoring all other cells. So, if you have a worksheet with values in the range A1:IV65535, but use a read filter that tells PHPExcel to load only cells A1:B2, then only the four cells in that range will be loaded when you execute the load()method. Instead of needing over 16GB of memory (assuming no caching) to load every cell, that worksheet will only need about 4kB to load just 4 cells.</p>\n<p>Section 4.4 of the User Documentation entitled \"<span style=\"font-size: 10pt;\" lang=\"EN-US\">Reading Only Specific Columns and Rows from a File (Read Filters)</span>\" describes this process in more detail.</p>",
    "PostedDate": "2011-04-20T13:24:21.917-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]