[
  {
    "Id": "622110",
    "ThreadId": "259971",
    "Html": "<p>I've added the method listWorksheetInfo to the readers (for my own use) that returns the array:<br /> <br /> array[&lt;Sheet Index&gt;]['worksheetName']<br /> <br /> array[&lt;Sheet Index&gt;]['lastColumnLetter']<br /> <br /> array[&lt;Sheet Index&gt;]['lastColumnIndex']<br /> <br /> array[&lt;Sheet Index&gt;]['totalRows']</p>\n<p>array[&lt;Sheet Index&gt;]['totalColumns']<br /> <br /> PHP Version: 5.2.x / PHPExcel Version: 1.7.6 / Windows XP &amp; Debian</p>\n<p>This methods gives me the following:</p>\n<ul>\n<li>Number of worksheets (count(array)) </li>\n<li>Worksheet Index </li>\n<li>Worksheet Name </li>\n<li>Last Column Letter </li>\n<li>Last Column Index </li>\n<li>Total Rows </li>\n<li>Total Columns </li>\n</ul>\n<p>All this information is returned without actually loading the spreadsheet into memory.</p>\n<p>(<strong><em>Note: I created the listWorksheetInfo method by what I could glean from the existing code so there could be a better method to do the same thing</em></strong>)<br /> <br /> This allows me to write my read filter code as efficiently as possible.</p>\n<p>Customization code (use at your own risk):</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// Reader CSV.php custom method listWorksheetInfo()</span>\n<span style=\"color: green;\">//</span>\n\n<span style=\"color: green;\">/**\n * Return worksheet info (Name, Last Column Letter, Last Column Index, Total Rows, Total Columns)\n *\n * @param   string     $pFilename\n * @throws   Exception\n */</span>\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> listWorksheetInfo($pFilename)\n{\n  <span style=\"color: green;\">// Check if file exists</span>\n  <span style=\"color: blue;\">if</span> (!file_exists($pFilename)) {\n    <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> Exception(<span style=\"color: #a31515;\">\"Could not open \"</span> . $pFilename . <span style=\"color: #a31515;\">\" for reading! File does not exist.\"</span>);\n  }\n\n  <span style=\"color: green;\">// Open file</span>\n  $fileHandle = fopen($pFilename, <span style=\"color: #a31515;\">'r'</span>);\n  <span style=\"color: blue;\">if</span> ($fileHandle === false) {\n    <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> Exception(<span style=\"color: #a31515;\">\"Could not open file \"</span> . $pFilename . <span style=\"color: #a31515;\">\" for reading.\"</span>);\n  }\n\n  <span style=\"color: green;\">// Skip BOM, if any</span>\n  <span style=\"color: blue;\">switch</span> ($this-&gt;_inputEncoding) {\n    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'UTF-8'</span>:\n      fgets($fileHandle, 4) == <span style=\"color: #a31515;\">\"\\xEF\\xBB\\xBF\"</span> ?\n        fseek($fileHandle, 3) : fseek($fileHandle, 0);\n      <span style=\"color: blue;\">break</span>;\n    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'UTF-16LE'</span>:\n      fgets($fileHandle, 3) == <span style=\"color: #a31515;\">\"\\xFF\\xFE\"</span> ?\n        fseek($fileHandle, 2) : fseek($fileHandle, 0);\n      <span style=\"color: blue;\">break</span>;\n    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'UTF-16BE'</span>:\n      fgets($fileHandle, 3) == <span style=\"color: #a31515;\">\"\\xFE\\xFF\"</span> ?\n        fseek($fileHandle, 2) : fseek($fileHandle, 0);\n      <span style=\"color: blue;\">break</span>;\n    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'UTF-32LE'</span>:\n      fgets($fileHandle, 5) == <span style=\"color: #a31515;\">\"\\xFF\\xFE\\x00\\x00\"</span> ?\n        fseek($fileHandle, 4) : fseek($fileHandle, 0);\n      <span style=\"color: blue;\">break</span>;\n    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'UTF-32BE'</span>:\n      fgets($fileHandle, 5) == <span style=\"color: #a31515;\">\"\\x00\\x00\\xFE\\xFF\"</span> ?\n        fseek($fileHandle, 4) : fseek($fileHandle, 0);\n      <span style=\"color: blue;\">break</span>;\n    <span style=\"color: blue;\">default</span>:\n      <span style=\"color: blue;\">break</span>;\n  }\n\n  $escapeEnclosures = <span style=\"color: blue;\">array</span>( \"\\\\\" . $this-&gt;_enclosure, $this-&gt;_enclosure . $this-&gt;_enclosure );\n\n  $worksheetInfo = <span style=\"color: blue;\">array</span>();\n  $worksheetInfo[0][<span style=\"color: #a31515;\">'worksheetName'</span>] = <span style=\"color: #a31515;\">'Worksheet'</span>;\n  $worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = <span style=\"color: #a31515;\">'A'</span>;\n  $worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = 0;\n  $worksheetInfo[0][<span style=\"color: #a31515;\">'totalRows'</span>] = 0;\n  $worksheetInfo[0][<span style=\"color: #a31515;\">'totalColumns'</span>] = 0;\n\n  <span style=\"color: green;\">// Loop through each line of the file in turn</span>\n  <span style=\"color: blue;\">while</span> (($rowData = fgetcsv($fileHandle, 0, $this-&gt;_delimiter, $this-&gt;_enclosure)) !== FALSE) {\n    $worksheetInfo[0][<span style=\"color: #a31515;\">'totalRows'</span>]++;\n    $worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = max($worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnIndex'</span>], count($rowData) - 1);\n  }\n\n  $worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = PHPExcel_Cell::stringFromColumnIndex($worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnIndex'</span>]);\n  $worksheetInfo[0][<span style=\"color: #a31515;\">'totalColumns'</span>] = $worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnIndex'</span>] + 1;\n\n  <span style=\"color: green;\">// Close file</span>\n  <span style=\"color: blue;\">fclose</span>($fileHandle);\n\n  <span style=\"color: blue;\">return</span> $worksheetInfo;\n}\n\n<span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// Reader Excel5.php custom method listWorksheetInfo()</span>\n<span style=\"color: green;\">//</span>\n\n<span style=\"color: green;\">/**\n * Return worksheet info (Name, Last Column Letter, Last Column Index, Total Rows, Total Columns)\n *\n * @param   string     $pFilename\n * @throws   Exception\n */</span>\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> listWorksheetInfo($pFilename)\n{\n  <span style=\"color: green;\">// Check if file exists</span>\n  <span style=\"color: blue;\">if</span> (!file_exists($pFilename)) {\n    <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> Exception(<span style=\"color: #a31515;\">\"Could not open \"</span> . $pFilename . <span style=\"color: #a31515;\">\" for reading! File does not exist.\"</span>);\n  }\n\n  $worksheetInfo = <span style=\"color: blue;\">array</span>();\n\n  <span style=\"color: green;\">// Read the OLE file</span>\n  $this-&gt;_loadOLE($pFilename);\n\n  <span style=\"color: green;\">// total byte size of Excel data (workbook global substream + sheet substreams)</span>\n  $this-&gt;_dataSize = strlen($this-&gt;_data);\n\n  <span style=\"color: green;\">// initialize</span>\n  $this-&gt;_pos            = 0;\n  $this-&gt;_sheets        = <span style=\"color: blue;\">array</span>();\n\n  <span style=\"color: green;\">// Parse Workbook Global Substream</span>\n  <span style=\"color: blue;\">while</span> ($this-&gt;_pos &lt; $this-&gt;_dataSize) {\n    $code = self::_GetInt2d($this-&gt;_data, $this-&gt;_pos);\n\n    <span style=\"color: blue;\">switch</span> ($code) {\n      <span style=\"color: blue;\">case</span> self::XLS_Type_BOF:        $this-&gt;_readBof();        <span style=\"color: blue;\">break</span>;\n      <span style=\"color: blue;\">case</span> self::XLS_Type_SHEET:      $this-&gt;_readSheet();      <span style=\"color: blue;\">break</span>;\n      <span style=\"color: blue;\">case</span> self::XLS_Type_EOF:        $this-&gt;_readDefault();    <span style=\"color: blue;\">break</span> 2;\n      <span style=\"color: blue;\">default</span>:                        $this-&gt;_readDefault();    <span style=\"color: blue;\">break</span>;\n    }\n  }\n\n  <span style=\"color: green;\">// Parse the individual sheets</span>\n  <span style=\"color: blue;\">foreach</span> ($this-&gt;_sheets <span style=\"color: blue;\">as</span> $sheet) {\n\n    <span style=\"color: blue;\">if</span> ($sheet[<span style=\"color: #a31515;\">'sheetType'</span>] != 0x00) {\n      <span style=\"color: green;\">// 0x00: Worksheet</span>\n      <span style=\"color: green;\">// 0x02: Chart</span>\n      <span style=\"color: green;\">// 0x06: Visual Basic module</span>\n      <span style=\"color: blue;\">continue</span>;\n    }\n\n    $tmpInfo = <span style=\"color: blue;\">array</span>();\n    $tmpInfo[<span style=\"color: #a31515;\">'worksheetName'</span>] = $sheet[<span style=\"color: #a31515;\">'name'</span>];\n    $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = <span style=\"color: #a31515;\">'A'</span>;\n    $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = 0;\n    $tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>] = 0;\n    $tmpInfo[<span style=\"color: #a31515;\">'totalColumns'</span>] = 0;\n\n    $this-&gt;_pos = $sheet[<span style=\"color: #a31515;\">'offset'</span>];\n\n    <span style=\"color: blue;\">while</span> ($this-&gt;_pos &lt;= $this-&gt;_dataSize - 4) {\n      $code = self::_GetInt2d($this-&gt;_data, $this-&gt;_pos);\n\n      <span style=\"color: blue;\">switch</span> ($code) {\n        <span style=\"color: blue;\">case</span> self::XLS_Type_RK:\n        <span style=\"color: blue;\">case</span> self::XLS_Type_LABELSST:\n        <span style=\"color: blue;\">case</span> self::XLS_Type_NUMBER:\n        <span style=\"color: blue;\">case</span> self::XLS_Type_FORMULA:\n        <span style=\"color: blue;\">case</span> self::XLS_Type_BOOLERR:\n        <span style=\"color: blue;\">case</span> self::XLS_Type_LABEL:\n          $length = self::_GetInt2d($this-&gt;_data, $this-&gt;_pos + 2);\n          $recordData = substr($this-&gt;_data, $this-&gt;_pos + 4, $length);\n\n          <span style=\"color: green;\">// move stream pointer to next record</span>\n          $this-&gt;_pos += 4 + $length;\n\n          $rowIndex = self::_GetInt2d($recordData, 0) + 1;\n          $columnIndex = self::_GetInt2d($recordData, 2);\n\n          $tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>] = max($tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>], $rowIndex);\n          $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = max($tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>], $columnIndex);\n          <span style=\"color: blue;\">break</span>;\n        <span style=\"color: blue;\">case</span> self::XLS_Type_BOF:      $this-&gt;_readBof();          <span style=\"color: blue;\">break</span>;\n        <span style=\"color: blue;\">case</span> self::XLS_Type_EOF:      $this-&gt;_readDefault();      <span style=\"color: blue;\">break</span> 2;\n        <span style=\"color: blue;\">default</span>:                      $this-&gt;_readDefault();      <span style=\"color: blue;\">break</span>;\n      }\n    }\n\n    $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = PHPExcel_Cell::stringFromColumnIndex($tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>]);\n    $tmpInfo[<span style=\"color: #a31515;\">'totalColumns'</span>] = $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] + 1;\n\n    $worksheetInfo[] = $tmpInfo;\n  }\n\n  <span style=\"color: blue;\">return</span> $worksheetInfo;\n}\n\n<span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// Reader Excel2003XML.php custom method listWorksheetInfo()</span>\n<span style=\"color: green;\">//</span>\n\n<span style=\"color: green;\">/**\n * Return worksheet info (Name, Last Column Letter, Last Column Index, Total Rows, Total Columns)\n *\n * @param   string     $pFilename\n * @throws   Exception\n */</span>\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> listWorksheetInfo($pFilename)\n{\n  <span style=\"color: green;\">// Check if file exists</span>\n  <span style=\"color: blue;\">if</span> (!file_exists($pFilename)) {\n    <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> Exception(<span style=\"color: #a31515;\">\"Could not open \"</span> . $pFilename . <span style=\"color: #a31515;\">\" for reading! File does not exist.\"</span>);\n  }\n\n  $worksheetInfo = <span style=\"color: blue;\">array</span>();\n\n  $xml = simplexml_load_file($pFilename);\n  $namespaces = $xml-&gt;getNamespaces(true);\n\n  $worksheetID = 1;\n  $xml_ss = $xml-&gt;children($namespaces[<span style=\"color: #a31515;\">'ss'</span>]);\n  <span style=\"color: blue;\">foreach</span>($xml_ss-&gt;Worksheet <span style=\"color: blue;\">as</span> $worksheet) {\n    $worksheet_ss = $worksheet-&gt;attributes($namespaces[<span style=\"color: #a31515;\">'ss'</span>]);\n\n    $tmpInfo = <span style=\"color: blue;\">array</span>();\n    $tmpInfo[<span style=\"color: #a31515;\">'worksheetName'</span>] = <span style=\"color: #a31515;\">''</span>;\n    $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = <span style=\"color: #a31515;\">'A'</span>;\n    $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = 0;\n    $tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>] = 0;\n    $tmpInfo[<span style=\"color: #a31515;\">'totalColumns'</span>] = 0;\n\n    <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">isset</span>($worksheet_ss[<span style=\"color: #a31515;\">'Name'</span>])) {\n      $tmpInfo[<span style=\"color: #a31515;\">'worksheetName'</span>] = (string) $worksheet_ss[<span style=\"color: #a31515;\">'Name'</span>];\n    } <span style=\"color: blue;\">else</span> {\n      $tmpInfo[<span style=\"color: #a31515;\">'worksheetName'</span>] = <span style=\"color: #a31515;\">\"Worksheet_{$worksheetID}\"</span>;\n    }\n\n    <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">isset</span>($worksheet-&gt;Table-&gt;Row)) {\n      $rowIndex = 0;\n\n      <span style=\"color: blue;\">foreach</span>($worksheet-&gt;Table-&gt;Row <span style=\"color: blue;\">as</span> $rowData) {\n        $columnIndex = 0;\n        $rowHasData = false;\n\n        <span style=\"color: blue;\">foreach</span>($rowData-&gt;Cell <span style=\"color: blue;\">as</span> $cell) {\n          <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">isset</span>($cell-&gt;Data)) {\n            $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = max($tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>], $columnIndex);\n            $rowHasData = true;\n          }\n\n          ++$columnIndex;\n        }\n\n        ++$rowIndex;\n\n        <span style=\"color: blue;\">if</span> ($rowHasData) {\n          $tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>] = max($tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>], $rowIndex);\n        }\n      }\n    }\n\n    $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = PHPExcel_Cell::stringFromColumnIndex($tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>]);\n    $tmpInfo[<span style=\"color: #a31515;\">'totalColumns'</span>] = $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] + 1;\n\n    $worksheetInfo[] = $tmpInfo;\n    ++$worksheetID;\n  }\n\n  <span style=\"color: blue;\">return</span> $worksheetInfo;\n}\n\n<span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// Reader Excel2007.php custom method listWorksheetInfo()</span>\n<span style=\"color: green;\">//</span>\n\n<span style=\"color: green;\">/**\n * Return worksheet info (Name, Last Column Letter, Last Column Index, Total Rows, Total Columns)\n *\n * @param   string     $pFilename\n * @throws   Exception\n */</span>\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> listWorksheetInfo($pFilename)\n{\n  <span style=\"color: green;\">// Check if file exists</span>\n  <span style=\"color: blue;\">if</span> (!file_exists($pFilename)) {\n    <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> Exception(<span style=\"color: #a31515;\">\"Could not open \"</span> . $pFilename . <span style=\"color: #a31515;\">\" for reading! File does not exist.\"</span>);\n  }\n\n  $worksheetInfo = <span style=\"color: blue;\">array</span>();\n\n  $zip = <span style=\"color: blue;\">new</span> ZipArchive;\n  $zip-&gt;open($pFilename);\n\n  $rels = simplexml_load_string($this-&gt;_getFromZipArchive($zip, <span style=\"color: #a31515;\">\"_rels/.rels\"</span>)); <span style=\"color: green;\">//~ http://schemas.openxmlformats.org/package/2006/relationships\");</span>\n  <span style=\"color: blue;\">foreach</span> ($rels-&gt;Relationship <span style=\"color: blue;\">as</span> $rel) {\n    <span style=\"color: blue;\">if</span> ($rel[<span style=\"color: #a31515;\">\"Type\"</span>] == <span style=\"color: #a31515;\">\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\"</span>) {\n      $dir = dirname($rel[<span style=\"color: #a31515;\">\"Target\"</span>]);\n      $relsWorkbook = simplexml_load_string($this-&gt;_getFromZipArchive($zip, <span style=\"color: #a31515;\">\"$dir/_rels/\"</span> . basename($rel[<span style=\"color: #a31515;\">\"Target\"</span>]) . <span style=\"color: #a31515;\">\".rels\"</span>));  <span style=\"color: green;\">//~ http://schemas.openxmlformats.org/package/2006/relationships\");</span>\n      $relsWorkbook-&gt;registerXPathNamespace(<span style=\"color: #a31515;\">\"rel\"</span>, <span style=\"color: #a31515;\">\"http://schemas.openxmlformats.org/package/2006/relationships\"</span>);\n\n      $worksheets = <span style=\"color: blue;\">array</span>();\n      <span style=\"color: blue;\">foreach</span> ($relsWorkbook-&gt;Relationship <span style=\"color: blue;\">as</span> $ele) {\n        <span style=\"color: blue;\">if</span> ($ele[<span style=\"color: #a31515;\">\"Type\"</span>] == <span style=\"color: #a31515;\">\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\"</span>) {\n          $worksheets[(string) $ele[<span style=\"color: #a31515;\">\"Id\"</span>]] = $ele[<span style=\"color: #a31515;\">\"Target\"</span>];\n        }\n      }\n\n      $xmlWorkbook = simplexml_load_string($this-&gt;_getFromZipArchive($zip, <span style=\"color: #a31515;\">\"{$rel['Target']}\"</span>));  <span style=\"color: green;\">//~ http://schemas.openxmlformats.org/spreadsheetml/2006/main\");</span>\n      <span style=\"color: blue;\">if</span> ($xmlWorkbook-&gt;sheets) {\n        $dir = dirname($rel[<span style=\"color: #a31515;\">\"Target\"</span>]);\n        <span style=\"color: blue;\">foreach</span> ($xmlWorkbook-&gt;sheets-&gt;sheet <span style=\"color: blue;\">as</span> $eleSheet) {\n          $tmpInfo = <span style=\"color: blue;\">array</span>();\n          $tmpInfo[<span style=\"color: #a31515;\">'worksheetName'</span>] = (string) $eleSheet[<span style=\"color: #a31515;\">\"name\"</span>];\n          $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = <span style=\"color: #a31515;\">'A'</span>;\n          $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = 0;\n          $tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>] = 0;\n          $tmpInfo[<span style=\"color: #a31515;\">'totalColumns'</span>] = 0;\n\n          $fileWorksheet = $worksheets[(string) self::array_item($eleSheet-&gt;attributes(<span style=\"color: #a31515;\">\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"</span>), <span style=\"color: #a31515;\">\"id\"</span>)];\n          $xmlSheet = simplexml_load_string($this-&gt;_getFromZipArchive($zip, <span style=\"color: #a31515;\">\"$dir/$fileWorksheet\"</span>));  <span style=\"color: green;\">//~ http://schemas.openxmlformats.org/spreadsheetml/2006/main\");</span>\n          <span style=\"color: blue;\">if</span> ($xmlSheet &amp;&amp; $xmlSheet-&gt;sheetData &amp;&amp; $xmlSheet-&gt;sheetData-&gt;row) {\n            <span style=\"color: blue;\">foreach</span> ($xmlSheet-&gt;sheetData-&gt;row <span style=\"color: blue;\">as</span> $row) {\n              <span style=\"color: blue;\">foreach</span> ($row-&gt;c <span style=\"color: blue;\">as</span> $c) {\n                $r = (string) $c[<span style=\"color: #a31515;\">\"r\"</span>];\n                $coordinates = PHPExcel_Cell::coordinateFromString($r);\n\n                $rowIndex = $coordinates[1];\n                $columnIndex = PHPExcel_Cell::columnIndexFromString($coordinates[0]) - 1;\n\n                $tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>] = max($tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>], $rowIndex);\n                $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = max($tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>], $columnIndex);\n              }\n            }\n          }\n\n          $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = PHPExcel_Cell::stringFromColumnIndex($tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>]);\n          $tmpInfo[<span style=\"color: #a31515;\">'totalColumns'</span>] = $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] + 1;\n\n          $worksheetInfo[] = $tmpInfo;\n        }\n      }\n    }\n  }\n\n  $zip-&gt;close();\n\n  <span style=\"color: blue;\">return</span> $worksheetInfo;\n}\n\n<span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// Reader Gnumeric.php custom method listWorksheetInfo()</span>\n<span style=\"color: green;\">//</span>\n\n<span style=\"color: green;\">/**\n * Return worksheet info (Name, Last Column Letter, Last Column Index, Total Rows, Total Columns)\n *\n * @param   string     $pFilename\n * @throws   Exception\n */</span>\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> listWorksheetInfo($pFilename)\n{\n  <span style=\"color: green;\">// Check if file exists</span>\n  <span style=\"color: blue;\">if</span> (!file_exists($pFilename)) {\n    <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> Exception(<span style=\"color: #a31515;\">\"Could not open \"</span> . $pFilename . <span style=\"color: #a31515;\">\" for reading! File does not exist.\"</span>);\n  }\n\n  $gFileData = $this-&gt;_gzfileGetContents($pFilename);\n\n  $xml = simplexml_load_string($gFileData);\n  $namespacesMeta = $xml-&gt;getNamespaces(true);\n\n  $gnmXML = $xml-&gt;children($namespacesMeta[<span style=\"color: #a31515;\">'gnm'</span>]);\n\n  $worksheetInfo = <span style=\"color: blue;\">array</span>();\n\n  <span style=\"color: blue;\">foreach</span> ($gnmXML-&gt;Sheets-&gt;Sheet <span style=\"color: blue;\">as</span> $sheet) {\n    $tmpInfo = <span style=\"color: blue;\">array</span>();\n    $tmpInfo[<span style=\"color: #a31515;\">'worksheetName'</span>] = (string) $sheet-&gt;Name;\n    $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = <span style=\"color: #a31515;\">'A'</span>;\n    $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = 0;\n    $tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>] = 0;\n    $tmpInfo[<span style=\"color: #a31515;\">'totalColumns'</span>] = 0;\n\n    <span style=\"color: blue;\">foreach</span> ($sheet-&gt;Cells-&gt;Cell <span style=\"color: blue;\">as</span> $cell) {\n      $cellAttributes = $cell-&gt;attributes();\n\n      $rowIndex = (int) $cellAttributes-&gt;Row + 1;\n      $columnIndex = (int) $cellAttributes-&gt;Col;\n\n      $tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>] = max($tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>], $rowIndex);\n      $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = max($tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>], $columnIndex);\n    }\n\n    $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = PHPExcel_Cell::stringFromColumnIndex($tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>]);\n    $tmpInfo[<span style=\"color: #a31515;\">'totalColumns'</span>] = $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] + 1;\n\n    $worksheetInfo[] = $tmpInfo;\n  }\n\n  <span style=\"color: blue;\">return</span> $worksheetInfo;\n}\n\n<span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// Reader OOCalc.php custom method listWorksheetInfo()</span>\n<span style=\"color: green;\">//</span>\n\n<span style=\"color: green;\">/**\n * Return worksheet info (Name, Last Column Letter, Last Column Index, Total Rows, Total Columns)\n *\n * @param   string     $pFilename\n * @throws   Exception\n */</span>\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> listWorksheetInfo($pFilename)\n{\n  <span style=\"color: green;\">// Check if file exists</span>\n  <span style=\"color: blue;\">if</span> (!file_exists($pFilename)) {\n    <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> Exception(<span style=\"color: #a31515;\">\"Could not open \"</span> . $pFilename . <span style=\"color: #a31515;\">\" for reading! File does not exist.\"</span>);\n  }\n\n  $worksheetInfo = <span style=\"color: blue;\">array</span>();\n\n  $zip = <span style=\"color: blue;\">new</span> ZipArchive;\n  <span style=\"color: blue;\">if</span> ($zip-&gt;open($pFilename) === true) {\n\n    $xml = simplexml_load_string($zip-&gt;getFromName(<span style=\"color: #a31515;\">\"content.xml\"</span>));\n    $namespacesContent = $xml-&gt;getNamespaces(true);\n\n    $workbook = $xml-&gt;children($namespacesContent[<span style=\"color: #a31515;\">'office'</span>]);\n    <span style=\"color: blue;\">foreach</span>($workbook-&gt;body-&gt;spreadsheet <span style=\"color: blue;\">as</span> $workbookData) {\n      $workbookData = $workbookData-&gt;children($namespacesContent[<span style=\"color: #a31515;\">'table'</span>]);\n      <span style=\"color: blue;\">foreach</span>($workbookData-&gt;table <span style=\"color: blue;\">as</span> $worksheetDataSet) {\n        $worksheetData = $worksheetDataSet-&gt;children($namespacesContent[<span style=\"color: #a31515;\">'table'</span>]);\n        $worksheetDataAttributes = $worksheetDataSet-&gt;attributes($namespacesContent[<span style=\"color: #a31515;\">'table'</span>]);\n\n        $tmpInfo = <span style=\"color: blue;\">array</span>();\n        $tmpInfo[<span style=\"color: #a31515;\">'worksheetName'</span>] = $worksheetDataAttributes[<span style=\"color: #a31515;\">'name'</span>];\n        $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = <span style=\"color: #a31515;\">'A'</span>;\n        $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = 0;\n        $tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>] = 0;\n        $tmpInfo[<span style=\"color: #a31515;\">'totalColumns'</span>] = 0;\n\n        $rowIndex = 0;\n        <span style=\"color: blue;\">foreach</span> ($worksheetData <span style=\"color: blue;\">as</span> $key =&gt; $rowData) {\n          $rowHasData = false;\n\n          <span style=\"color: blue;\">switch</span> ($key) {\n            <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'table-row'</span> :\n              $columnIndex = 0;\n\n              <span style=\"color: blue;\">foreach</span> ($rowData <span style=\"color: blue;\">as</span> $key =&gt; $cellData) {\n                $cellHasData = false;\n\n                $cellDataText = $cellData-&gt;children($namespacesContent[<span style=\"color: #a31515;\">'text'</span>]);\n                $cellDataOfficeAttributes = $cellData-&gt;attributes($namespacesContent[<span style=\"color: #a31515;\">'office'</span>]);\n\n                <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">isset</span>($cellDataText-&gt;p)) {\n                  <span style=\"color: blue;\">switch</span> ($cellDataOfficeAttributes[<span style=\"color: #a31515;\">'value-type'</span>]) {\n                    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'string'</span> :\n                    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'boolean'</span> :\n                    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'float'</span> :\n                    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'date'</span> :\n                    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'time'</span> :\n                        $cellHasData = true;\n                        <span style=\"color: blue;\">break</span>;\n                  }\n                }\n\n                $cellDataText = null;\n                $cellDataOfficeAttributes = null;\n\n                <span style=\"color: blue;\">if</span> ($cellHasData) {\n                  $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = max($tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>], $columnIndex);\n                  $rowHasData = true;\n                }\n\n                ++$columnIndex;\n              }\n\n              ++$rowIndex;\n\n              <span style=\"color: blue;\">if</span> ($rowHasData) {\n                $tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>] = max($tmpInfo[<span style=\"color: #a31515;\">'totalRows'</span>], $rowIndex);\n              }\n              <span style=\"color: blue;\">break</span>;\n          }\n        }\n\n        $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = PHPExcel_Cell::stringFromColumnIndex($tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>]);\n        $tmpInfo[<span style=\"color: #a31515;\">'totalColumns'</span>] = $tmpInfo[<span style=\"color: #a31515;\">'lastColumnIndex'</span>] + 1;\n\n        $worksheetInfo[] = $tmpInfo;\n      }\n    }\n  }\n\n  <span style=\"color: blue;\">return</span> $worksheetInfo;\n}\n\n<span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// Reader SYLK.php custom method listWorksheetInfo()</span>\n<span style=\"color: green;\">//</span>\n\n<span style=\"color: green;\">/**\n* Return worksheet info (Name, Last Column Letter, Last Column Index, Total Rows, Total Columns)\n *\n * @param   string     $pFilename\n * @throws   Exception\n */</span>\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> listWorksheetInfo($pFilename)\n{\n  <span style=\"color: green;\">// Check if file exists</span>\n  <span style=\"color: blue;\">if</span> (!file_exists($pFilename)) {\n    <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> Exception(<span style=\"color: #a31515;\">\"Could not open \"</span> . $pFilename . <span style=\"color: #a31515;\">\" for reading! File does not exist.\"</span>);\n  }\n\n  <span style=\"color: green;\">// Open file</span>\n  $fileHandle = fopen($pFilename, <span style=\"color: #a31515;\">'r'</span>);\n  <span style=\"color: blue;\">if</span> ($fileHandle === false) {\n    <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> Exception(<span style=\"color: #a31515;\">\"Could not open file \"</span> . $pFilename . <span style=\"color: #a31515;\">\" for reading.\"</span>);\n  }\n\n$worksheetInfo = <span style=\"color: blue;\">array</span>();\n$worksheetInfo[0][<span style=\"color: #a31515;\">'worksheetName'</span>] = <span style=\"color: #a31515;\">'Worksheet'</span>;\n$worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = <span style=\"color: #a31515;\">'A'</span>;\n$worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = 0;\n$worksheetInfo[0][<span style=\"color: #a31515;\">'totalRows'</span>] = 0;\n$worksheetInfo[0][<span style=\"color: #a31515;\">'totalColumns'</span>] = 0;\n\n  <span style=\"color: green;\">// Loop through file</span>\n  $rowData = <span style=\"color: blue;\">array</span>();\n\n  <span style=\"color: green;\">// loop through one row (line) at a time in the file</span>\n  $rowIndex = 0;\n  <span style=\"color: blue;\">while</span> (($rowData = fgets($fileHandle)) !== FALSE) {\n    $columnIndex = 0;\n\n    <span style=\"color: green;\">// convert SYLK encoded $rowData to UTF-8</span>\n    $rowData = PHPExcel_Shared_String::SYLKtoUTF8($rowData);\n\n    <span style=\"color: green;\">// explode each row at semicolons while taking into account that literal semicolon (;)</span>\n    <span style=\"color: green;\">// is escaped like this (;;)</span>\n    $rowData = explode(<span style=\"color: #a31515;\">\"\\t\"</span>,str_replace(<span style=\"color: #a31515;\">'�'</span>,<span style=\"color: #a31515;\">';'</span>,str_replace(<span style=\"color: #a31515;\">';'</span>,<span style=\"color: #a31515;\">\"\\t\"</span>,str_replace(<span style=\"color: #a31515;\">';;'</span>,<span style=\"color: #a31515;\">'�'</span>,rtrim($rowData)))));\n\n    $dataType = array_shift($rowData);\n    <span style=\"color: blue;\">if</span> ($dataType == <span style=\"color: #a31515;\">'C'</span>) {\n      <span style=\"color: green;\">//  Read cell value data</span>\n      <span style=\"color: blue;\">foreach</span>($rowData <span style=\"color: blue;\">as</span> $rowDatum) {\n        <span style=\"color: blue;\">switch</span>($rowDatum{0}) {\n          <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'C'</span> :\n          <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'X'</span> :\n            $columnIndex = substr($rowDatum,1) - 1;\n            <span style=\"color: blue;\">break</span>;\n          <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'R'</span> :\n          <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'Y'</span> :\n            $rowIndex = substr($rowDatum,1);\n            <span style=\"color: blue;\">break</span>;\n        }\n\n        $worksheetInfo[0][<span style=\"color: #a31515;\">'totalRows'</span>] = max($worksheetInfo[0][<span style=\"color: #a31515;\">'totalRows'</span>], $rowIndex);\n        $worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnIndex'</span>] = max($worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnIndex'</span>], $columnIndex);\n      }\n    }\n  }\n\n  $worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = PHPExcel_Cell::stringFromColumnIndex($worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnIndex'</span>]);\n$worksheetInfo[0][<span style=\"color: #a31515;\">'totalColumns'</span>] = $worksheetInfo[0][<span style=\"color: #a31515;\">'lastColumnIndex'</span>] + 1;\n\n  <span style=\"color: green;\">// Close file</span>\n  <span style=\"color: blue;\">fclose</span>($fileHandle);\n\n  <span style=\"color: blue;\">return</span> $worksheetInfo;\n}\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p><strong>Read Filter and Spreadsheet Reader sample</strong></p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// This class overrides the default reader in order to ignore extraneous data.</span>\n<span style=\"color: green;\">//</span>\n<span style=\"color: blue;\">class</span> ReadFilter <span style=\"color: blue;\">implements</span> PHPExcel_Reader_IReadFilter\n{\n  <span style=\"color: blue;\">private</span> $_worksheetName;\n  <span style=\"color: blue;\">private</span> $_startRow;\n  <span style=\"color: blue;\">private</span> $_endRow;\n  <span style=\"color: blue;\">private</span> $_columns;\n  <span style=\"color: blue;\">private</span> $_isChunkRead;\n  <span style=\"color: blue;\">private</span> $_chunkStartRow;\n  <span style=\"color: blue;\">private</span> $_chunkSize;\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> __construct() {\n    $this-&gt;_worksheetName = <span style=\"color: #a31515;\">'Worksheet'</span>;\n    $this-&gt;_startRow      = 0;\n    $this-&gt;_endRow        = 65530;\n    $this-&gt;_columns       = <span style=\"background-color: white;\">$this-&gt;getColumnRange(</span><span style=\"background-color: white;\">'A'</span><span style=\"background-color: white;\">,</span><span style=\"background-color: white;\">'XFD'</span><span style=\"background-color: white;\">)</span>;\n    $this-&gt;_isChunkRead   = false;\n    $this-&gt;_chunkStartRow = 1;\n    $this-&gt;_chunkSize     = 1000; <span style=\"color: green;\">// Number of rows read in each chunk</span>\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setWorksheetName($worksheetName) {\n    $this-&gt;_worksheetName = (!<span style=\"color: blue;\">empty</span>($worksheetName)) ? $worksheetName : <span style=\"color: #a31515;\">'Worksheet'</span>;\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setStartRow($startRow) {\n    <span style=\"color: blue;\">if</span>(($startRow &gt;= 0) &amp;&amp; ($startRow &lt;= $this-&gt;_endRow)) {\n      $this-&gt;_startRow = $startRow;\n    }\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setEndRow($endRow) {\n    <span style=\"color: blue;\">if</span>($endRow &gt;= $this-&gt;_startRow)\n    {\n      $this-&gt;_endRow = $endRow;\n    }\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setColumns($columns) {\n    $this-&gt;_columns = (is_array($columns)) ? $columns  : $this-&gt;getColumnRange(<span style=\"color: #a31515;\">'A'</span>,<span style=\"color: #a31515;\">'XFD'</span>);\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setChunkRead() {\n    $this-&gt;_isChunkRead = true;\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setChunkSize($chunkSize = null) {\n    <span style=\"color: blue;\">if</span>(!is_null($chunkSize)) {\n      $this-&gt;_chunkSize = $chunkSize;\n    }\n\n    $this-&gt;_isChunkRead = true;\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> setChunkStartRow($chunkStartRow = null) {\n    <span style=\"color: blue;\">if</span>(!is_null($chunkStartRow)) {\n      $this-&gt;_chunkStartRow = $chunkStartRow;\n    }\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> unsetChunkRead() {\n    $this-&gt;_isChunkRead = false;\n  }\n\n  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> readCell($column, $row, $worksheetName = <span style=\"color: #a31515;\">''</span>) {\n    <span style=\"color: blue;\">if</span>((!<span style=\"color: blue;\">empty</span>($worksheetName)) &amp;&amp; ($worksheetName != $this-&gt;_worksheetName)) {\n      <span style=\"color: blue;\">return</span> false;\n    }\n\n    <span style=\"color: blue;\">if</span>($this-&gt;_isChunkRead) {\n      <span style=\"color: green;\">//  Read rows in chunks and only the columns specified</span>\n      <span style=\"color: blue;\">if</span>(($row &gt;= $this-&gt;_chunkStartRow) &amp;&amp; ($row &lt; ($this-&gt;_chunkStartRow + $this-&gt;_chunkSize)) &amp;&amp; ($row &lt;= $this-&gt;_endRow)) {\n        <span style=\"color: blue;\">if</span>(in_array($column, $this-&gt;_columns)) {\n          <span style=\"color: blue;\">return</span> true;\n        }\n      }\n    } <span style=\"color: blue;\">else</span> {\n      <span style=\"color: green;\">//  Read all rows but only the columns specified</span>\n      <span style=\"color: blue;\">if</span>($row &gt;= $this-&gt;_startRow &amp;&amp; $row &lt;= $this-&gt;_endRow) {\n        <span style=\"color: blue;\">if</span>(in_array($column, $this-&gt;_columns)) {\n          <span style=\"color: blue;\">return</span> true;\n        }\n      }\n    }\n\n    <span style=\"color: blue;\">return</span> false;\n  }\n}\n\n<span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// readSpreadsheetData()</span>\n<span style=\"color: green;\">//                       $FileName (String): File Name</span>\n<span style=\"color: green;\">//</span>\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> readSpreadsheetData($FileName) {\n  $this-&gt;data = <span style=\"color: blue;\">array</span>();\n\n  <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">empty</span>($FileName)) {\n    <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> Exception(<span style=\"color: #a31515;\">\"No file specified.\"</span>);\n  }\n\n  <span style=\"color: blue;\">if</span> (!file_exists($FileName)) {\n    <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> Exception(<span style=\"color: #a31515;\">\"Could not open \"</span> . $FileName . <span style=\"color: #a31515;\">\" for reading! File does not exist.\"</span>);\n  }\n\n  <span style=\"color: blue;\">try</span> {\n    $FileType = PHPExcel_IOFactory::identify($FileName);\n    $SpreadsheetReaderObj = PHPExcel_IOFactory::createReader($FileType);\n    <span style=\"color: blue;\">switch</span> ($FileType) {\n      <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'Excel2007'</span>:\n      <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'Excel2003XML'</span>:\n      <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'Excel5'</span>:\n      <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'OOCalc'</span>:\n      <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'SYLK'</span>:\n        <span style=\"color: blue;\">break</span>;\n      <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'CSV'</span>:\n        $SpreadsheetReaderObj-&gt;setDelimiter(<span style=\"color: #a31515;\">','</span>);\n        $SpreadsheetReaderObj-&gt;setEnclosure(<span style=\"color: #a31515;\">'\"'</span>);\n        $SpreadsheetReaderObj-&gt;setLineEnding(<span style=\"color: #a31515;\">'\\r\\n'</span>);\n        $SpreadsheetReaderObj-&gt;setInputEncoding(<span style=\"color: #a31515;\">'UTF-8'</span>);\n        <span style=\"color: blue;\">break</span>;\n    }\n\n    <span style=\"color: green;\">//</span>\n    <span style=\"color: green;\">// Get worksheet information.</span>\n    <span style=\"color: green;\">//</span>\n    $WorksheetListInfo = $SpreadsheetReaderObj-&gt;listWorksheetInfo($FileName);\n\n    <span style=\"color: green;\">//</span>\n    <span style=\"color: green;\">// Estimate maximum chunk size based on system memory.</span>\n    <span style=\"color: green;\">//</span>\n    $MemoryLimit = $this-&gt;getMemorySizeAsBytes();\n    $BufferFactor = 1; \n    $RowMemory = (1024 * 1) * $WorksheetListInfo[0][<span style=\"color: #a31515;\">'totalColumns'</span>];\n    $MaxChunkSize = max(intval(($MemoryLimit / $BufferFactor) / $RowMemory), 100);\n\n    $ReadFilter = <span style=\"color: blue;\">new</span> ReadFilter();\n    $SpreadsheetReaderObj-&gt;setReadFilter($ReadFilter);\n\n    <span style=\"color: blue;\">foreach</span> ($WorksheetListInfo <span style=\"color: blue;\">as</span> $WorksheetIndex =&gt; $WorksheetInfo) {\n      <span style=\"color: green;\">//</span>\n      <span style=\"color: green;\">// Worksheet Id may be used for identifying specific record.</span>\n      <span style=\"color: green;\">//</span>\n      $WorksheetId = $WorksheetIndex + 1;\n\n      <span style=\"color: green;\">//</span>\n      <span style=\"color: green;\">// If chunk size &gt; total rows in sheet reduce chunk size to total rows.</span>\n      <span style=\"color: green;\">//</span>\n      $ChunkSize = ($MaxChunkSize &lt; $WorksheetInfo[<span style=\"color: #a31515;\">'totalRows'</span>])\n                 ? $MaxChunkSize\n                 : $WorksheetInfo[<span style=\"color: #a31515;\">'totalRows'</span>];\n\n      <span style=\"color: green;\">//</span>\n      <span style=\"color: green;\">// Configure read filter.</span>\n      <span style=\"color: green;\">//</span>\n      $ReadFilter-&gt;setWorksheetName($WorksheetInfo[<span style=\"color: #a31515;\">'worksheetName'</span>]);\n      $ReadFilter-&gt;setColumns($this-&gt;getColumnRange(<span style=\"color: #a31515;\">'A'</span>, $WorksheetInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>]));\n      $ReadFilter-&gt;setEndRow($WorksheetInfo[<span style=\"color: #a31515;\">'totalRows'</span>]);\n      $ReadFilter-&gt;setChunkSize($ChunkSize);\n\n      <span style=\"color: blue;\">for</span> ($StartRow = 1; $StartRow &lt;= $WorksheetInfo[<span style=\"color: #a31515;\">'totalRows'</span>]; $StartRow += $ChunkSize) {\n        $ReadFilter-&gt;setStartRow($StartRow);\n\n        $SpreadsheetObj = $SpreadsheetReaderObj-&gt;load($FileName);\n        $SpreadsheetObj-&gt;setActiveSheetIndex($WorksheetIndex);\n\n        $WorksheetObj = $SpreadsheetObj-&gt;getActiveSheet();\n        <span style=\"color: blue;\">foreach</span> ($WorksheetObj-&gt;getRowIterator() <span style=\"color: blue;\">as</span> $RowObj) {\n          $RowId = $RowObj-&gt;getRowIndex();\n          <span style=\"color: blue;\">if</span> ($RowId &gt; $ChunkSize) {\n            <span style=\"color: blue;\">break</span>;\n          }\n\n          $SheetRowId = $StartRow + $RowId - 1;\n          <span style=\"color: blue;\">if</span> ($SheetRowId &gt; $WorksheetInfo[<span style=\"color: #a31515;\">'totalRows'</span>]) {\n            <span style=\"color: blue;\">break</span>;\n          }\n\n          $RecordId = <span style=\"color: #a31515;\">\"{$WorksheetId}-{$SheetRowId}\"</span>;\n          $this-&gt;data[<span style=\"color: #a31515;\">\"{$RecordId}\"</span>] = <span style=\"color: blue;\">array</span>(); <span style=\"color: green;\">// array() represents column data.</span>\n        }\n      }\n    }\n  } <span style=\"color: blue;\">catch</span> (Exception $ExceptionObj) {\n    <span style=\"color: green;\">//</span>\n    <span style=\"color: green;\">// Exception Error Handling</span>\n    <span style=\"color: green;\">//</span>\n  }\n}\n\n<span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// Returns array of column letters between ColumnLetter1 and ColumnLetter2 inclusively</span>\n<span style=\"color: green;\">//</span>\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> getColumnRange($ColumnLetter1, $ColumnLetter2)\n{\n  <span style=\"color: blue;\">static</span> $ColumnsReference = <span style=\"color: #a31515;\">''</span>;\n\n  <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">empty</span>($ColumnsReference)) {\n    $ColumnsReference = $this-&gt;initializeColumnsReference(3);\n  }\n\n  $ColumnRange = <span style=\"color: blue;\">array</span>();\n\n  $Length1 = strlen($ColumnLetter1);\n  $Length2 = strlen($ColumnLetter2);\n\n  $Pos1 = strpos($ColumnsReference, <span style=\"color: #a31515;\">\"|{$ColumnLetter1}|\"</span>);\n  $Pos2 = strpos($ColumnsReference, <span style=\"color: #a31515;\">\"|{$ColumnLetter2}|\"</span>);\n\n  <span style=\"color: blue;\">if</span> ($Pos2 &gt;= $Pos1) {\n    $StartPos = $Pos1 + 1;\n    $EndPos = $Pos2 + $Length2;\n\n    $Length = $EndPos - $StartPos + 1;\n\n    $RangeStr = substr($ColumnsReference, $StartPos, $Length);\n\n    $ColumnRange = explode(<span style=\"color: #a31515;\">'|'</span>, $RangeStr);\n  }\n\n  <span style=\"color: blue;\">return</span> $ColumnRange;\n}\n\n<span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// Generate string that contains column letters for future reference.</span>\n<span style=\"color: green;\">// initializeColumnsReference(1) = \"|A|B|C|...|X|Y|Z|\"</span>\n<span style=\"color: green;\">// initializeColumnsReference(2) = \"|A|B|C|...|ZX|ZY|ZZ|\"</span>\n<span style=\"color: green;\">// initializeColumnsReference(3) = \"|A|B|C|...|ZZX|ZZY|ZZZ|\"</span>\n<span style=\"color: green;\">//</span>\n<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">function</span> initializeColumnsReference($Width = 1)\n{\n  $ColumnsStr = <span style=\"color: #a31515;\">''</span>;\n  $ColumnLetter = <span style=\"color: #a31515;\">''</span>;\n  $LastColumnLetter = str_repeat(<span style=\"color: #a31515;\">'Z'</span>, $Width);\n  $Tier = <span style=\"color: #a31515;\">''</span>;\n\n  <span style=\"color: blue;\">do</span> {\n    <span style=\"color: blue;\">for</span> ($ChrVal = 65; $ChrVal &lt;= 90; $ChrVal++) {\n      $ColumnLetter = $Tier . chr($ChrVal);\n      $ColumnsStr .= <span style=\"color: #a31515;\">\"|{$ColumnLetter}\"</span>;\n    }\n\n    <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">empty</span>($Tier)) {\n      $Tier = <span style=\"color: #a31515;\">'A'</span>;\n    } <span style=\"color: blue;\">else</span> {\n      $IsEndTier = false;\n      $IsFirst = true;\n      $ZCount = 0;\n      $NewTier = <span style=\"color: #a31515;\">''</span>;\n\n      <span style=\"color: blue;\">foreach</span> (array_reverse(str_split($Tier)) <span style=\"color: blue;\">as</span> $TierChr) {\n        <span style=\"color: blue;\">if</span> (($TierChr == <span style=\"color: #a31515;\">'Z'</span>) &amp;&amp; ($IsEndTier || $IsFirst)) {\n          $NewTierChr = <span style=\"color: #a31515;\">'A'</span>;\n        } <span style=\"color: blue;\">elseif</span> ($IsEndTier || $IsFirst) {\n          $NewTierChr = chr(ord($TierChr) + 1);\n        } <span style=\"color: blue;\">else</span> {\n          $NewTierChr = $TierChr;\n        }\n\n        $IsEndTier = ($TierChr == <span style=\"color: #a31515;\">'Z'</span>) ? true : false;\n        $ZCount += ($TierChr == <span style=\"color: #a31515;\">'Z'</span>) ? 1 : 0;\n\n        $NewTier = <span style=\"color: #a31515;\">\"{$NewTierChr}{$NewTier}\"</span>;\n        $IsFirst = false;\n      }\n\n      $Tier = $NewTier;\n      $Tier .= ($ZCount == strlen($Tier)) ?  <span style=\"color: #a31515;\">'A'</span> : <span style=\"color: #a31515;\">''</span>;\n    }\n  } <span style=\"color: blue;\">while</span> ($ColumnLetter != $LastColumnLetter);\n\n  $ColumnsStr .= <span style=\"color: #a31515;\">\"|\"</span>;\n\n  <span style=\"color: blue;\">return</span> $ColumnsStr;\n}\n\n<span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// Convert Memory Size To Bytes</span>\n<span style=\"color: green;\">//</span>\n<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">function</span> getMemorySizeAsBytes() {\n  $memory_size = ini_get(<span style=\"color: #a31515;\">'memory_limit'</span>);\n\n  <span style=\"color: blue;\">switch</span> (substr($memory_size, -1)) {\n    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'G'</span>:\n    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'g'</span>:\n      <span style=\"color: blue;\">return</span> (int) $memory_size * 1073741824;\n    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'M'</span>:\n    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'m'</span>:\n      <span style=\"color: blue;\">return</span> (int) $memory_size * 1048576;\n    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'K'</span>:\n    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'k'</span>:\n      <span style=\"color: blue;\">return</span> (int) $memory_size * 1024;\n  }\n\n  <span style=\"color: blue;\">return</span> $memory_size;\n}\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"font-family: 'Segoe UI','Microsoft Sans Serif',Arial,Geneva,sans-serif;\"><span style=\"white-space: normal;\">\n</span></span></pre>\n</div>",
    "PostedDate": "2011-06-02T11:46:11.957-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "624725",
    "ThreadId": "259971",
    "Html": "<p>I think this code may be exactly what I need to work with some overly large CSV files (these files used to be XLS but I figured using CSV would probably be less memory intensive)</p>\r\n<p>I'm currently writing some code that reads data from a spreadsheet and inserts this into a database, this all works fine until the spreadsheets get too large</p>\r\n<p>For reference, the original XLS file I'm working with right now was about 85 MB (but it will eventually have to handle files of around 350 MB as well)</p>\r\n<p>It contains 3 worksheets which I saved as CSV files, the first one is rather small, the other two are a little over 20 MB each</p>\r\n<p>Each of the larger CSV files contains about 48,000 rows and 47 columns (larger files will have larger amounts of columns, not rows)</p>\r\n<p>Now the application I'm writing can handle it when I trim the CSV files into their first 10,000 rows, and uses about 300 MB of memory when processing them (both, not each), I've tried to use the approach of loading the files in chunks to conserve memory usage, but it doesn't seem to be helping much</p>\r\n<p>&nbsp;</p>\r\n<p>Perhaps this code of yours will be exactly what I need, however I can't seem to get it running; I'm afraid I'm still quite new to php and perhaps you could help me by offering some tips on implementing your code</p>\r\n<p>&nbsp;</p>\r\n<p>The way I understood it is that I basically include all the code you supplied (although I only copied the CSV Reader as it's the only Reader I'd use) and to get it running I&nbsp;call&nbsp;<span style=\"font-family: Consolas, 'Courier New', Courier, monospace; white-space: pre;\">readSpreadsheetData()</span></p>\r\n<p>I'm probably missing something very simple here so any help you could offer would be very much appreciated</p>\r\n<p>&nbsp;</p>\r\n<p>-Jeroen</p>",
    "PostedDate": "2011-06-08T06:43:23.7-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "624931",
    "ThreadId": "259971",
    "Html": "<p>@jeroenbakker</p>\n<p>Well since this code was derived from my actual working code there are several presumptions that are not mentioned that could cause some hang ups.</p>\n<p>1) readSpreadsheetData() is a method defined inside of a class. You need to define that class minimally in order for this method to work.</p>\n<p>2) readSpreadsheetData() requires the ReadFilter class to be loaded in order to work.</p>\n<p>3) The following line in the readSpreadsheetData() method presumes that PHP server allows the usage of the ini_get() command.</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp; $MemoryLimit = $this-&gt;return_bytes(ini_get(<span style=\"color: #a31515;\">'memory_limit'</span>));</p>\n<p>&nbsp;</p>\n<p>Since you say you are new to PHP any of the above could easily be overlooked. So here's instructions and fully functional code with just a couple of changes needed.</p>\n<p>If you've installed the PHPExcel package somewhere besides the root directory you will need to specify the $ClassesPath.</p>\n<p>Copy the following php code and replace &lt;Specify File&gt; to the actual file name you want to load.</p>\n<p>This will read the spreadsheet into a simple array[&lt;Record Id&gt;][&lt;Column Data&gt;] and then show this array using the print_r() command;</p>\n<p><strong>(Note: I have not actually tested the code below so let me know if you have any issues.)</strong></p>\n<p><strong>I've removed the code posted here since I've updated the original post to include it.</strong></p>",
    "PostedDate": "2011-06-08T13:15:26.027-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "624941",
    "ThreadId": "259971",
    "Html": "<p>Thanks a lot for responding! (with working code!)</p>\r\n<p>I'm not currently at a computer which has all the files I work with, but I'll give this a go tomorrow, I'm certain the key to getting my code to work is in your post, as I did spot a mistake I made</p>\r\n<p>The mistake being that I did not define&nbsp;readSpreadsheetData() inside of a class</p>\r\n<p>I'm used to working with Java where such a thing would be a given, but I'm new enough to php that I wasn't sure if that was necessary (and I regret to admit that I haven't actually taken the time to get to know php a lot before starting to work with it)</p>\r\n<p>I'm not sure if&nbsp;my php server allows the usage of the ini_get() command, but as I'm running it locally I'll be able to change that if need be</p>\r\n<p>I'll certainly let you know how this worked out, and many thanks again</p>",
    "PostedDate": "2011-06-08T13:25:33.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "624950",
    "ThreadId": "259971",
    "Html": "<p>Glad to help.</p>\n<p>Also I should note that I made some minor tweaks to the code to make reading the column data a bit easier. And the chunk size formula is deliberately conservative so you might want to experiment in order to get the best performance.</p>\n<p>Anyway, now there is a piece of test code that can be used to verify if the spreadsheet is actually being read and will spit out any errors for debugging.</p>\n<p>- Christopher Mullins</p>",
    "PostedDate": "2011-06-08T13:44:56.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "625649",
    "ThreadId": "259971",
    "Html": "<p>There were actually a few small issues, but I've managed to resolve them all on my own</p>\n<p>A few of them (2 or 3) were capitalisation issues, one of them was that there was a distinct lack of the return_bytes() function :P (or maybe I implemented something wrong? In any case I found and put in my own) and... maybe there was something else, but  that was the gist of it</p>\n<p>I have yet to try it on a large file right now, because it's getting a bit late here and I assume it'll take a while to process</p>\n<p>Once I've tried a larger file I'll let you know how it goes</p>\n<p>Thanks for all the effort so far!</p>\n<p>&nbsp;</p>\n<p>-Jeroen</p>\n<p>Edit:</p>\n<p>Well, it still ran out of memory (I had allocated 400MB, perhaps I should've gone with more), sometimes it seems reading it in chunks consumes even more memory</p>\n<p>As I am working with CSV files of which I know what kind of values it holds (all numbers and a few letters) I have chosen instead to just read and open it as any text file, which is a lot quicker of course</p>\n<p>To be honest I am not sure why I stuck with PHPExcel when all I did was read CSV files, I suppose it is because I started out with Excel files</p>\n<p>Many thanks for your help and efforts though</p>",
    "PostedDate": "2011-06-09T15:10:14.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "659503",
    "ThreadId": "259971",
    "Html": "<p>I found your code to be very useful Crhirs, thanks a lot!&nbsp; One thing I am having problems with is the 'listWorksheetInfo($FileName)' function.&nbsp; Where should I place this function?&nbsp; I tried putting it in the IOFiactory.php file but that didn't work.&nbsp; I also tried creating a class for it and then calling it with an object but that also didn't work.&nbsp; I am also new to PHP so I am not so I wouldn't be surprised to find I am doing some silly mistake.&nbsp; Can someone advice?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks!</p>\r\n<p>-Rick</p>",
    "PostedDate": "2011-08-17T09:38:48.883-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "698047",
    "ThreadId": "259971",
    "Html": "<p>Absolutely great! - I am developing a program that extracts data from manufacturers products-lists, mostly formated in an excel format and had big issues with the command-sequence \"select a file -&gt; select a worksheet -&gt; read selected lines of the worksheet\" with big files.<br />With \"big files\" I mean files with 200 and more MB.<br />It was horrible that only listing the embedded worksheets took about half an hour to create the selection dropdown list because all data had to be read.</p>\r\n<p>Your code shows that it should \"ABSOLUTELY\" make it's way into the project. Maybe by defining base classes with your code and deriving the existing classes from them to make it all backwards-compatible.</p>\r\n<p>My big and great THANK YOU for this code and post.</p>\r\n<p>Yours Henri</p>",
    "PostedDate": "2011-11-14T12:14:28.967-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "699603",
    "ThreadId": "259971",
    "Html": "<p>Hi again,</p>\n<p>great, I tested the code and expecially the listWorksheetInfo($pFilename) function.</p>\n<p>When I tested the function with Excel-files with a lot of columns (Last column GH) i noticed that the array would always only return Z as the last column.</p>\n<p>So, for example in the listWorksheetInfo($pFilename) function of the Excel5.php file, a comparison is made :</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">if</span> ($columnString &gt; $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>]) {\n    $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = $columnString;\n}\n</pre>\n</div>\n<p>Because the comparison</p>\n<p>&nbsp;</p>\n<pre>$columnString &gt; $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] does only work for column-strings with one letters, I added a function...<br /><br /><div style=\"color: black; background-color: white;\"><pre>\t<span style=\"color: green;\">/**\n\t* Return TRUE if the first parameter is \"greater\" than the second\n\t*\n\t* @param   string $compareme\n\t* @param   string $compareme\n\t*\n\t* @return boolean\n\t*/</span>\n\t<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">function</span> compareColumnLetters(&amp;$compareme, &amp;$with) {\n\t\t<span style=\"color: blue;\">if</span> ( strlen($compareme) == 1 &amp;&amp; strlen($with) == 1 &amp;&amp; $compareme &gt; $with) {\n\t\t\t<span style=\"color: blue;\">return</span> TRUE;\n\t\t}\n\t\t<span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (strlen($compareme) &gt; strlen($with)) {\n\t\t\t<span style=\"color: blue;\">return</span> TRUE;\n\t\t}\n\n\t\t<span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (strlen($compareme) === 2 &amp;&amp; strlen($with) === 2) {\n\t\t\t$arrayCompareme = preg_split(<span style=\"color: #a31515;\">'//'</span>, $compareme, -1, PREG_SPLIT_NO_EMPTY);\n\t\t\t$arrayWith = preg_split(<span style=\"color: #a31515;\">'//'</span>, $with, -1, PREG_SPLIT_NO_EMPTY);\n\n\t\t\t$arrayBigger = <span style=\"color: blue;\">array</span>();\n\t\t\t<span style=\"color: blue;\">for</span> ($i = 0; $i &lt; 2; $i++) {\n\t\t\t\t<span style=\"color: blue;\">if</span> ($arrayCompareme[$i] == $arrayWith[$i]) {\n\t\t\t\t\t$arrayBigger[$i] = <span style=\"color: #a31515;\">'e'</span>;\n\t\t\t\t}\n\t\t\t\t<span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> ($arrayCompareme[$i] &gt; $arrayWith[$i]) {\n\t\t\t\t\t$arrayBigger[$i] = <span style=\"color: #a31515;\">'b'</span>;\n\t\t\t\t}\n\t\t\t\t<span style=\"color: blue;\">else</span> {\n\t\t\t\t\t$arrayBigger[$i] = <span style=\"color: #a31515;\">'s'</span>;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t<span style=\"color: blue;\">if</span> ($arrayBigger[0] == <span style=\"color: #a31515;\">'b'</span>) {\n\t\t\t\t<span style=\"color: blue;\">return</span> TRUE;\n\t\t\t}\n\t\t\t<span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> ($arrayBigger[0] == <span style=\"color: #a31515;\">'e'</span> &amp;&amp; $arrayBigger[1] == <span style=\"color: #a31515;\">'b'</span>) {\n\t\t\t\t<span style=\"color: blue;\">return</span> TRUE;\n\t\t\t}\n\t\t}\n\n\t\t<span style=\"color: blue;\">return</span> FALSE;\n\t}\n</pre>\n</div>\n...which has to be added to each reader-override file and replaced the comparison with:<br />\n<pre><span style=\"color: blue;\">if</span> ($this-&gt;compareColumnLetters($columnString, $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>])) {\n    $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = $columnString;\n}\n<br />This at least returns the correct last column-string also for column-strings with two letters.<br /><br />Great code! This function really almost consumes no memory.</pre>\nYours Henri Schom&auml;cker</pre>",
    "PostedDate": "2011-11-17T07:15:00.717-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "702534",
    "ThreadId": "259971",
    "Html": "<p>And hello again,</p>\n<p>first of all to answer richis question:</p>\n<p>Add the listWorksheetInfo($FileName) functions listed by <a class=\"UserProfileLink\" href=\"http://www.codeplex.com/site/users/view/schir1964\"> schir1964</a> to the file named above each function in the Classes/PHPExcel/Reader directory.</p>\n<p>If you want to also support spreadsheet files with more columns than from A to Z, read my reply directly above this one.</p>\n<p>Because I also need an array of all column-names (A, B, C etc.) I now also added some lines to return the columnLetters in the array provided by listWorksheetInfo:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">if</span> ($this-&gt;compareColumnLetters($columnString, $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>])) {\n\t$tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = $columnString;\n\n\t<span style=\"color: blue;\">if</span> (array_search($columnString, $tmpInfo[<span style=\"color: #a31515;\">'columnLetters'</span>]) === FALSE) {\n\t\t$tmpInfo[<span style=\"color: #a31515;\">'columnLetters'</span>][] = $columnString;\n\t}\n}<br />&nbsp;<br /></pre>\n</div>\n<p>&nbsp;</p>\n<p>Note that you have to take care of the naming of the variables in every Reader file because their names differ from file to file!</p>\n<p>&nbsp;</p>\n<p>And here's a little example how to use the listWorksheetInfo function:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">if</span> (file_exists($datafile) &amp;&amp; is_readable($datafile)) {\n\n\t<span style=\"color: blue;\">try</span> {\n\t\t$FileType = PHPExcel_IOFactory::identify($datafile);\n\n\t\t$SpreadsheetReaderObj = PHPExcel_IOFactory::createReader($FileType);\n\t\t<span style=\"color: blue;\">switch</span> ($FileType) {\n\t\t\t<span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'Excel5'</span>:\n\t\t\t<span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'Excel2003XML'</span>:\n\t\t\t<span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'Excel2007'</span>:\n\t\t\t<span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'OOCalc'</span>:\n\t\t\t<span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'SYLK'</span>:\n\t\t\t<span style=\"color: blue;\">break</span>;\n\t\t\t<span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">'CSV'</span>:\n\t\t\t$SpreadsheetReaderObj-&gt;setDelimiter(<span style=\"color: #a31515;\">','</span>);\n\t\t\t$SpreadsheetReaderObj-&gt;setEnclosure(<span style=\"color: #a31515;\">'\"'</span>);\n\t\t\t$SpreadsheetReaderObj-&gt;setLineEnding(<span style=\"color: #a31515;\">'\\r\\n'</span>);\n\t\t\t$SpreadsheetReaderObj-&gt;setInputEncoding(<span style=\"color: #a31515;\">'UTF-8'</span>);\n\t\t\t<span style=\"color: blue;\">break</span>;\n\t\t}\n\n\t\t<span style=\"color: green;\">// Get worksheet information.</span>\n\t\t$WorksheetListInfo = $SpreadsheetReaderObj-&gt;listWorksheetInfo($datafile);\n\t}\n\t<span style=\"color: blue;\">catch</span> (Exception $ExceptionObj) {\n\t\t<span style=\"color: blue;\">echo</span> $ExceptionObj-&gt;getMessage();\n\t}\n\n\tprint_r($WorksheetListInfo);\n}\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>Yours Henri Schom&auml;cker</p>\n<p>&nbsp;</p>",
    "PostedDate": "2011-11-23T11:40:19.07-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "706288",
    "ThreadId": "259971",
    "Html": "<p>@byteconcepts</p>\r\n<p>Thanks for the kind words. And for relaying the column issue. The files that I am dealing with might have 8 to 10 columns at most so I would have never have run into the issue.</p>\r\n<p>I'll give your code some thought to see if perhaps there is a more efficient way to do those comparisons. I intend fix the issue with my code even if I may never run into it.</p>\r\n<p>Thanks again Henri!</p>\r\n<p>- Christopher Mullins</p>",
    "PostedDate": "2011-12-02T00:24:56.09-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "706332",
    "ThreadId": "259971",
    "Html": "<div style=\"color: black; background-color: white;\">\n<pre><span style=\"font-family: 'Segoe UI','Microsoft Sans Serif',Arial,Geneva,sans-serif; white-space: normal;\"><div style=\"color: black; background-color: white;\"><pre><div style=\"color: black; background-color: white;\"><pre>\n</pre>\n</div>\n</pre>\n</div>\n</span></pre>\n</div>\n<p>&nbsp;</p>\n<p>/* Removed obsolete code in favor of MarkBaker's suggestion below */</p>\n<p>Here's some code to return the max column letter of two column letters.</p>\n<p>- Christopher Mullins</p>",
    "PostedDate": "2011-12-02T01:42:10.563-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "706710",
    "ThreadId": "259971",
    "Html": "<p>I've added the following routine to the CSV.php file and change the listWorksheetInfo method in the initial post to use it for finding the lasColumnLetter.</p>\n<p>/* Removed obsolete code in favor of MarkBaker's suggestion below (/</p>",
    "PostedDate": "2011-12-02T15:50:52.917-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "708690",
    "ThreadId": "259971",
    "Html": "<p>@<a class=\"UserProfileLink\" href=\"http://www.codeplex.com/site/users/view/schir1964\">schir1964</a> Sorry, but did you test the code of convertIntToColumnLetter($columnInt) with more than 26 column-letters (A to Z) ?</p>\r\n<p>Instead of AZ it returns B@</p>\r\n<p>Instead of BZ it returns C@</p>\r\n<p>...and so on.</p>\r\n<p>My test-code:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">echo</span> <span style=\"color: #a31515;\">\"Number of column letters: \\n\"</span>;\r\n$col_letters = convertColumnLetterToInt(<span style=\"color: #a31515;\">'GH'</span>);\r\n<span style=\"color: blue;\">echo</span> $col_letters;\r\n\r\n<span style=\"color: blue;\">echo</span> <span style=\"color: #a31515;\">\"&lt;p&gt;Column letters: &lt;br /&gt;\\n\"</span>;\r\n<span style=\"color: blue;\">for</span> ($i = 1; $i &lt;= $col_letters; $i++) {\r\n\t<span style=\"color: blue;\">echo</span> convertIntToColumnLetter($i) . <span style=\"color: #a31515;\">\" &lt;br /&gt;\\n\"</span>;\r\n}\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-12-07T02:49:07.607-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "708810",
    "ThreadId": "259971",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>byteconcepts wrote:</strong><br />\r\n<p>@<a class=\"UserProfileLink\" href=\"http://www.codeplex.com/site/users/view/schir1964\">schir1964</a> Sorry, but did you test the code of convertIntToColumnLetter($columnInt) with more than 26 column-letters (A to Z) ?</p>\r\n</blockquote>\r\n<p>Use PHPExcel's built in cell address functions for handling this</p>\r\n<p>PHPExcel_Cell::columnIndexFromString()</p>\r\n<p>and</p>\r\n<p>PHPExcel_Cell::stringFromColumnIndex()</p>\r\n<p>then you don't have any expensive looping either</p>",
    "PostedDate": "2011-12-07T07:01:37.697-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "708969",
    "ThreadId": "259971",
    "Html": "<p>@MarkBaker</p>\r\n<p>Thanks! I knew there had to be a better way to do this, but I didn't have time to research it thoroughly.</p>\r\n<p>When I get time I'll make the changes for easy reference here.</p>\r\n<p>- Christopher Mullins</p>",
    "PostedDate": "2011-12-07T12:12:32.9-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "709065",
    "ThreadId": "259971",
    "Html": "<p>I will look to include this in the 1.7.7 release</p>",
    "PostedDate": "2011-12-07T15:26:55.513-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "709153",
    "ThreadId": "259971",
    "Html": "<blockquote style=\"border: solid .1em #ccc; font-style: italic; margin: .25em 1em 0 1em; padding: 0 .25em 0 .25em;\"><strong>byteconcepts wrote:</strong><br />...\r\n<p>Because I also need an array of all column-names (A, B, C etc.) I now also added some lines to return the columnLetters in the array provided by listWorksheetInfo:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">if</span> ($this-&gt;compareColumnLetters($columnString, $tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>])) {\r\n\t$tmpInfo[<span style=\"color: #a31515;\">'lastColumnLetter'</span>] = $columnString;\r\n\r\n\t<span style=\"color: blue;\">if</span> (array_search($columnString, $tmpInfo[<span style=\"color: #a31515;\">'columnLetters'</span>]) === FALSE) {\r\n\t\t$tmpInfo[<span style=\"color: #a31515;\">'columnLetters'</span>][] = $columnString;\r\n\t}\r\n}</pre>\r\n</div>\r\n</blockquote>\r\n<p>I processed some xls files now using my little extension to the new function which should return the \"columnLetters\" array, but ATTENTION:</p>\r\n<p>I'm sorry, but it worked in about 95% percent of the processed files but I had to notice that in some files where at the beginning of a worksheet multiple columns in some rows were combined to one, the array columnLetters returned strange and wrong results!</p>\r\n<p>But: lastColumnLetter was always correct!</p>\r\n<p>So I changed my code, throw (in the readers code) away...</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">if</span> (array_search($columnString, $tmpInfo[<span style=\"color: #a31515;\">'columnLetters'</span>]) === FALSE) {\r\n\t$tmpInfo[<span style=\"color: #a31515;\">'columnLetters'</span>][] = $columnString;\r\n}\r\n</pre>\r\n</div>\r\n<p>...and replaced it (in my main code, not in the readers files) with...</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">foreach</span> ($array_worksheet_list_info AS $ws_idx =&gt; $array_ws_metadata) {\r\n\t<span style=\"color: blue;\">if</span> ( strlen(trim($array_ws_metadata[<span style=\"color: #a31515;\">'lastColumnLetter'</span>])) &gt; 0 ) {\r\n\t\t$highest_column_number = PHPExcel_Cell::columnIndexFromString($array_ws_metadata[<span style=\"color: #a31515;\">'lastColumnLetter'</span>]);\r\n\r\n\t\t$array_column_letters = <span style=\"color: blue;\">array</span>();\r\n\t\t<span style=\"color: blue;\">for</span> ($c = 0; $c &lt; $highest_column_number; $c++) {\r\n\t\t\t$array_column_letters[] = PHPExcel_Cell::stringFromColumnIndex($c);\r\n\t\t}\r\n\r\n\t\t$array_worksheet_list_info[$ws_idx][<span style=\"color: #a31515;\">'columnLetters'</span>] = $array_column_letters;\r\n\t}\r\n\t<span style=\"color: blue;\">else</span> {\r\n\t\t$array_worksheet_list_info[$ws_idx][<span style=\"color: #a31515;\">'columnLetters'</span>] = <span style=\"color: blue;\">array</span>();\r\n\t}\r\n}\r\n</pre>\r\n</div>\r\n<p>...because I only need it once in my application while the file is uploaded and then it's metadata is explored and saved to DB.</p>\r\n<p>This will always work if lastColumnLetter is correct. - And if you don't like to modify the PHPExcel package you get the array by using the $objPHPExcelWorksheet-&gt;getHighestColumn() method.</p>\r\n<p>Many thanks for the hints to PHPExcel_Cell::columnIndexFromString(string) and PHPExcel_Cell::stringFromColumnIndex(int), Mark !!!</p>\r\n<p>Yours Henri</p>",
    "PostedDate": "2011-12-07T22:49:31.71-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "709169",
    "ThreadId": "259971",
    "Html": "<p>Possibly another useful hint, to get an array of <strong><em>all </em></strong>column letters between A and $objPHPExcelWorksheet-&gt;getHighestColumn(), you can take advantage of PHP's <em>Perl-style </em>character incrementor:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>$col = <span style=\"color: #a31515;\">'A'</span>;\r\n$lastCol = $objPHPExcelWorksheet-&gt;getHighestColumn();\r\n$columnArray = <span style=\"color: blue;\">array</span>($col);\r\n<span style=\"color: blue;\">while</span>($col != $lastCol) {\r\n    $columnArray[] = ++$col;\r\n}\r\n</pre>\r\n</div>\r\n<p>Note that this does ignore whether columns are actually used in the worksheet or not, but the column incrementor can be incredibly useful... it's just a pity that the decrementor doesn't work the same way with characters.</p>",
    "PostedDate": "2011-12-07T23:48:03.373-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "709474",
    "ThreadId": "259971",
    "Html": "<p>Okay, I've updated my original post with new versions of the methods for each reader using the internal functions for gathering the information.</p>\r\n<p>I'll be testing this code on and off for the next few weeks, but I think the code is pretty solid now.</p>\r\n<p>Thanks again for the help.</p>\r\n<p>- Christopher Mullins</p>",
    "PostedDate": "2011-12-08T12:18:43.927-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "709678",
    "ThreadId": "259971",
    "Html": "<p>@byteconcepts</p>\n<p>Here's my attempt at creating a more robust method for returning a range of column letters:</p>\n<p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// Returns array of column letters between ColumnLetter1 and ColumnLetter2 inclusively</span>\n<span style=\"color: green;\">//</span>\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">function</span> getColumnRange($ColumnLetter1, $ColumnLetter2)\n{\n  <span style=\"color: blue;\">static</span> $ColumnsReference = <span style=\"color: #a31515;\">''</span>;\n\n  <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">empty</span>($ColumnsReference)) {\n    $ColumnsReference = $this-&gt;initializeColumnsReference(3);\n  }\n\n  $ColumnRange = <span style=\"color: blue;\">array</span>();\n\n  $Length1 = strlen($ColumnLetter1);\n  $Length2 = strlen($ColumnLetter2);\n\n  $Pos1 = strpos($ColumnsReference, <span style=\"color: #a31515;\">\"|{$ColumnLetter1}|\"</span>);\n  $Pos2 = strpos($ColumnsReference, <span style=\"color: #a31515;\">\"|{$ColumnLetter2}|\"</span>);\n\n  <span style=\"color: blue;\">if</span> ($Pos2 &gt;= $Pos1) {\n    $StartPos = $Pos1 + 1;\n    $EndPos = $Pos2 + $Length2;\n\n    $Length = $EndPos - $StartPos + 1;\n\n    $RangeStr = substr($ColumnsReference, $StartPos, $Length);\n\n    $ColumnRange = explode(<span style=\"color: #a31515;\">'|'</span>, $RangeStr);\n  }\n\n  <span style=\"color: blue;\">return</span> $ColumnRange;\n}\n\n<span style=\"color: green;\">//</span>\n<span style=\"color: green;\">// Generate string that contains column letters for future reference.</span>\n<span style=\"color: green;\">// initializeColumnsReference(1) = \"|A|B|C|...|X|Y|Z|\"</span>\n<span style=\"color: green;\">// initializeColumnsReference(2) = \"|A|B|C|...|ZX|ZY|ZZ|\"</span>\n<span style=\"color: green;\">// initializeColumnsReference(3) = \"|A|B|C|...|ZZX|ZZY|ZZZ|\"</span>\n<span style=\"color: green;\">//</span>\n<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">function</span> initializeColumnsReference($Width = 1)\n{\n  $ColumnsStr = <span style=\"color: #a31515;\">''</span>;\n  $ColumnLetter = <span style=\"color: #a31515;\">''</span>;\n  $LastColumnLetter = str_repeat(<span style=\"color: #a31515;\">'Z'</span>, $Width);\n  $Tier = <span style=\"color: #a31515;\">''</span>;\n\n  <span style=\"color: blue;\">do</span> {\n    <span style=\"color: blue;\">for</span> ($ChrVal = 65; $ChrVal &lt;= 90; $ChrVal++) {\n      $ColumnLetter = $Tier . chr($ChrVal);\n      $ColumnsStr .= <span style=\"color: #a31515;\">\"|{$ColumnLetter}\"</span>;\n    }\n\n    <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">empty</span>($Tier)) {\n      $Tier = <span style=\"color: #a31515;\">'A'</span>;\n    } <span style=\"color: blue;\">else</span> {\n      $IsEndTier = false;\n      $IsFirst = true;\n      $ZCount = 0;\n      $NewTier = <span style=\"color: #a31515;\">''</span>;\n\n      <span style=\"color: blue;\">foreach</span> (array_reverse(str_split($Tier)) <span style=\"color: blue;\">as</span> $TierChr) {\n        <span style=\"color: blue;\">if</span> (($TierChr == <span style=\"color: #a31515;\">'Z'</span>) &amp;&amp; ($IsEndTier || $IsFirst)) {\n          $NewTierChr = <span style=\"color: #a31515;\">'A'</span>;\n        } <span style=\"color: blue;\">elseif</span> ($IsEndTier || $IsFirst) {\n          $NewTierChr = chr(ord($TierChr) + 1);\n        } <span style=\"color: blue;\">else</span> {\n          $NewTierChr = $TierChr;\n        }\n\n        $IsEndTier = ($TierChr == <span style=\"color: #a31515;\">'Z'</span>) ? true : false;\n        $ZCount += ($TierChr == <span style=\"color: #a31515;\">'Z'</span>) ? 1 : 0;\n\n        $NewTier = <span style=\"color: #a31515;\">\"{$NewTierChr}{$NewTier}\"</span>;\n        $IsFirst = false;\n      }\n\n      $Tier = $NewTier;\n      $Tier .= ($ZCount == strlen($Tier)) ?  <span style=\"color: #a31515;\">'A'</span> : <span style=\"color: #a31515;\">''</span>;\n    }\n  } <span style=\"color: blue;\">while</span> ($ColumnLetter != $LastColumnLetter);\n\n  $ColumnsStr .= <span style=\"color: #a31515;\">\"|\"</span>;\n\n  <span style=\"color: blue;\">return</span> $ColumnsStr;\n}\n</pre>\n</div>\n</p>\n<p>The $ColumnsReference variable only gets initialized the first time the method is called.</p>\n<p>- Christopher Mullins</p>",
    "PostedDate": "2011-12-08T21:42:40.27-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "711717",
    "ThreadId": "259971",
    "Html": "<p>Just an update.</p>\n<p>I've been testing the code shown for the past couple of weeks and what is shown works as intended.</p>\n<p>I am now confident that the code shown here is solid.</p>\n<p>There may be ways to make this code even more efficient but unfortunately I don't have time to analyze where it could be.</p>\n<p>&nbsp;</p>\n<p>- Christopher Mullins</p>",
    "PostedDate": "2011-12-13T13:19:50.237-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]